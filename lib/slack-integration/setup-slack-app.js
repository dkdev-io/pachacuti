#!/usr/bin/env node

/**
 * Slack App Setup Script
 * Helps configure the Slack app and generates necessary tokens
 */

const fs = require('fs').promises;
const path = require('path');
const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

const question = (query) => new Promise((resolve) => rl.question(query, resolve));

async function setup() {
  console.log('üöÄ Pachacuti Slack Integration Setup');
  console.log('=====================================\n');
  
  console.log('üìã Prerequisites:');
  console.log('1. Create a Slack app at https://api.slack.com/apps');
  console.log('2. Add the following OAuth scopes:');
  console.log('   - channels:manage');
  console.log('   - channels:read');
  console.log('   - chat:write');
  console.log('   - chat:write.public');
  console.log('   - commands');
  console.log('   - groups:write');
  console.log('   - im:write');
  console.log('   - users:read\n');
  
  console.log('3. Enable Interactive Components');
  console.log('   Request URL: https://your-domain.com/slack/interactive\n');
  
  console.log('4. Add Slash Commands:');
  console.log('   /approval-status - Check pending approvals');
  console.log('   /approval-cleanup - Clean up old channels\n');
  
  console.log('5. Install the app to your workspace\n');
  
  console.log('='.repeat(50));
  console.log('Let\'s configure your integration:\n');
  
  // Collect configuration
  const config = {};
  
  config.SLACK_BOT_TOKEN = await question('Enter Bot User OAuth Token (xoxb-...): ');
  config.SLACK_SIGNING_SECRET = await question('Enter Signing Secret: ');
  config.SLACK_WEBHOOK_PORT = await question('Webhook server port (default 3000): ') || '3000';
  config.SLACK_TEAM_ID = await question('Workspace Team ID (optional): ') || '';
  
  // Create .env file
  const envContent = `# Slack App Configuration
# Generated by setup script on ${new Date().toISOString()}

# Bot User OAuth Token
SLACK_BOT_TOKEN=${config.SLACK_BOT_TOKEN}

# Signing Secret for verifying requests
SLACK_SIGNING_SECRET=${config.SLACK_SIGNING_SECRET}

# Webhook server configuration
SLACK_WEBHOOK_PORT=${config.SLACK_WEBHOOK_PORT}

# Workspace ID
SLACK_TEAM_ID=${config.SLACK_TEAM_ID}

# Feature configuration
SLACK_AUTO_ARCHIVE=true
SLACK_REMINDER_MINUTES=15
SLACK_HEALTH_CHECK_INTERVAL=30
`;
  
  const envPath = path.join(__dirname, '.env');
  await fs.writeFile(envPath, envContent);
  
  console.log('\n‚úÖ Configuration saved to .env');
  
  // Test connection
  console.log('\nüîç Testing Slack connection...');
  
  try {
    const { WebClient } = require('@slack/web-api');
    const client = new WebClient(config.SLACK_BOT_TOKEN);
    
    const auth = await client.auth.test();
    console.log(`‚úÖ Connected as ${auth.user} in team ${auth.team}`);
    
    // Create test channel
    const testChannel = await question('\nCreate a test channel? (y/n): ');
    if (testChannel.toLowerCase() === 'y') {
      const channelName = `appr-test-${Date.now().toString(36)}`;
      const result = await client.conversations.create({
        name: channelName,
        is_private: false
      });
      
      console.log(`‚úÖ Test channel created: #${result.channel.name}`);
      
      // Post test message
      await client.chat.postMessage({
        channel: result.channel.id,
        text: 'üéâ Pachacuti Slack integration is working!'
      });
      
      // Archive after confirmation
      const archive = await question('Archive test channel? (y/n): ');
      if (archive.toLowerCase() === 'y') {
        await client.conversations.archive({
          channel: result.channel.id
        });
        console.log('‚úÖ Test channel archived');
      }
    }
    
  } catch (error) {
    console.error('‚ùå Connection test failed:', error.message);
    console.log('\nPlease check your configuration and try again.');
  }
  
  console.log('\nüìù Next steps:');
  console.log('1. Update your ngrok/domain URL in Slack app settings');
  console.log('2. Start the webhook server: npm start');
  console.log('3. Test with: node slack-approval-hook.js');
  
  rl.close();
}

setup().catch(console.error);