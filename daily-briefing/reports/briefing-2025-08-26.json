{
  "date": "2025-08-26",
  "claudeUpdates": {
    "date": "2025-08-26",
    "changes": [
      "Claude Code updated to 1.0.92 (Claude Code)",
      "New agent available: general-purpose",
      "New agent available: coder",
      "New agent available: reviewer",
      "New agent available: tester",
      "New agent available: planner",
      "New agent available: researcher",
      "New agent available: sparc-coord",
      "New agent available: sparc-coder",
      "New agent available: specification",
      "New agent available: pseudocode",
      "New agent available: architecture",
      "New agent available: refinement",
      "New agent available: backend-dev",
      "New agent available: mobile-dev",
      "New agent available: ml-developer",
      "New agent available: api-docs",
      "New agent available: cicd-engineer",
      "New agent available: system-architect",
      "New agent available: code-analyzer",
      "New agent available: base-template-generator",
      "New agent available: production-validator",
      "New agent available: tdd-london-swarm",
      "New agent available: perf-analyzer",
      "New agent available: task-orchestrator",
      "New agent available: memory-coordinator",
      "New agent available: smart-agent",
      "New agent available: pr-manager",
      "New agent available: issue-tracker",
      "New agent available: release-manager",
      "New agent available: github-modes",
      "New agent available: code-review-swarm",
      "New agent available: workflow-automation",
      "New agent available: project-board-sync",
      "New agent available: repo-architect",
      "New agent available: multi-repo-swarm",
      "New agent available: sync-coordinator",
      "New agent available: release-swarm",
      "New agent available: swarm-pr",
      "New agent available: swarm-issue",
      "New agent available: swarm-init",
      "New agent available: hierarchical-coordinator",
      "New agent available: mesh-coordinator",
      "New agent available: adaptive-coordinator",
      "New agent available: byzantine-coordinator",
      "New agent available: raft-manager",
      "New agent available: gossip-coordinator",
      "New agent available: crdt-synchronizer",
      "New agent available: quorum-manager",
      "New agent available: security-manager",
      "New agent available: performance-benchmarker",
      "New agent available: migration-planner",
      "New agent available: statusline-setup",
      "New agent available: output-style-setup",
      "New agent available: refinement",
      "New agent available: pseudocode",
      "New agent available: architecture",
      "New agent available: specification"
    ],
    "newFeatures": [],
    "improvements": [],
    "fixes": []
  },
  "projectAnalysis": {
    "date": "2025-08-26T22:38:19.919Z",
    "projects": [
      {
        "path": "/Users/Danallovertheplace/pachacuti",
        "name": "pachacuti",
        "type": "node",
        "language": "javascript",
        "lastModified": "2025-08-26T18:06:14.000Z",
        "status": "uncommitted-changes",
        "todoCount": 8994,
        "issues": [
          "Has uncommitted changes",
          "8994 TODOs/FIXMEs found"
        ],
        "metrics": {
          "fileCount": 100302,
          "totalLines": 0,
          "testCoverage": "unknown",
          "complexFiles": [
            "shell-viewer/frontend/node_modules/workbox-strategies/src/StrategyHandler.ts",
            "shell-viewer/frontend/node_modules/idb/build/entry.d.ts",
            "shell-viewer/frontend/node_modules/@types/node-forge/index.d.ts",
            "shell-viewer/frontend/node_modules/@types/d3-shape/index.d.ts",
            "shell-viewer/frontend/node_modules/@types/express-serve-static-core/index.d.ts",
            "shell-viewer/frontend/node_modules/@types/d3-array/index.d.ts",
            "shell-viewer/frontend/node_modules/@types/express/node_modules/@types/express-serve-static-core/index.d.ts",
            "shell-viewer/frontend/node_modules/@types/d3-scale/index.d.ts",
            "shell-viewer/frontend/node_modules/@types/prettier/index.d.ts",
            "shell-viewer/frontend/node_modules/@types/d3-color/index.d.ts",
            "shell-viewer/frontend/node_modules/@types/d3-time/index.d.ts",
            "shell-viewer/frontend/node_modules/@types/babel__traverse/index.d.ts",
            "shell-viewer/frontend/node_modules/@types/yargs/index.d.ts",
            "shell-viewer/frontend/node_modules/@types/eslint/rules/best-practices.d.ts",
            "shell-viewer/frontend/node_modules/@types/eslint/rules/stylistic-issues.d.ts",
            "shell-viewer/frontend/node_modules/@types/eslint/rules/ecmascript-6.d.ts",
            "shell-viewer/frontend/node_modules/@types/eslint/rules/possible-errors.d.ts",
            "shell-viewer/frontend/node_modules/@types/eslint/index.d.ts",
            "shell-viewer/frontend/node_modules/@types/estree/index.d.ts",
            "shell-viewer/frontend/node_modules/@types/node/diagnostics_channel.d.ts",
            "shell-viewer/frontend/node_modules/@types/node/tls.d.ts",
            "shell-viewer/frontend/node_modules/@types/node/readline.d.ts",
            "shell-viewer/frontend/node_modules/@types/node/crypto.d.ts",
            "shell-viewer/frontend/node_modules/@types/node/events.d.ts",
            "shell-viewer/frontend/node_modules/@types/node/buffer.d.ts",
            "shell-viewer/frontend/node_modules/@types/node/worker_threads.d.ts",
            "shell-viewer/frontend/node_modules/@types/node/async_hooks.d.ts",
            "shell-viewer/frontend/node_modules/@types/node/stream/web.d.ts",
            "shell-viewer/frontend/node_modules/@types/node/dns.d.ts",
            "shell-viewer/frontend/node_modules/@types/node/vm.d.ts",
            "shell-viewer/frontend/node_modules/@types/node/test.d.ts",
            "shell-viewer/frontend/node_modules/@types/node/http.d.ts",
            "shell-viewer/frontend/node_modules/@types/node/http2.d.ts",
            "shell-viewer/frontend/node_modules/@types/node/stream.d.ts",
            "shell-viewer/frontend/node_modules/@types/node/inspector.d.ts",
            "shell-viewer/frontend/node_modules/@types/node/v8.d.ts",
            "shell-viewer/frontend/node_modules/@types/node/perf_hooks.d.ts",
            "shell-viewer/frontend/node_modules/@types/node/url.d.ts",
            "shell-viewer/frontend/node_modules/@types/node/cluster.d.ts",
            "shell-viewer/frontend/node_modules/@types/node/https.d.ts",
            "shell-viewer/frontend/node_modules/@types/node/assert.d.ts",
            "shell-viewer/frontend/node_modules/@types/node/fs.d.ts",
            "shell-viewer/frontend/node_modules/@types/node/dgram.d.ts",
            "shell-viewer/frontend/node_modules/@types/node/child_process.d.ts",
            "shell-viewer/frontend/node_modules/@types/node/zlib.d.ts",
            "shell-viewer/frontend/node_modules/@types/node/module.d.ts",
            "shell-viewer/frontend/node_modules/@types/node/sqlite.d.ts",
            "shell-viewer/frontend/node_modules/@types/node/process.d.ts",
            "shell-viewer/frontend/node_modules/@types/node/util.d.ts",
            "shell-viewer/frontend/node_modules/@types/node/dns/promises.d.ts",
            "shell-viewer/frontend/node_modules/@types/node/fs/promises.d.ts",
            "shell-viewer/frontend/node_modules/@types/node/net.d.ts",
            "shell-viewer/frontend/node_modules/@types/babel__core/index.d.ts",
            "shell-viewer/frontend/node_modules/@types/react/ts5.0/index.d.ts",
            "shell-viewer/frontend/node_modules/@types/react/index.d.ts",
            "shell-viewer/frontend/node_modules/@types/q/index.d.ts",
            "shell-viewer/frontend/node_modules/@types/json-schema/index.d.ts",
            "shell-viewer/frontend/node_modules/csstype/index.d.ts",
            "shell-viewer/frontend/node_modules/tempy/node_modules/type-fest/source/package-json.d.ts",
            "shell-viewer/frontend/node_modules/tempy/node_modules/type-fest/source/tsconfig-json.d.ts",
            "shell-viewer/frontend/node_modules/type-fest/source/package-json.d.ts",
            "shell-viewer/frontend/node_modules/type-fest/source/tsconfig-json.d.ts",
            "shell-viewer/frontend/node_modules/commander/typings/index.d.ts",
            "shell-viewer/frontend/node_modules/xterm/typings/xterm.d.ts",
            "shell-viewer/frontend/node_modules/xterm/src/browser/renderer/shared/TextureAtlas.ts",
            "shell-viewer/frontend/node_modules/xterm/src/browser/renderer/shared/CustomGlyphs.ts",
            "shell-viewer/frontend/node_modules/xterm/src/browser/renderer/dom/DomRendererRowFactory.ts",
            "shell-viewer/frontend/node_modules/xterm/src/browser/renderer/dom/DomRenderer.ts",
            "shell-viewer/frontend/node_modules/xterm/src/browser/Terminal.ts",
            "shell-viewer/frontend/node_modules/xterm/src/browser/services/SelectionService.ts",
            "shell-viewer/frontend/node_modules/xterm/src/common/InputHandler.ts",
            "shell-viewer/frontend/node_modules/xterm/src/common/Types.d.ts",
            "shell-viewer/frontend/node_modules/xterm/src/common/parser/EscapeSequenceParser.ts",
            "shell-viewer/frontend/node_modules/xterm/src/common/buffer/Buffer.ts",
            "shell-viewer/frontend/node_modules/xterm/src/common/buffer/BufferLine.ts",
            "shell-viewer/frontend/node_modules/decimal.js-light/decimal.d.ts",
            "shell-viewer/frontend/node_modules/acorn/dist/acorn.d.ts",
            "shell-viewer/frontend/node_modules/axe-core/axe.d.ts",
            "shell-viewer/frontend/node_modules/typescript/lib/lib.es2015.core.d.ts",
            "shell-viewer/frontend/node_modules/typescript/lib/lib.es5.d.ts",
            "shell-viewer/frontend/node_modules/typescript/lib/typescriptServices.d.ts",
            "shell-viewer/frontend/node_modules/typescript/lib/lib.dom.d.ts",
            "shell-viewer/frontend/node_modules/typescript/lib/lib.es2020.bigint.d.ts",
            "shell-viewer/frontend/node_modules/typescript/lib/protocol.d.ts",
            "shell-viewer/frontend/node_modules/typescript/lib/lib.webworker.d.ts",
            "shell-viewer/frontend/node_modules/typescript/lib/tsserverlibrary.d.ts",
            "shell-viewer/frontend/node_modules/typescript/lib/typescript.d.ts",
            "shell-viewer/frontend/node_modules/socket.io-client/build/esm-debug/socket.d.ts",
            "shell-viewer/frontend/node_modules/socket.io-client/build/esm/socket.d.ts",
            "shell-viewer/frontend/node_modules/socket.io-client/build/cjs/socket.d.ts",
            "shell-viewer/frontend/node_modules/date-fns/typings.d.ts",
            "shell-viewer/frontend/node_modules/postcss/lib/node.d.ts",
            "shell-viewer/frontend/node_modules/@rollup/pluginutils/node_modules/@types/estree/index.d.ts",
            "shell-viewer/frontend/node_modules/@typescript-eslint/types/dist/generated/ast-spec.d.ts",
            "shell-viewer/frontend/node_modules/@typescript-eslint/types/_ts3.4/dist/generated/ast-spec.d.ts",
            "shell-viewer/frontend/node_modules/@typescript-eslint/utils/dist/ast-utils/helpers.d.ts",
            "shell-viewer/frontend/node_modules/@typescript-eslint/utils/_ts3.4/dist/ast-utils/helpers.d.ts",
            "shell-viewer/frontend/node_modules/@remix-run/router/history.ts",
            "shell-viewer/frontend/node_modules/@remix-run/router/router.ts",
            "shell-viewer/frontend/node_modules/@remix-run/router/dist/utils.d.ts",
            "shell-viewer/frontend/node_modules/@remix-run/router/dist/router.d.ts",
            "shell-viewer/frontend/node_modules/@remix-run/router/utils.ts",
            "shell-viewer/frontend/node_modules/big-integer/BigInteger.d.ts",
            "shell-viewer/frontend/node_modules/xterm-addon-search/src/SearchAddon.ts",
            "shell-viewer/frontend/node_modules/enhanced-resolve/types.d.ts",
            "shell-viewer/frontend/node_modules/postcss-modules-local-by-default/node_modules/postcss-selector-parser/postcss-selector-parser.d.ts",
            "shell-viewer/frontend/node_modules/saxes/saxes.d.ts",
            "shell-viewer/frontend/node_modules/postcss-svgo/node_modules/commander/typings/index.d.ts",
            "total",
            "shell-viewer/frontend/node_modules/@mui/icons-material/index.d.ts",
            "total",
            "shell-viewer/frontend/node_modules/@mui/material/styles/components.d.ts",
            "shell-viewer/frontend/node_modules/webpack/types.d.ts",
            "shell-viewer/frontend/node_modules/resolve-url-loader/node_modules/postcss/lib/postcss.d.ts",
            "shell-viewer/frontend/node_modules/workbox-build/build/types.d.ts",
            "shell-viewer/frontend/node_modules/workbox-build/src/types.ts",
            "shell-viewer/frontend/node_modules/webpack-dev-server/types/bin/cli-flags.d.ts",
            "shell-viewer/frontend/node_modules/webpack-dev-server/types/lib/Server.d.ts",
            "shell-viewer/frontend/node_modules/postcss-modules-scope/node_modules/postcss-selector-parser/postcss-selector-parser.d.ts",
            "shell-viewer/frontend/node_modules/@babel/types/lib/index-legacy.d.ts",
            "shell-viewer/frontend/node_modules/@babel/types/lib/index.d.ts",
            "shell-viewer/frontend/node_modules/postcss-selector-parser/postcss-selector-parser.d.ts",
            "shell-viewer/frontend/node_modules/rollup/dist/rollup.d.ts",
            "shell-viewer/frontend/node_modules/ansi-escapes/node_modules/type-fest/source/package-json.d.ts",
            "shell-viewer/frontend/node_modules/ansi-escapes/node_modules/type-fest/source/tsconfig-json.d.ts",
            "shell-viewer/frontend/node_modules/minipass/dist/esm/index.d.ts",
            "shell-viewer/frontend/node_modules/minipass/dist/commonjs/index.d.ts",
            "shell-viewer/frontend/node_modules/execa/index.d.ts",
            "shell-viewer/frontend/node_modules/@jridgewell/trace-mapping/src/trace-mapping.ts",
            "shell-viewer/frontend/node_modules/@jridgewell/gen-mapping/src/gen-mapping.ts",
            "shell-viewer/frontend/node_modules/workbox-window/src/Workbox.ts",
            "shell-viewer/frontend/node_modules/recharts/types/util/types.d.ts",
            "shell-viewer/frontend/node_modules/axios/index.d.ts",
            "shell-viewer/frontend/node_modules/monaco-editor/monaco.d.ts",
            "shell-viewer/frontend/node_modules/monaco-editor/esm/vs/editor/editor.api.d.ts",
            "shell-viewer/frontend/node_modules/ajv/lib/core.ts",
            "shell-viewer/frontend/node_modules/ajv/lib/compile/validate/index.ts",
            "shell-viewer/frontend/node_modules/ajv/lib/compile/codegen/index.ts",
            "shell-viewer/frontend/node_modules/@eslint-community/regexpp/index.d.ts",
            "shell-viewer/frontend/node_modules/jest-watch-typeahead/node_modules/@types/yargs/index.d.ts",
            "shell-viewer/frontend/node_modules/jest-watch-typeahead/node_modules/@jest/types/build/index.d.ts",
            "shell-viewer/frontend/node_modules/jest-watch-typeahead/node_modules/emittery/index.d.ts",
            "shell-viewer/frontend/node_modules/path-scurry/dist/esm/index.d.ts",
            "shell-viewer/frontend/node_modules/path-scurry/dist/commonjs/index.d.ts",
            "shell-viewer/frontend/node_modules/path-scurry/node_modules/lru-cache/dist/esm/index.d.ts",
            "shell-viewer/frontend/node_modules/path-scurry/node_modules/lru-cache/dist/commonjs/index.d.ts",
            "shell-viewer/backend/node_modules/@types/babel__traverse/index.d.ts",
            "shell-viewer/backend/node_modules/@types/yargs/index.d.ts",
            "shell-viewer/backend/node_modules/@types/node/diagnostics_channel.d.ts",
            "shell-viewer/backend/node_modules/@types/node/tls.d.ts",
            "shell-viewer/backend/node_modules/@types/node/readline.d.ts",
            "shell-viewer/backend/node_modules/@types/node/crypto.d.ts",
            "shell-viewer/backend/node_modules/@types/node/events.d.ts",
            "shell-viewer/backend/node_modules/@types/node/buffer.d.ts",
            "shell-viewer/backend/node_modules/@types/node/worker_threads.d.ts",
            "shell-viewer/backend/node_modules/@types/node/async_hooks.d.ts",
            "shell-viewer/backend/node_modules/@types/node/stream/web.d.ts",
            "shell-viewer/backend/node_modules/@types/node/dns.d.ts",
            "shell-viewer/backend/node_modules/@types/node/vm.d.ts",
            "shell-viewer/backend/node_modules/@types/node/test.d.ts",
            "shell-viewer/backend/node_modules/@types/node/http.d.ts",
            "shell-viewer/backend/node_modules/@types/node/http2.d.ts",
            "shell-viewer/backend/node_modules/@types/node/stream.d.ts",
            "shell-viewer/backend/node_modules/@types/node/inspector.d.ts",
            "shell-viewer/backend/node_modules/@types/node/v8.d.ts",
            "shell-viewer/backend/node_modules/@types/node/perf_hooks.d.ts",
            "shell-viewer/backend/node_modules/@types/node/url.d.ts",
            "shell-viewer/backend/node_modules/@types/node/cluster.d.ts",
            "shell-viewer/backend/node_modules/@types/node/https.d.ts",
            "shell-viewer/backend/node_modules/@types/node/assert.d.ts",
            "shell-viewer/backend/node_modules/@types/node/fs.d.ts",
            "shell-viewer/backend/node_modules/@types/node/dgram.d.ts",
            "shell-viewer/backend/node_modules/@types/node/child_process.d.ts",
            "shell-viewer/backend/node_modules/@types/node/zlib.d.ts",
            "shell-viewer/backend/node_modules/@types/node/module.d.ts",
            "shell-viewer/backend/node_modules/@types/node/sqlite.d.ts",
            "shell-viewer/backend/node_modules/@types/node/process.d.ts",
            "shell-viewer/backend/node_modules/@types/node/util.d.ts",
            "shell-viewer/backend/node_modules/@types/node/dns/promises.d.ts",
            "shell-viewer/backend/node_modules/@types/node/fs/promises.d.ts",
            "shell-viewer/backend/node_modules/@types/node/net.d.ts",
            "shell-viewer/backend/node_modules/@types/babel__core/index.d.ts",
            "shell-viewer/backend/node_modules/web-streams-polyfill/types/ponyfill.d.ts",
            "shell-viewer/backend/node_modules/@jest/types/build/index.d.ts",
            "shell-viewer/backend/node_modules/type-fest/source/package-json.d.ts",
            "shell-viewer/backend/node_modules/type-fest/source/tsconfig-json.d.ts",
            "shell-viewer/backend/node_modules/ip-address/src/ipv6.ts",
            "shell-viewer/backend/node_modules/moment/moment.d.ts",
            "shell-viewer/backend/node_modules/moment/ts3.1-typings/moment.d.ts",
            "shell-viewer/backend/node_modules/emittery/index.d.ts",
            "shell-viewer/backend/node_modules/smart-buffer/typings/smartbuffer.d.ts",
            "shell-viewer/backend/node_modules/fecha/src/fecha.ts",
            "shell-viewer/backend/node_modules/socket.io/dist/socket.d.ts",
            "shell-viewer/backend/node_modules/socket.io/dist/index.d.ts",
            "shell-viewer/backend/node_modules/@sinclair/typebox/typebox.d.ts",
            "shell-viewer/backend/node_modules/@babel/types/lib/index-legacy.d.ts",
            "shell-viewer/backend/node_modules/@babel/types/lib/index.d.ts",
            "shell-viewer/backend/node_modules/@supabase/auth-js/dist/module/GoTrueClient.d.ts",
            "shell-viewer/backend/node_modules/@supabase/auth-js/dist/module/lib/types.d.ts",
            "shell-viewer/backend/node_modules/@supabase/auth-js/dist/main/GoTrueClient.d.ts",
            "shell-viewer/backend/node_modules/@supabase/auth-js/dist/main/lib/types.d.ts",
            "shell-viewer/backend/node_modules/@supabase/auth-js/src/lib/types.ts",
            "shell-viewer/backend/node_modules/@supabase/auth-js/src/GoTrueClient.ts",
            "shell-viewer/backend/node_modules/@supabase/realtime-js/src/RealtimeClient.ts",
            "shell-viewer/backend/node_modules/@supabase/realtime-js/src/RealtimeChannel.ts",
            "shell-viewer/backend/node_modules/@supabase/storage-js/src/packages/StorageFileApi.ts",
            "shell-viewer/backend/node_modules/@supabase/postgrest-js/src/PostgrestFilterBuilder.ts",
            "shell-viewer/backend/node_modules/@supabase/postgrest-js/src/select-query-parser/utils.ts",
            "shell-viewer/backend/node_modules/@supabase/postgrest-js/src/select-query-parser/result.ts",
            "shell-viewer/backend/node_modules/execa/index.d.ts",
            "shell-viewer/backend/node_modules/@jridgewell/trace-mapping/src/trace-mapping.ts",
            "shell-viewer/backend/node_modules/@jridgewell/gen-mapping/src/gen-mapping.ts",
            "shell-viewer/backend/node_modules/openai/resources/beta/realtime/realtime.d.ts",
            "shell-viewer/backend/node_modules/openai/resources/beta/realtime/sessions.d.ts",
            "shell-viewer/backend/node_modules/openai/resources/beta/threads/messages.d.ts",
            "shell-viewer/backend/node_modules/openai/resources/beta/threads/threads.d.ts",
            "shell-viewer/backend/node_modules/openai/resources/beta/threads/runs/steps.d.ts",
            "shell-viewer/backend/node_modules/openai/resources/beta/threads/runs/runs.d.ts",
            "shell-viewer/backend/node_modules/openai/resources/beta/assistants.d.ts",
            "shell-viewer/backend/node_modules/openai/resources/evals/evals.d.ts",
            "shell-viewer/backend/node_modules/openai/resources/evals/runs/runs.d.ts",
            "total",
            "shell-viewer/backend/node_modules/openai/resources/chat/completions/completions.d.ts",
            "shell-viewer/backend/node_modules/openai/resources/responses/responses.d.ts",
            "shell-viewer/backend/node_modules/openai/resources/fine-tuning/jobs/jobs.d.ts",
            "shell-viewer/backend/node_modules/openai/node_modules/@types/node/diagnostics_channel.d.ts",
            "shell-viewer/backend/node_modules/openai/node_modules/@types/node/tls.d.ts",
            "shell-viewer/backend/node_modules/openai/node_modules/@types/node/readline.d.ts",
            "shell-viewer/backend/node_modules/openai/node_modules/@types/node/crypto.d.ts",
            "shell-viewer/backend/node_modules/openai/node_modules/@types/node/events.d.ts",
            "shell-viewer/backend/node_modules/openai/node_modules/@types/node/buffer.d.ts",
            "shell-viewer/backend/node_modules/openai/node_modules/@types/node/worker_threads.d.ts",
            "shell-viewer/backend/node_modules/openai/node_modules/@types/node/async_hooks.d.ts",
            "shell-viewer/backend/node_modules/openai/node_modules/@types/node/stream/web.d.ts",
            "shell-viewer/backend/node_modules/openai/node_modules/@types/node/dns.d.ts",
            "shell-viewer/backend/node_modules/openai/node_modules/@types/node/vm.d.ts",
            "shell-viewer/backend/node_modules/openai/node_modules/@types/node/test.d.ts",
            "shell-viewer/backend/node_modules/openai/node_modules/@types/node/http.d.ts",
            "shell-viewer/backend/node_modules/openai/node_modules/@types/node/http2.d.ts",
            "shell-viewer/backend/node_modules/openai/node_modules/@types/node/stream.d.ts",
            "shell-viewer/backend/node_modules/openai/node_modules/@types/node/inspector.d.ts",
            "shell-viewer/backend/node_modules/openai/node_modules/@types/node/v8.d.ts",
            "shell-viewer/backend/node_modules/openai/node_modules/@types/node/perf_hooks.d.ts",
            "shell-viewer/backend/node_modules/openai/node_modules/@types/node/url.d.ts",
            "shell-viewer/backend/node_modules/openai/node_modules/@types/node/cluster.d.ts",
            "shell-viewer/backend/node_modules/openai/node_modules/@types/node/https.d.ts",
            "shell-viewer/backend/node_modules/openai/node_modules/@types/node/assert.d.ts",
            "shell-viewer/backend/node_modules/openai/node_modules/@types/node/fs.d.ts",
            "shell-viewer/backend/node_modules/openai/node_modules/@types/node/dgram.d.ts",
            "shell-viewer/backend/node_modules/openai/node_modules/@types/node/child_process.d.ts",
            "shell-viewer/backend/node_modules/openai/node_modules/@types/node/zlib.d.ts",
            "shell-viewer/backend/node_modules/openai/node_modules/@types/node/module.d.ts",
            "shell-viewer/backend/node_modules/openai/node_modules/@types/node/process.d.ts",
            "shell-viewer/backend/node_modules/openai/node_modules/@types/node/util.d.ts",
            "shell-viewer/backend/node_modules/openai/node_modules/@types/node/fs/promises.d.ts",
            "shell-viewer/backend/node_modules/openai/node_modules/@types/node/net.d.ts",
            "shell-viewer/backend/node_modules/openai/src/resources/beta/realtime/realtime.ts",
            "shell-viewer/backend/node_modules/openai/src/resources/beta/realtime/sessions.ts",
            "shell-viewer/backend/node_modules/openai/src/resources/beta/threads/messages.ts",
            "shell-viewer/backend/node_modules/openai/src/resources/beta/threads/threads.ts",
            "shell-viewer/backend/node_modules/openai/src/resources/beta/threads/runs/runs.ts",
            "shell-viewer/backend/node_modules/openai/src/resources/beta/threads/runs/steps.ts",
            "shell-viewer/backend/node_modules/openai/src/resources/beta/assistants.ts",
            "shell-viewer/backend/node_modules/openai/src/resources/evals/evals.ts",
            "shell-viewer/backend/node_modules/openai/src/resources/evals/runs/runs.ts",
            "shell-viewer/backend/node_modules/openai/src/resources/chat/completions/completions.ts",
            "shell-viewer/backend/node_modules/openai/src/resources/responses/responses.ts",
            "shell-viewer/backend/node_modules/openai/src/resources/fine-tuning/jobs/jobs.ts",
            "shell-viewer/backend/node_modules/openai/src/resources/vector-stores/vector-stores.ts",
            "shell-viewer/backend/node_modules/openai/src/core.ts",
            "shell-viewer/backend/node_modules/openai/src/lib/AbstractChatCompletionRunner.ts",
            "shell-viewer/backend/node_modules/openai/src/lib/AssistantStream.ts",
            "shell-viewer/backend/node_modules/openai/src/lib/ChatCompletionStream.ts",
            "shell-viewer/backend/node_modules/openai/src/index.ts",
            "node_modules/zod/v4/core/schemas.d.ts",
            "node_modules/zod/v4/classic/schemas.d.ts",
            "node_modules/zod/v3/types.d.ts",
            "node_modules/zod/src/v4/core/schemas.ts",
            "node_modules/zod/src/v4/core/api.ts",
            "node_modules/zod/src/v4/core/to-json-schema.ts",
            "node_modules/zod/src/v4/core/checks.ts",
            "node_modules/zod/src/v4/core/util.ts",
            "node_modules/zod/src/v4/mini/tests/index.test.ts",
            "node_modules/zod/src/v4/mini/schemas.ts",
            "node_modules/zod/src/v4/classic/tests/template-literal.test.ts",
            "node_modules/zod/src/v4/classic/tests/index.test.ts",
            "node_modules/zod/src/v4/classic/tests/error-utils.test.ts",
            "node_modules/zod/src/v4/classic/tests/string.test.ts",
            "node_modules/zod/src/v4/classic/tests/discriminated-unions.test.ts",
            "node_modules/zod/src/v4/classic/tests/to-json-schema.test.ts",
            "node_modules/zod/src/v4/classic/tests/refine.test.ts",
            "node_modules/zod/src/v4/classic/tests/error.test.ts",
            "node_modules/zod/src/v4/classic/tests/object.test.ts",
            "node_modules/zod/src/v4/classic/schemas.ts",
            "node_modules/zod/src/v3/tests/string.test.ts",
            "node_modules/zod/src/v3/tests/error.test.ts",
            "node_modules/zod/src/v3/types.ts",
            "node_modules/@types/node/diagnostics_channel.d.ts",
            "node_modules/@types/node/tls.d.ts",
            "node_modules/@types/node/readline.d.ts",
            "node_modules/@types/node/crypto.d.ts",
            "node_modules/@types/node/events.d.ts",
            "node_modules/@types/node/buffer.d.ts",
            "node_modules/@types/node/worker_threads.d.ts",
            "node_modules/@types/node/async_hooks.d.ts",
            "node_modules/@types/node/stream/web.d.ts",
            "node_modules/@types/node/dns.d.ts",
            "node_modules/@types/node/vm.d.ts",
            "node_modules/@types/node/test.d.ts",
            "node_modules/@types/node/http.d.ts",
            "node_modules/@types/node/http2.d.ts",
            "node_modules/@types/node/stream.d.ts",
            "node_modules/@types/node/inspector.d.ts",
            "node_modules/@types/node/v8.d.ts",
            "node_modules/@types/node/perf_hooks.d.ts",
            "node_modules/@types/node/url.d.ts",
            "node_modules/@types/node/cluster.d.ts",
            "node_modules/@types/node/https.d.ts",
            "node_modules/@types/node/assert.d.ts",
            "node_modules/@types/node/fs.d.ts",
            "node_modules/@types/node/dgram.d.ts",
            "node_modules/@types/node/child_process.d.ts",
            "node_modules/@types/node/zlib.d.ts",
            "node_modules/@types/node/module.d.ts",
            "node_modules/@types/node/sqlite.d.ts",
            "node_modules/@types/node/process.d.ts",
            "node_modules/@types/node/util.d.ts",
            "node_modules/@types/node/dns/promises.d.ts",
            "node_modules/@types/node/fs/promises.d.ts",
            "node_modules/@types/node/net.d.ts",
            "node_modules/lru-cache/index.d.ts",
            "node_modules/ip-address/src/ipv6.ts",
            "node_modules/puppeteer/lib/types.d.ts",
            "node_modules/ast-types/gen/builders.d.ts",
            "node_modules/ast-types/gen/namedTypes.d.ts",
            "node_modules/smart-buffer/typings/smartbuffer.d.ts",
            "node_modules/devtools-protocol/types/protocol-mapping.d.ts",
            "node_modules/devtools-protocol/types/protocol-tests-proxy-api.d.ts",
            "node_modules/devtools-protocol/types/protocol.d.ts",
            "node_modules/devtools-protocol/types/protocol-proxy-api.d.ts",
            "node_modules/bare-fs/index.d.ts",
            "node_modules/chromium-bidi/lib/esm/protocol/generated/webdriver-bidi.d.ts",
            "node_modules/chromium-bidi/lib/esm/protocol-parser/generated/webdriver-bidi.d.ts",
            "node_modules/chromium-bidi/lib/esm/protocol-parser/generated/webdriver-bidi-bluetooth.d.ts",
            "node_modules/chromium-bidi/lib/cjs/protocol/generated/webdriver-bidi.d.ts",
            "node_modules/chromium-bidi/lib/cjs/protocol-parser/generated/webdriver-bidi.d.ts",
            "node_modules/chromium-bidi/lib/cjs/protocol-parser/generated/webdriver-bidi-bluetooth.d.ts",
            "node_modules/puppeteer-core/lib/esm/puppeteer/api/ElementHandle.d.ts",
            "node_modules/puppeteer-core/lib/esm/puppeteer/api/Frame.d.ts",
            "node_modules/puppeteer-core/lib/esm/puppeteer/api/Page.d.ts",
            "node_modules/puppeteer-core/lib/types.d.ts",
            "node_modules/puppeteer-core/lib/es5-iife/puppeteer-core-browser.d.ts",
            "node_modules/puppeteer-core/lib/cjs/puppeteer/api/ElementHandle.d.ts",
            "node_modules/puppeteer-core/lib/cjs/puppeteer/api/Frame.d.ts",
            "node_modules/puppeteer-core/lib/cjs/puppeteer/api/Page.d.ts",
            "node_modules/puppeteer-core/src/cdp/EmulationManager.ts",
            "node_modules/puppeteer-core/src/cdp/ExecutionContext.ts",
            "node_modules/puppeteer-core/src/cdp/FrameManager.ts",
            "node_modules/puppeteer-core/src/cdp/Accessibility.ts",
            "node_modules/puppeteer-core/src/cdp/NetworkManager.ts",
            "node_modules/puppeteer-core/src/cdp/Input.ts",
            "node_modules/puppeteer-core/src/cdp/Page.ts",
            "node_modules/puppeteer-core/src/cdp/Coverage.ts",
            "node_modules/puppeteer-core/src/bidi/core/BrowsingContext.ts",
            "node_modules/puppeteer-core/src/bidi/Frame.ts",
            "node_modules/puppeteer-core/src/bidi/Input.ts",
            "node_modules/puppeteer-core/src/bidi/Page.ts",
            "node_modules/puppeteer-core/src/common/USKeyboardLayout.ts",
            "node_modules/puppeteer-core/src/common/Device.ts",
            "node_modules/puppeteer-core/src/api/HTTPRequest.ts",
            "node_modules/puppeteer-core/src/api/Frame.ts",
            "node_modules/puppeteer-core/src/api/Input.ts",
            "node_modules/puppeteer-core/src/api/locators/locators.ts",
            "node_modules/puppeteer-core/src/api/Browser.ts",
            "node_modules/puppeteer-core/src/api/Page.ts",
            "node_modules/puppeteer-core/src/api/ElementHandle.ts",
            "node_modules/puppeteer-core/src/node/BrowserLauncher.ts",
            "node_modules/@puppeteer/browsers/src/install.ts",
            "node_modules/@puppeteer/browsers/src/CLI.ts",
            "node_modules/@puppeteer/browsers/src/launch.ts",
            "tests/node_modules/zod/v4/core/schemas.d.ts",
            "tests/node_modules/zod/v4/classic/schemas.d.ts",
            "tests/node_modules/zod/v3/types.d.ts",
            "tests/node_modules/zod/src/v4/core/schemas.ts",
            "tests/node_modules/zod/src/v4/core/api.ts",
            "tests/node_modules/zod/src/v4/core/to-json-schema.ts",
            "tests/node_modules/zod/src/v4/core/checks.ts",
            "tests/node_modules/zod/src/v4/core/util.ts",
            "tests/node_modules/zod/src/v4/mini/tests/index.test.ts",
            "tests/node_modules/zod/src/v4/mini/schemas.ts",
            "tests/node_modules/zod/src/v4/classic/tests/template-literal.test.ts",
            "tests/node_modules/zod/src/v4/classic/tests/index.test.ts",
            "tests/node_modules/zod/src/v4/classic/tests/error-utils.test.ts",
            "tests/node_modules/zod/src/v4/classic/tests/string.test.ts",
            "tests/node_modules/zod/src/v4/classic/tests/discriminated-unions.test.ts",
            "tests/node_modules/zod/src/v4/classic/tests/to-json-schema.test.ts",
            "tests/node_modules/zod/src/v4/classic/tests/refine.test.ts",
            "tests/node_modules/zod/src/v4/classic/tests/error.test.ts",
            "tests/node_modules/zod/src/v4/classic/tests/object.test.ts",
            "tests/node_modules/zod/src/v4/classic/schemas.ts",
            "tests/node_modules/zod/src/v3/tests/string.test.ts",
            "tests/node_modules/zod/src/v3/tests/error.test.ts",
            "tests/node_modules/zod/src/v3/types.ts",
            "tests/node_modules/@types/node/diagnostics_channel.d.ts",
            "tests/node_modules/@types/node/tls.d.ts",
            "tests/node_modules/@types/node/readline.d.ts",
            "tests/node_modules/@types/node/crypto.d.ts",
            "tests/node_modules/@types/node/events.d.ts",
            "tests/node_modules/@types/node/buffer.d.ts",
            "tests/node_modules/@types/node/worker_threads.d.ts",
            "tests/node_modules/@types/node/async_hooks.d.ts",
            "tests/node_modules/@types/node/stream/web.d.ts",
            "tests/node_modules/@types/node/dns.d.ts",
            "tests/node_modules/@types/node/vm.d.ts",
            "tests/node_modules/@types/node/test.d.ts",
            "tests/node_modules/@types/node/http.d.ts",
            "tests/node_modules/@types/node/http2.d.ts",
            "tests/node_modules/@types/node/stream.d.ts",
            "tests/node_modules/@types/node/inspector.d.ts",
            "tests/node_modules/@types/node/v8.d.ts",
            "tests/node_modules/@types/node/perf_hooks.d.ts",
            "tests/node_modules/@types/node/url.d.ts",
            "tests/node_modules/@types/node/cluster.d.ts",
            "tests/node_modules/@types/node/https.d.ts",
            "tests/node_modules/@types/node/assert.d.ts",
            "tests/node_modules/@types/node/fs.d.ts",
            "tests/node_modules/@types/node/dgram.d.ts",
            "tests/node_modules/@types/node/child_process.d.ts",
            "tests/node_modules/@types/node/zlib.d.ts",
            "tests/node_modules/@types/node/module.d.ts",
            "tests/node_modules/@types/node/sqlite.d.ts",
            "tests/node_modules/@types/node/process.d.ts",
            "tests/node_modules/@types/node/util.d.ts",
            "tests/node_modules/@types/node/dns/promises.d.ts",
            "tests/node_modules/@types/node/fs/promises.d.ts",
            "tests/node_modules/@types/node/net.d.ts",
            "tests/node_modules/lru-cache/index.d.ts",
            "tests/node_modules/ip-address/src/ipv6.ts",
            "tests/node_modules/puppeteer/lib/types.d.ts",
            "tests/node_modules/ast-types/gen/builders.d.ts",
            "tests/node_modules/ast-types/gen/namedTypes.d.ts",
            "tests/node_modules/smart-buffer/typings/smartbuffer.d.ts",
            "tests/node_modules/devtools-protocol/types/protocol-mapping.d.ts",
            "tests/node_modules/devtools-protocol/types/protocol-tests-proxy-api.d.ts",
            "tests/node_modules/devtools-protocol/types/protocol.d.ts",
            "tests/node_modules/devtools-protocol/types/protocol-proxy-api.d.ts",
            "tests/node_modules/bare-fs/index.d.ts",
            "tests/node_modules/chromium-bidi/lib/esm/protocol/generated/webdriver-bidi.d.ts",
            "tests/node_modules/chromium-bidi/lib/esm/protocol-parser/generated/webdriver-bidi.d.ts",
            "tests/node_modules/chromium-bidi/lib/esm/protocol-parser/generated/webdriver-bidi-bluetooth.d.ts",
            "tests/node_modules/chromium-bidi/lib/cjs/protocol/generated/webdriver-bidi.d.ts",
            "tests/node_modules/chromium-bidi/lib/cjs/protocol-parser/generated/webdriver-bidi.d.ts",
            "tests/node_modules/chromium-bidi/lib/cjs/protocol-parser/generated/webdriver-bidi-bluetooth.d.ts",
            "tests/node_modules/puppeteer-core/lib/esm/puppeteer/api/ElementHandle.d.ts",
            "tests/node_modules/puppeteer-core/lib/esm/puppeteer/api/Frame.d.ts",
            "tests/node_modules/puppeteer-core/lib/esm/puppeteer/api/Page.d.ts",
            "tests/node_modules/puppeteer-core/lib/types.d.ts",
            "tests/node_modules/puppeteer-core/lib/es5-iife/puppeteer-core-browser.d.ts",
            "tests/node_modules/puppeteer-core/lib/cjs/puppeteer/api/ElementHandle.d.ts",
            "tests/node_modules/puppeteer-core/lib/cjs/puppeteer/api/Frame.d.ts",
            "tests/node_modules/puppeteer-core/lib/cjs/puppeteer/api/Page.d.ts",
            "tests/node_modules/puppeteer-core/src/cdp/EmulationManager.ts",
            "tests/node_modules/puppeteer-core/src/cdp/ExecutionContext.ts",
            "tests/node_modules/puppeteer-core/src/cdp/FrameManager.ts",
            "tests/node_modules/puppeteer-core/src/cdp/Accessibility.ts",
            "tests/node_modules/puppeteer-core/src/cdp/NetworkManager.ts",
            "tests/node_modules/puppeteer-core/src/cdp/Input.ts",
            "tests/node_modules/puppeteer-core/src/cdp/Page.ts",
            "tests/node_modules/puppeteer-core/src/cdp/Coverage.ts",
            "tests/node_modules/puppeteer-core/src/bidi/core/BrowsingContext.ts",
            "tests/node_modules/puppeteer-core/src/bidi/Frame.ts",
            "tests/node_modules/puppeteer-core/src/bidi/Input.ts",
            "tests/node_modules/puppeteer-core/src/bidi/Page.ts",
            "tests/node_modules/puppeteer-core/src/common/USKeyboardLayout.ts",
            "tests/node_modules/puppeteer-core/src/common/Device.ts",
            "tests/node_modules/puppeteer-core/src/api/HTTPRequest.ts",
            "tests/node_modules/puppeteer-core/src/api/Frame.ts",
            "tests/node_modules/puppeteer-core/src/api/Input.ts",
            "tests/node_modules/puppeteer-core/src/api/locators/locators.ts",
            "tests/node_modules/puppeteer-core/src/api/Browser.ts",
            "tests/node_modules/puppeteer-core/src/api/Page.ts",
            "tests/node_modules/puppeteer-core/src/api/ElementHandle.ts",
            "tests/node_modules/puppeteer-core/src/node/BrowserLauncher.ts",
            "tests/node_modules/@puppeteer/browsers/src/install.ts",
            "tests/node_modules/@puppeteer/browsers/src/CLI.ts",
            "tests/node_modules/@puppeteer/browsers/src/launch.ts",
            "lib/slack-integration/node_modules/@types/lodash/fp.d.ts",
            "lib/slack-integration/node_modules/@types/lodash/common/function.d.ts",
            "lib/slack-integration/node_modules/@types/lodash/common/array.d.ts",
            "lib/slack-integration/node_modules/@types/lodash/common/string.d.ts",
            "lib/slack-integration/node_modules/@types/lodash/common/object.d.ts",
            "lib/slack-integration/node_modules/@types/lodash/common/lang.d.ts",
            "lib/slack-integration/node_modules/@types/lodash/common/collection.d.ts",
            "lib/slack-integration/node_modules/@types/lodash/common/util.d.ts",
            "lib/slack-integration/node_modules/@types/express-serve-static-core/index.d.ts",
            "lib/slack-integration/node_modules/@types/yargs/index.d.ts",
            "lib/slack-integration/node_modules/@types/node/globals.d.ts",
            "lib/slack-integration/node_modules/@types/node/tls.d.ts",
            "lib/slack-integration/node_modules/@types/node/crypto.d.ts",
            "lib/slack-integration/node_modules/@types/node/http2.d.ts",
            "lib/slack-integration/node_modules/@types/node/inspector.d.ts",
            "lib/slack-integration/node_modules/@types/node/fs.d.ts",
            "lib/slack-integration/node_modules/@types/node/child_process.d.ts",
            "lib/slack-integration/node_modules/fecha/src/fecha.ts",
            "lib/slack-integration/node_modules/axios/index.d.ts",
            "lib/slack-integration/node_modules/@slack/types/dist/block-kit/block-elements.d.ts",
            "lib/slack-integration/node_modules/@slack/logger/node_modules/@types/node/diagnostics_channel.d.ts",
            "lib/slack-integration/node_modules/@slack/logger/node_modules/@types/node/tls.d.ts",
            "lib/slack-integration/node_modules/@slack/logger/node_modules/@types/node/readline.d.ts",
            "lib/slack-integration/node_modules/@slack/logger/node_modules/@types/node/crypto.d.ts",
            "lib/slack-integration/node_modules/@slack/logger/node_modules/@types/node/events.d.ts",
            "lib/slack-integration/node_modules/@slack/logger/node_modules/@types/node/buffer.d.ts",
            "lib/slack-integration/node_modules/@slack/logger/node_modules/@types/node/worker_threads.d.ts",
            "lib/slack-integration/node_modules/@slack/logger/node_modules/@types/node/async_hooks.d.ts",
            "lib/slack-integration/node_modules/@slack/logger/node_modules/@types/node/stream/web.d.ts",
            "lib/slack-integration/node_modules/@slack/logger/node_modules/@types/node/dns.d.ts",
            "lib/slack-integration/node_modules/@slack/logger/node_modules/@types/node/vm.d.ts",
            "lib/slack-integration/node_modules/@slack/logger/node_modules/@types/node/test.d.ts",
            "lib/slack-integration/node_modules/@slack/logger/node_modules/@types/node/http.d.ts",
            "lib/slack-integration/node_modules/@slack/logger/node_modules/@types/node/http2.d.ts",
            "lib/slack-integration/node_modules/@slack/logger/node_modules/@types/node/stream.d.ts",
            "lib/slack-integration/node_modules/@slack/logger/node_modules/@types/node/inspector.d.ts",
            "lib/slack-integration/node_modules/@slack/logger/node_modules/@types/node/v8.d.ts",
            "lib/slack-integration/node_modules/@slack/logger/node_modules/@types/node/perf_hooks.d.ts",
            "lib/slack-integration/node_modules/@slack/logger/node_modules/@types/node/url.d.ts",
            "lib/slack-integration/node_modules/@slack/logger/node_modules/@types/node/cluster.d.ts",
            "lib/slack-integration/node_modules/@slack/logger/node_modules/@types/node/https.d.ts",
            "lib/slack-integration/node_modules/@slack/logger/node_modules/@types/node/assert.d.ts",
            "lib/slack-integration/node_modules/@slack/logger/node_modules/@types/node/fs.d.ts",
            "lib/slack-integration/node_modules/@slack/logger/node_modules/@types/node/dgram.d.ts",
            "lib/slack-integration/node_modules/@slack/logger/node_modules/@types/node/child_process.d.ts",
            "lib/slack-integration/node_modules/@slack/logger/node_modules/@types/node/zlib.d.ts",
            "lib/slack-integration/node_modules/@slack/logger/node_modules/@types/node/module.d.ts",
            "lib/slack-integration/node_modules/@slack/logger/node_modules/@types/node/sqlite.d.ts",
            "lib/slack-integration/node_modules/@slack/logger/node_modules/@types/node/process.d.ts",
            "lib/slack-integration/node_modules/@slack/logger/node_modules/@types/node/util.d.ts",
            "lib/slack-integration/node_modules/@slack/logger/node_modules/@types/node/dns/promises.d.ts",
            "lib/slack-integration/node_modules/@slack/logger/node_modules/@types/node/fs/promises.d.ts",
            "lib/slack-integration/node_modules/@slack/logger/node_modules/@types/node/net.d.ts",
            "lib/slack-integration/node_modules/@slack/web-api/dist/types/response/SearchAllResponse.d.ts",
            "lib/slack-integration/node_modules/@slack/web-api/dist/types/response/FilesSharedPublicURLResponse.d.ts",
            "lib/slack-integration/node_modules/@slack/web-api/dist/types/response/FilesInfoResponse.d.ts",
            "lib/slack-integration/node_modules/@slack/web-api/dist/types/response/PinsListResponse.d.ts",
            "lib/slack-integration/node_modules/@slack/web-api/dist/types/response/FilesRemoteInfoResponse.d.ts",
            "lib/slack-integration/node_modules/@slack/web-api/dist/types/response/FilesRemoteShareResponse.d.ts",
            "lib/slack-integration/node_modules/@slack/web-api/dist/types/response/FilesListResponse.d.ts",
            "lib/slack-integration/node_modules/@slack/web-api/dist/types/response/FilesRemoteListResponse.d.ts",
            "lib/slack-integration/node_modules/@slack/web-api/dist/types/response/ReactionsListResponse.d.ts",
            "lib/slack-integration/node_modules/@slack/web-api/dist/types/response/ReactionsGetResponse.d.ts",
            "lib/slack-integration/node_modules/@slack/web-api/dist/types/response/FilesRevokePublicURLResponse.d.ts",
            "lib/slack-integration/node_modules/@slack/web-api/dist/types/response/SearchMessagesResponse.d.ts",
            "lib/slack-integration/node_modules/@slack/web-api/dist/types/response/FilesRemoteAddResponse.d.ts",
            "lib/slack-integration/node_modules/@slack/web-api/dist/types/response/SearchFilesResponse.d.ts",
            "lib/slack-integration/node_modules/@slack/web-api/dist/types/response/ChatPostMessageResponse.d.ts",
            "lib/slack-integration/node_modules/@slack/web-api/dist/types/response/ChatScheduleMessageResponse.d.ts",
            "lib/slack-integration/node_modules/@slack/web-api/dist/types/response/ConversationsRepliesResponse.d.ts",
            "lib/slack-integration/node_modules/@slack/web-api/dist/types/response/ConversationsOpenResponse.d.ts",
            "lib/slack-integration/node_modules/@slack/web-api/dist/types/response/ChatUpdateResponse.d.ts",
            "lib/slack-integration/node_modules/@slack/web-api/dist/types/response/RtmStartResponse.d.ts",
            "lib/slack-integration/node_modules/@slack/web-api/dist/types/response/ConversationsHistoryResponse.d.ts",
            "lib/slack-integration/node_modules/@slack/web-api/dist/types/response/StarsListResponse.d.ts",
            "lib/slack-integration/node_modules/@slack/web-api/dist/types/response/FilesRemoteUpdateResponse.d.ts",
            "lib/slack-integration/node_modules/@slack/web-api/dist/types/response/FilesUploadResponse.d.ts",
            "lib/slack-integration/node_modules/@slack/web-api/dist/methods.d.ts",
            "lib/slack-integration/node_modules/@slack/web-api/node_modules/@types/node/diagnostics_channel.d.ts",
            "lib/slack-integration/node_modules/@slack/web-api/node_modules/@types/node/tls.d.ts",
            "lib/slack-integration/node_modules/@slack/web-api/node_modules/@types/node/readline.d.ts",
            "lib/slack-integration/node_modules/@slack/web-api/node_modules/@types/node/crypto.d.ts",
            "lib/slack-integration/node_modules/@slack/web-api/node_modules/@types/node/events.d.ts",
            "lib/slack-integration/node_modules/@slack/web-api/node_modules/@types/node/buffer.d.ts",
            "lib/slack-integration/node_modules/@slack/web-api/node_modules/@types/node/worker_threads.d.ts",
            "lib/slack-integration/node_modules/@slack/web-api/node_modules/@types/node/async_hooks.d.ts",
            "lib/slack-integration/node_modules/@slack/web-api/node_modules/@types/node/stream/web.d.ts",
            "lib/slack-integration/node_modules/@slack/web-api/node_modules/@types/node/dns.d.ts",
            "lib/slack-integration/node_modules/@slack/web-api/node_modules/@types/node/vm.d.ts",
            "lib/slack-integration/node_modules/@slack/web-api/node_modules/@types/node/test.d.ts",
            "lib/slack-integration/node_modules/@slack/web-api/node_modules/@types/node/http.d.ts",
            "lib/slack-integration/node_modules/@slack/web-api/node_modules/@types/node/http2.d.ts",
            "lib/slack-integration/node_modules/@slack/web-api/node_modules/@types/node/stream.d.ts",
            "lib/slack-integration/node_modules/@slack/web-api/node_modules/@types/node/inspector.d.ts",
            "lib/slack-integration/node_modules/@slack/web-api/node_modules/@types/node/v8.d.ts",
            "lib/slack-integration/node_modules/@slack/web-api/node_modules/@types/node/perf_hooks.d.ts",
            "lib/slack-integration/node_modules/@slack/web-api/node_modules/@types/node/url.d.ts",
            "lib/slack-integration/node_modules/@slack/web-api/node_modules/@types/node/cluster.d.ts",
            "lib/slack-integration/node_modules/@slack/web-api/node_modules/@types/node/https.d.ts",
            "lib/slack-integration/node_modules/@slack/web-api/node_modules/@types/node/assert.d.ts",
            "lib/slack-integration/node_modules/@slack/web-api/node_modules/@types/node/fs.d.ts",
            "lib/slack-integration/node_modules/@slack/web-api/node_modules/@types/node/dgram.d.ts",
            "lib/slack-integration/node_modules/@slack/web-api/node_modules/@types/node/child_process.d.ts",
            "lib/slack-integration/node_modules/@slack/web-api/node_modules/@types/node/zlib.d.ts",
            "lib/slack-integration/node_modules/@slack/web-api/node_modules/@types/node/module.d.ts",
            "lib/slack-integration/node_modules/@slack/web-api/node_modules/@types/node/sqlite.d.ts",
            "lib/slack-integration/node_modules/@slack/web-api/node_modules/@types/node/process.d.ts",
            "lib/slack-integration/node_modules/@slack/web-api/node_modules/@types/node/util.d.ts",
            "lib/slack-integration/node_modules/@slack/web-api/node_modules/@types/node/dns/promises.d.ts",
            "lib/slack-integration/node_modules/@slack/web-api/node_modules/@types/node/fs/promises.d.ts",
            "lib/slack-integration/node_modules/@slack/web-api/node_modules/@types/node/net.d.ts",
            "crypto-campaign-unified/node_modules/@types/chai/index.d.ts",
            "crypto-campaign-unified/node_modules/@types/estree/index.d.ts",
            "crypto-campaign-unified/node_modules/@types/node/diagnostics_channel.d.ts",
            "crypto-campaign-unified/node_modules/@types/node/tls.d.ts",
            "crypto-campaign-unified/node_modules/@types/node/readline.d.ts",
            "crypto-campaign-unified/node_modules/@types/node/crypto.d.ts",
            "crypto-campaign-unified/node_modules/@types/node/events.d.ts",
            "crypto-campaign-unified/node_modules/@types/node/buffer.d.ts",
            "crypto-campaign-unified/node_modules/@types/node/worker_threads.d.ts",
            "crypto-campaign-unified/node_modules/@types/node/async_hooks.d.ts",
            "crypto-campaign-unified/node_modules/@types/node/stream/web.d.ts",
            "crypto-campaign-unified/node_modules/@types/node/dns.d.ts",
            "crypto-campaign-unified/node_modules/@types/node/vm.d.ts",
            "crypto-campaign-unified/node_modules/@types/node/test.d.ts",
            "crypto-campaign-unified/node_modules/@types/node/http.d.ts",
            "crypto-campaign-unified/node_modules/@types/node/http2.d.ts",
            "crypto-campaign-unified/node_modules/@types/node/stream.d.ts",
            "crypto-campaign-unified/node_modules/@types/node/inspector.d.ts",
            "crypto-campaign-unified/node_modules/@types/node/v8.d.ts",
            "crypto-campaign-unified/node_modules/@types/node/perf_hooks.d.ts",
            "crypto-campaign-unified/node_modules/@types/node/url.d.ts",
            "crypto-campaign-unified/node_modules/@types/node/cluster.d.ts",
            "crypto-campaign-unified/node_modules/@types/node/https.d.ts",
            "crypto-campaign-unified/node_modules/@types/node/assert.d.ts",
            "crypto-campaign-unified/node_modules/@types/node/fs.d.ts",
            "crypto-campaign-unified/node_modules/@types/node/dgram.d.ts",
            "crypto-campaign-unified/node_modules/@types/node/child_process.d.ts",
            "crypto-campaign-unified/node_modules/@types/node/zlib.d.ts",
            "crypto-campaign-unified/node_modules/@types/node/module.d.ts",
            "crypto-campaign-unified/node_modules/@types/node/process.d.ts",
            "crypto-campaign-unified/node_modules/@types/node/util.d.ts",
            "crypto-campaign-unified/node_modules/@types/node/fs/promises.d.ts",
            "crypto-campaign-unified/node_modules/@types/node/net.d.ts",
            "crypto-campaign-unified/node_modules/@noble/curves/src/abstract/weierstrass.ts",
            "crypto-campaign-unified/node_modules/@noble/curves/src/abstract/edwards.ts",
            "crypto-campaign-unified/node_modules/@noble/curves/src/bls12-381.ts",
            "crypto-campaign-unified/node_modules/happy-dom/lib/css/declaration/property-manager/CSSStyleDeclarationPropertySetParser.d.ts",
            "crypto-campaign-unified/node_modules/happy-dom/lib/css/declaration/CSSStyleDeclaration.d.ts",
            "crypto-campaign-unified/node_modules/happy-dom/lib/nodes/element/Element.d.ts",
            "crypto-campaign-unified/node_modules/happy-dom/lib/nodes/document/Document.d.ts",
            "crypto-campaign-unified/node_modules/happy-dom/lib/nodes/html-input-element/HTMLInputElement.d.ts",
            "total",
            "crypto-campaign-unified/node_modules/happy-dom/lib/window/BrowserWindow.d.ts",
            "crypto-campaign-unified/node_modules/happy-dom/src/svg/SVGTransformList.ts",
            "crypto-campaign-unified/node_modules/happy-dom/src/svg/SVGNumberList.ts",
            "crypto-campaign-unified/node_modules/happy-dom/src/svg/SVGPointList.ts",
            "crypto-campaign-unified/node_modules/happy-dom/src/css/declaration/property-manager/CSSStyleDeclarationPropertyManager.ts",
            "crypto-campaign-unified/node_modules/happy-dom/src/css/declaration/property-manager/CSSStyleDeclarationPropertySetParser.ts",
            "crypto-campaign-unified/node_modules/happy-dom/src/css/declaration/property-manager/CSSStyleDeclarationPropertyGetParser.ts",
            "crypto-campaign-unified/node_modules/happy-dom/src/css/declaration/CSSStyleDeclaration.ts",
            "crypto-campaign-unified/node_modules/happy-dom/src/config/HTMLElementConfig.ts",
            "crypto-campaign-unified/node_modules/happy-dom/src/nodes/html-element/HTMLElement.ts",
            "crypto-campaign-unified/node_modules/happy-dom/src/nodes/html-form-element/HTMLFormElement.ts",
            "crypto-campaign-unified/node_modules/happy-dom/src/nodes/svg-element/SVGElement.ts",
            "crypto-campaign-unified/node_modules/happy-dom/src/nodes/html-text-area-element/HTMLTextAreaElement.ts",
            "crypto-campaign-unified/node_modules/happy-dom/src/nodes/element/Element.ts",
            "crypto-campaign-unified/node_modules/happy-dom/src/nodes/document/Document.ts",
            "crypto-campaign-unified/node_modules/happy-dom/src/nodes/html-input-element/HTMLInputElement.ts",
            "crypto-campaign-unified/node_modules/happy-dom/src/nodes/html-select-element/HTMLSelectElement.ts",
            "crypto-campaign-unified/node_modules/happy-dom/src/nodes/node/Node.ts",
            "crypto-campaign-unified/node_modules/happy-dom/src/nodes/html-script-element/HTMLScriptElement.ts",
            "crypto-campaign-unified/node_modules/happy-dom/src/nodes/svg-svg-element/SVGSVGElement.ts",
            "crypto-campaign-unified/node_modules/happy-dom/src/nodes/html-media-element/HTMLMediaElement.ts",
            "crypto-campaign-unified/node_modules/happy-dom/src/module/ECMAScriptModuleCompiler.ts",
            "crypto-campaign-unified/node_modules/happy-dom/src/xml-http-request/XMLHttpRequest.ts",
            "crypto-campaign-unified/node_modules/happy-dom/src/fetch/SyncFetch.ts",
            "crypto-campaign-unified/node_modules/happy-dom/src/fetch/Fetch.ts",
            "crypto-campaign-unified/node_modules/happy-dom/src/xml-parser/XMLParser.ts",
            "crypto-campaign-unified/node_modules/happy-dom/src/window/BrowserWindow.ts",
            "crypto-campaign-unified/node_modules/happy-dom/src/html-parser/HTMLParser.ts",
            "crypto-campaign-unified/node_modules/happy-dom/src/dom/dom-matrix/DOMMatrixReadOnly.ts",
            "crypto-campaign-unified/node_modules/happy-dom/src/selection/Selection.ts",
            "crypto-campaign-unified/node_modules/happy-dom/src/range/Range.ts",
            "crypto-campaign-unified/node_modules/happy-dom/src/query-selector/QuerySelector.ts",
            "crypto-campaign-unified/node_modules/happy-dom/cjs/css/declaration/property-manager/CSSStyleDeclarationPropertySetParser.d.ts",
            "crypto-campaign-unified/node_modules/happy-dom/cjs/css/declaration/CSSStyleDeclaration.d.ts",
            "crypto-campaign-unified/node_modules/happy-dom/cjs/nodes/element/Element.d.ts",
            "crypto-campaign-unified/node_modules/happy-dom/cjs/nodes/document/Document.d.ts",
            "crypto-campaign-unified/node_modules/happy-dom/cjs/nodes/html-input-element/HTMLInputElement.d.ts",
            "crypto-campaign-unified/node_modules/happy-dom/cjs/window/BrowserWindow.d.ts",
            "crypto-campaign-unified/node_modules/lru-cache/dist/esm/index.d.ts",
            "crypto-campaign-unified/node_modules/lru-cache/dist/commonjs/index.d.ts",
            "crypto-campaign-unified/node_modules/ethers/lib.commonjs/providers/provider.d.ts",
            "crypto-campaign-unified/node_modules/ethers/lib.commonjs/utils/errors.d.ts",
            "crypto-campaign-unified/node_modules/ethers/lib.commonjs/abi/typed.d.ts",
            "crypto-campaign-unified/node_modules/ethers/src.ts/transaction/transaction.ts",
            "crypto-campaign-unified/node_modules/ethers/src.ts/contract/contract.ts",
            "crypto-campaign-unified/node_modules/ethers/src.ts/hash/typed-data.ts",
            "crypto-campaign-unified/node_modules/ethers/src.ts/providers/provider-etherscan.ts",
            "crypto-campaign-unified/node_modules/ethers/src.ts/providers/abstract-provider.ts",
            "crypto-campaign-unified/node_modules/ethers/src.ts/providers/provider-fallback.ts",
            "crypto-campaign-unified/node_modules/ethers/src.ts/providers/ens-resolver.ts",
            "crypto-campaign-unified/node_modules/ethers/src.ts/providers/provider-jsonrpc.ts",
            "crypto-campaign-unified/node_modules/ethers/src.ts/providers/provider.ts",
            "crypto-campaign-unified/node_modules/ethers/src.ts/utils/errors.ts",
            "crypto-campaign-unified/node_modules/ethers/src.ts/utils/fixednumber.ts",
            "crypto-campaign-unified/node_modules/ethers/src.ts/utils/fetch.ts",
            "crypto-campaign-unified/node_modules/ethers/src.ts/abi/coders/abstract-coder.ts",
            "crypto-campaign-unified/node_modules/ethers/src.ts/abi/fragments.ts",
            "crypto-campaign-unified/node_modules/ethers/src.ts/abi/interface.ts",
            "crypto-campaign-unified/node_modules/ethers/src.ts/abi/typed.ts",
            "crypto-campaign-unified/node_modules/ethers/src.ts/wallet/hdwallet.ts",
            "crypto-campaign-unified/node_modules/ethers/node_modules/@types/node/diagnostics_channel.d.ts",
            "crypto-campaign-unified/node_modules/ethers/node_modules/@types/node/globals.d.ts",
            "crypto-campaign-unified/node_modules/ethers/node_modules/@types/node/tls.d.ts",
            "crypto-campaign-unified/node_modules/ethers/node_modules/@types/node/readline.d.ts",
            "crypto-campaign-unified/node_modules/ethers/node_modules/@types/node/crypto.d.ts",
            "crypto-campaign-unified/node_modules/ethers/node_modules/@types/node/events.d.ts",
            "crypto-campaign-unified/node_modules/ethers/node_modules/@types/node/buffer.d.ts",
            "crypto-campaign-unified/node_modules/ethers/node_modules/@types/node/worker_threads.d.ts",
            "crypto-campaign-unified/node_modules/ethers/node_modules/@types/node/async_hooks.d.ts",
            "crypto-campaign-unified/node_modules/ethers/node_modules/@types/node/stream/web.d.ts",
            "crypto-campaign-unified/node_modules/ethers/node_modules/@types/node/dns.d.ts",
            "crypto-campaign-unified/node_modules/ethers/node_modules/@types/node/vm.d.ts",
            "crypto-campaign-unified/node_modules/ethers/node_modules/@types/node/test.d.ts",
            "crypto-campaign-unified/node_modules/ethers/node_modules/@types/node/http.d.ts",
            "crypto-campaign-unified/node_modules/ethers/node_modules/@types/node/http2.d.ts",
            "crypto-campaign-unified/node_modules/ethers/node_modules/@types/node/stream.d.ts",
            "crypto-campaign-unified/node_modules/ethers/node_modules/@types/node/inspector.d.ts",
            "crypto-campaign-unified/node_modules/ethers/node_modules/@types/node/v8.d.ts",
            "crypto-campaign-unified/node_modules/ethers/node_modules/@types/node/perf_hooks.d.ts",
            "crypto-campaign-unified/node_modules/ethers/node_modules/@types/node/url.d.ts",
            "crypto-campaign-unified/node_modules/ethers/node_modules/@types/node/cluster.d.ts",
            "crypto-campaign-unified/node_modules/ethers/node_modules/@types/node/https.d.ts",
            "crypto-campaign-unified/node_modules/ethers/node_modules/@types/node/assert.d.ts",
            "crypto-campaign-unified/node_modules/ethers/node_modules/@types/node/fs.d.ts",
            "crypto-campaign-unified/node_modules/ethers/node_modules/@types/node/dgram.d.ts",
            "crypto-campaign-unified/node_modules/ethers/node_modules/@types/node/child_process.d.ts",
            "crypto-campaign-unified/node_modules/ethers/node_modules/@types/node/zlib.d.ts",
            "crypto-campaign-unified/node_modules/ethers/node_modules/@types/node/process.d.ts",
            "crypto-campaign-unified/node_modules/ethers/node_modules/@types/node/util.d.ts",
            "crypto-campaign-unified/node_modules/ethers/node_modules/@types/node/fs/promises.d.ts",
            "crypto-campaign-unified/node_modules/ethers/node_modules/@types/node/net.d.ts",
            "crypto-campaign-unified/node_modules/ethers/lib.esm/providers/provider.d.ts",
            "crypto-campaign-unified/node_modules/ethers/lib.esm/utils/errors.d.ts",
            "crypto-campaign-unified/node_modules/ethers/lib.esm/abi/typed.d.ts",
            "crypto-campaign-unified/node_modules/type-fest/source/package-json.d.ts",
            "crypto-campaign-unified/node_modules/type-fest/source/tsconfig-json.d.ts",
            "crypto-campaign-unified/node_modules/vitest/dist/chunks/reporters.d.BFLkQcL6.d.ts",
            "crypto-campaign-unified/node_modules/vitest/dist/index.d.ts",
            "crypto-campaign-unified/node_modules/postcss/lib/node.d.ts",
            "crypto-campaign-unified/node_modules/@asamuzakjp/css-color/dist/esm/js/color.d.ts",
            "crypto-campaign-unified/node_modules/@asamuzakjp/css-color/src/js/css-calc.ts",
            "crypto-campaign-unified/node_modules/@asamuzakjp/css-color/src/js/color.ts",
            "crypto-campaign-unified/node_modules/@asamuzakjp/css-color/src/js/relative-color.ts",
            "crypto-campaign-unified/node_modules/@csstools/css-parser-algorithms/dist/index.d.ts",
            "crypto-campaign-unified/node_modules/@csstools/css-tokenizer/dist/index.d.ts",
            "crypto-campaign-unified/node_modules/@mswjs/interceptors/src/interceptors/ClientRequest/MockHttpSocket.ts",
            "crypto-campaign-unified/node_modules/@mswjs/interceptors/src/interceptors/XMLHttpRequest/XMLHttpRequestController.ts",
            "crypto-campaign-unified/node_modules/saxes/saxes.d.ts",
            "crypto-campaign-unified/node_modules/vite/dist/node/index.d.ts",
            "crypto-campaign-unified/node_modules/graphql/language/parser.d.ts",
            "crypto-campaign-unified/node_modules/graphql/language/ast.d.ts",
            "crypto-campaign-unified/node_modules/graphql/type/definition.d.ts",
            "crypto-campaign-unified/node_modules/@babel/types/lib/index-legacy.d.ts",
            "crypto-campaign-unified/node_modules/@babel/types/lib/index.d.ts",
            "crypto-campaign-unified/node_modules/msw/src/core/handlers/GraphQLHandler.test.ts",
            "crypto-campaign-unified/node_modules/rollup/dist/rollup.d.ts",
            "crypto-campaign-unified/node_modules/@supabase/auth-js/dist/module/GoTrueClient.d.ts",
            "crypto-campaign-unified/node_modules/@supabase/auth-js/dist/module/lib/types.d.ts",
            "crypto-campaign-unified/node_modules/@supabase/auth-js/dist/main/GoTrueClient.d.ts",
            "crypto-campaign-unified/node_modules/@supabase/auth-js/dist/main/lib/types.d.ts",
            "crypto-campaign-unified/node_modules/@supabase/auth-js/src/lib/types.ts",
            "crypto-campaign-unified/node_modules/@supabase/auth-js/src/GoTrueClient.ts",
            "crypto-campaign-unified/node_modules/@supabase/realtime-js/src/RealtimeClient.ts",
            "crypto-campaign-unified/node_modules/@supabase/realtime-js/src/RealtimeChannel.ts",
            "crypto-campaign-unified/node_modules/@supabase/storage-js/src/packages/StorageFileApi.ts",
            "crypto-campaign-unified/node_modules/@supabase/postgrest-js/src/PostgrestFilterBuilder.ts",
            "crypto-campaign-unified/node_modules/@supabase/postgrest-js/src/select-query-parser/utils.ts",
            "crypto-campaign-unified/node_modules/@supabase/postgrest-js/src/select-query-parser/result.ts",
            "crypto-campaign-unified/node_modules/expect-type/dist/index.d.ts",
            "crypto-campaign-unified/node_modules/ansi-escapes/node_modules/type-fest/source/package-json.d.ts",
            "crypto-campaign-unified/node_modules/ansi-escapes/node_modules/type-fest/source/tsconfig-json.d.ts",
            "crypto-campaign-unified/node_modules/@vitest/runner/dist/tasks.d-CkscK4of.d.ts",
            "crypto-campaign-unified/node_modules/@vitest/mocker/dist/node.d.ts",
            "crypto-campaign-unified/node_modules/@vitest/expect/dist/index.d.ts",
            "crypto-campaign-unified/node_modules/esbuild/lib/main.d.ts",
            "crypto-campaign-unified/node_modules/minipass/dist/esm/index.d.ts",
            "crypto-campaign-unified/node_modules/minipass/dist/commonjs/index.d.ts",
            "crypto-campaign-unified/node_modules/@testing-library/jest-dom/types/matchers.d.ts",
            "crypto-campaign-unified/node_modules/@jridgewell/trace-mapping/src/trace-mapping.ts",
            "crypto-campaign-unified/node_modules/@jridgewell/gen-mapping/src/gen-mapping.ts",
            "crypto-campaign-unified/node_modules/tough-cookie/dist/cookie/cookieJar.d.ts",
            "crypto-campaign-unified/node_modules/entities/src/decode.ts",
            "crypto-campaign-unified/node_modules/path-scurry/dist/esm/index.d.ts",
            "crypto-campaign-unified/node_modules/path-scurry/dist/commonjs/index.d.ts",
            "session-recorder/node_modules/zod/v4/core/schemas.d.ts",
            "session-recorder/node_modules/zod/v4/classic/schemas.d.ts",
            "session-recorder/node_modules/zod/v3/types.d.ts",
            "session-recorder/node_modules/zod/src/v4/core/schemas.ts",
            "session-recorder/node_modules/zod/src/v4/core/api.ts",
            "session-recorder/node_modules/zod/src/v4/core/to-json-schema.ts",
            "session-recorder/node_modules/zod/src/v4/core/checks.ts",
            "session-recorder/node_modules/zod/src/v4/core/util.ts",
            "session-recorder/node_modules/zod/src/v4/mini/tests/index.test.ts",
            "session-recorder/node_modules/zod/src/v4/mini/schemas.ts",
            "session-recorder/node_modules/zod/src/v4/classic/tests/template-literal.test.ts",
            "session-recorder/node_modules/zod/src/v4/classic/tests/index.test.ts",
            "session-recorder/node_modules/zod/src/v4/classic/tests/error-utils.test.ts",
            "session-recorder/node_modules/zod/src/v4/classic/tests/string.test.ts",
            "session-recorder/node_modules/zod/src/v4/classic/tests/discriminated-unions.test.ts",
            "session-recorder/node_modules/zod/src/v4/classic/tests/to-json-schema.test.ts",
            "session-recorder/node_modules/zod/src/v4/classic/tests/refine.test.ts",
            "session-recorder/node_modules/zod/src/v4/classic/tests/error.test.ts",
            "session-recorder/node_modules/zod/src/v4/classic/tests/object.test.ts",
            "session-recorder/node_modules/zod/src/v4/classic/schemas.ts",
            "session-recorder/node_modules/zod/src/v3/tests/string.test.ts",
            "session-recorder/node_modules/zod/src/v3/tests/error.test.ts",
            "session-recorder/node_modules/zod/src/v3/types.ts",
            "session-recorder/node_modules/@types/node/diagnostics_channel.d.ts",
            "session-recorder/node_modules/@types/node/tls.d.ts",
            "session-recorder/node_modules/@types/node/readline.d.ts",
            "session-recorder/node_modules/@types/node/crypto.d.ts",
            "session-recorder/node_modules/@types/node/events.d.ts",
            "session-recorder/node_modules/@types/node/buffer.d.ts",
            "session-recorder/node_modules/@types/node/worker_threads.d.ts",
            "session-recorder/node_modules/@types/node/async_hooks.d.ts",
            "session-recorder/node_modules/@types/node/stream/web.d.ts",
            "session-recorder/node_modules/@types/node/dns.d.ts",
            "session-recorder/node_modules/@types/node/vm.d.ts",
            "session-recorder/node_modules/@types/node/test.d.ts",
            "session-recorder/node_modules/@types/node/http.d.ts",
            "session-recorder/node_modules/@types/node/http2.d.ts",
            "session-recorder/node_modules/@types/node/stream.d.ts",
            "session-recorder/node_modules/@types/node/inspector.d.ts",
            "session-recorder/node_modules/@types/node/v8.d.ts",
            "session-recorder/node_modules/@types/node/perf_hooks.d.ts",
            "session-recorder/node_modules/@types/node/url.d.ts",
            "session-recorder/node_modules/@types/node/cluster.d.ts",
            "session-recorder/node_modules/@types/node/https.d.ts",
            "session-recorder/node_modules/@types/node/assert.d.ts",
            "session-recorder/node_modules/@types/node/fs.d.ts",
            "session-recorder/node_modules/@types/node/dgram.d.ts",
            "session-recorder/node_modules/@types/node/child_process.d.ts",
            "session-recorder/node_modules/@types/node/zlib.d.ts",
            "session-recorder/node_modules/@types/node/module.d.ts",
            "session-recorder/node_modules/@types/node/sqlite.d.ts",
            "session-recorder/node_modules/@types/node/process.d.ts",
            "session-recorder/node_modules/@types/node/util.d.ts",
            "session-recorder/node_modules/@types/node/dns/promises.d.ts",
            "session-recorder/node_modules/@types/node/fs/promises.d.ts",
            "session-recorder/node_modules/@types/node/net.d.ts",
            "session-recorder/node_modules/proxy-agent/node_modules/lru-cache/index.d.ts",
            "session-recorder/node_modules/type-fest/source/package-json.d.ts",
            "session-recorder/node_modules/type-fest/source/tsconfig-json.d.ts",
            "session-recorder/node_modules/ip-address/src/ipv6.ts",
            "session-recorder/node_modules/moment/moment.d.ts",
            "session-recorder/node_modules/moment/ts3.1-typings/moment.d.ts",
            "session-recorder/node_modules/puppeteer/lib/types.d.ts",
            "session-recorder/node_modules/ast-types/gen/builders.d.ts",
            "session-recorder/node_modules/ast-types/gen/namedTypes.d.ts",
            "session-recorder/node_modules/smart-buffer/typings/smartbuffer.d.ts",
            "session-recorder/node_modules/devtools-protocol/types/protocol-mapping.d.ts",
            "session-recorder/node_modules/devtools-protocol/types/protocol-tests-proxy-api.d.ts",
            "session-recorder/node_modules/devtools-protocol/types/protocol.d.ts",
            "session-recorder/node_modules/devtools-protocol/types/protocol-proxy-api.d.ts",
            "session-recorder/node_modules/bare-fs/index.d.ts",
            "session-recorder/node_modules/fecha/src/fecha.ts",
            "session-recorder/node_modules/chromium-bidi/lib/esm/protocol/generated/webdriver-bidi.d.ts",
            "session-recorder/node_modules/chromium-bidi/lib/esm/protocol-parser/generated/webdriver-bidi.d.ts",
            "session-recorder/node_modules/chromium-bidi/lib/esm/protocol-parser/generated/webdriver-bidi-bluetooth.d.ts",
            "session-recorder/node_modules/chromium-bidi/lib/cjs/protocol/generated/webdriver-bidi.d.ts",
            "session-recorder/node_modules/chromium-bidi/lib/cjs/protocol-parser/generated/webdriver-bidi.d.ts",
            "session-recorder/node_modules/chromium-bidi/lib/cjs/protocol-parser/generated/webdriver-bidi-bluetooth.d.ts",
            "session-recorder/node_modules/@supabase/auth-js/dist/module/GoTrueClient.d.ts",
            "session-recorder/node_modules/@supabase/auth-js/dist/module/lib/types.d.ts",
            "session-recorder/node_modules/@supabase/auth-js/dist/main/GoTrueClient.d.ts",
            "session-recorder/node_modules/@supabase/auth-js/dist/main/lib/types.d.ts",
            "session-recorder/node_modules/@supabase/auth-js/src/lib/types.ts",
            "session-recorder/node_modules/@supabase/auth-js/src/GoTrueClient.ts",
            "session-recorder/node_modules/@supabase/realtime-js/src/RealtimeClient.ts",
            "session-recorder/node_modules/@supabase/realtime-js/src/RealtimeChannel.ts",
            "session-recorder/node_modules/@supabase/storage-js/src/packages/StorageFileApi.ts",
            "session-recorder/node_modules/@supabase/postgrest-js/src/PostgrestFilterBuilder.ts",
            "session-recorder/node_modules/@supabase/postgrest-js/src/select-query-parser/utils.ts",
            "session-recorder/node_modules/@supabase/postgrest-js/src/select-query-parser/result.ts",
            "total",
            "session-recorder/node_modules/rxjs/src/internal/testing/TestScheduler.ts",
            "session-recorder/node_modules/rxjs/src/internal/ajax/ajax.ts",
            "session-recorder/node_modules/puppeteer-core/lib/esm/puppeteer/api/ElementHandle.d.ts",
            "session-recorder/node_modules/puppeteer-core/lib/esm/puppeteer/api/Frame.d.ts",
            "session-recorder/node_modules/puppeteer-core/lib/esm/puppeteer/api/Page.d.ts",
            "session-recorder/node_modules/puppeteer-core/lib/types.d.ts",
            "session-recorder/node_modules/puppeteer-core/lib/es5-iife/puppeteer-core-browser.d.ts",
            "session-recorder/node_modules/puppeteer-core/lib/cjs/puppeteer/api/ElementHandle.d.ts",
            "session-recorder/node_modules/puppeteer-core/lib/cjs/puppeteer/api/Frame.d.ts",
            "session-recorder/node_modules/puppeteer-core/lib/cjs/puppeteer/api/Page.d.ts",
            "session-recorder/node_modules/puppeteer-core/src/cdp/EmulationManager.ts",
            "session-recorder/node_modules/puppeteer-core/src/cdp/ExecutionContext.ts",
            "session-recorder/node_modules/puppeteer-core/src/cdp/FrameManager.ts",
            "session-recorder/node_modules/puppeteer-core/src/cdp/Accessibility.ts",
            "session-recorder/node_modules/puppeteer-core/src/cdp/NetworkManager.ts",
            "session-recorder/node_modules/puppeteer-core/src/cdp/Input.ts",
            "session-recorder/node_modules/puppeteer-core/src/cdp/Page.ts",
            "session-recorder/node_modules/puppeteer-core/src/cdp/Coverage.ts",
            "session-recorder/node_modules/puppeteer-core/src/bidi/core/BrowsingContext.ts",
            "session-recorder/node_modules/puppeteer-core/src/bidi/Frame.ts",
            "session-recorder/node_modules/puppeteer-core/src/bidi/Input.ts",
            "session-recorder/node_modules/puppeteer-core/src/bidi/Page.ts",
            "session-recorder/node_modules/puppeteer-core/src/common/USKeyboardLayout.ts",
            "session-recorder/node_modules/puppeteer-core/src/common/Device.ts",
            "session-recorder/node_modules/puppeteer-core/src/api/HTTPRequest.ts",
            "session-recorder/node_modules/puppeteer-core/src/api/Frame.ts",
            "session-recorder/node_modules/puppeteer-core/src/api/Input.ts",
            "session-recorder/node_modules/puppeteer-core/src/api/locators/locators.ts",
            "session-recorder/node_modules/puppeteer-core/src/api/Browser.ts",
            "session-recorder/node_modules/puppeteer-core/src/api/Page.ts",
            "session-recorder/node_modules/puppeteer-core/src/api/ElementHandle.ts",
            "session-recorder/node_modules/puppeteer-core/src/node/BrowserLauncher.ts",
            "session-recorder/node_modules/@puppeteer/browsers/src/install.ts",
            "session-recorder/node_modules/@puppeteer/browsers/src/CLI.ts",
            "session-recorder/node_modules/@puppeteer/browsers/src/launch.ts",
            "session-recorder/node_modules/simple-git/dist/typings/response.d.ts",
            "session-recorder/node_modules/simple-git/dist/typings/simple-git.d.ts",
            "total"
          ],
          "duplicateCode": false,
          "missingTests": []
        },
        "optimizations": [
          {
            "type": "parallel-execution",
            "description": "Use batch file operations for faster processing",
            "impact": "high",
            "timeEstimate": "5 minutes",
            "howTo": "Use MultiEdit and batch Read operations in single message"
          },
          {
            "type": "refactor-complex",
            "description": "Refactor 912 complex files",
            "impact": "medium",
            "timeEstimate": "1 hour",
            "howTo": "Use Task(\"code-analyzer\", \"Refactor large files\") with Task(\"coder\", \"Implement refactoring\")"
          },
          {
            "type": "commit-changes",
            "description": "Commit pending changes",
            "impact": "low",
            "timeEstimate": "2 minutes",
            "howTo": "Use git commit workflow with proper message format"
          },
          {
            "type": "complete-todos",
            "description": "Complete 8994 TODOs",
            "impact": "medium",
            "timeEstimate": "89940 minutes",
            "howTo": "Use Grep(\"TODO|FIXME\") then Task(\"coder\", \"Complete all TODOs\")"
          }
        ],
        "newFeatures": [
          {
            "feature": "cicd-engineer agent",
            "benefit": "Automatically set up GitHub Actions CI/CD",
            "command": "Task(\"cicd-engineer\", \"Create GitHub Actions workflow\")"
          },
          {
            "feature": "api-docs agent",
            "benefit": "Generate OpenAPI documentation",
            "command": "Task(\"api-docs\", \"Generate API documentation\")"
          },
          {
            "feature": "swarm coordination",
            "benefit": "Use multiple agents in parallel for 2.8x speedup",
            "command": "Launch multiple Task() agents concurrently"
          }
        ],
        "timeToComplete": 89948
      },
      {
        "path": "/Users/Danallovertheplace/pachacuti/session-recorder",
        "name": "pachacuti-session-recorder",
        "type": "node",
        "language": "javascript",
        "lastModified": "2025-08-26T18:06:14.000Z",
        "status": "uncommitted-changes",
        "todoCount": 868,
        "issues": [
          "Has uncommitted changes",
          "868 TODOs/FIXMEs found"
        ],
        "metrics": {
          "fileCount": 5795,
          "totalLines": 0,
          "testCoverage": "unknown",
          "complexFiles": [
            "node_modules/zod/v4/core/schemas.d.ts",
            "node_modules/zod/v4/classic/schemas.d.ts",
            "node_modules/zod/v3/types.d.ts",
            "node_modules/zod/src/v4/core/schemas.ts",
            "node_modules/zod/src/v4/core/api.ts",
            "node_modules/zod/src/v4/core/to-json-schema.ts",
            "node_modules/zod/src/v4/core/checks.ts",
            "node_modules/zod/src/v4/core/util.ts",
            "node_modules/zod/src/v4/mini/tests/index.test.ts",
            "node_modules/zod/src/v4/mini/schemas.ts",
            "node_modules/zod/src/v4/classic/tests/template-literal.test.ts",
            "node_modules/zod/src/v4/classic/tests/index.test.ts",
            "node_modules/zod/src/v4/classic/tests/error-utils.test.ts",
            "node_modules/zod/src/v4/classic/tests/string.test.ts",
            "node_modules/zod/src/v4/classic/tests/discriminated-unions.test.ts",
            "node_modules/zod/src/v4/classic/tests/to-json-schema.test.ts",
            "node_modules/zod/src/v4/classic/tests/refine.test.ts",
            "node_modules/zod/src/v4/classic/tests/error.test.ts",
            "node_modules/zod/src/v4/classic/tests/object.test.ts",
            "node_modules/zod/src/v4/classic/schemas.ts",
            "node_modules/zod/src/v3/tests/string.test.ts",
            "node_modules/zod/src/v3/tests/error.test.ts",
            "node_modules/zod/src/v3/types.ts",
            "node_modules/@types/node/diagnostics_channel.d.ts",
            "node_modules/@types/node/tls.d.ts",
            "node_modules/@types/node/readline.d.ts",
            "node_modules/@types/node/crypto.d.ts",
            "node_modules/@types/node/events.d.ts",
            "node_modules/@types/node/buffer.d.ts",
            "node_modules/@types/node/worker_threads.d.ts",
            "node_modules/@types/node/async_hooks.d.ts",
            "node_modules/@types/node/stream/web.d.ts",
            "node_modules/@types/node/dns.d.ts",
            "node_modules/@types/node/vm.d.ts",
            "node_modules/@types/node/test.d.ts",
            "node_modules/@types/node/http.d.ts",
            "node_modules/@types/node/http2.d.ts",
            "node_modules/@types/node/stream.d.ts",
            "node_modules/@types/node/inspector.d.ts",
            "node_modules/@types/node/v8.d.ts",
            "node_modules/@types/node/perf_hooks.d.ts",
            "node_modules/@types/node/url.d.ts",
            "node_modules/@types/node/cluster.d.ts",
            "node_modules/@types/node/https.d.ts",
            "node_modules/@types/node/assert.d.ts",
            "node_modules/@types/node/fs.d.ts",
            "node_modules/@types/node/dgram.d.ts",
            "node_modules/@types/node/child_process.d.ts",
            "node_modules/@types/node/zlib.d.ts",
            "node_modules/@types/node/module.d.ts",
            "node_modules/@types/node/sqlite.d.ts",
            "node_modules/@types/node/process.d.ts",
            "node_modules/@types/node/util.d.ts",
            "node_modules/@types/node/dns/promises.d.ts",
            "node_modules/@types/node/fs/promises.d.ts",
            "node_modules/@types/node/net.d.ts",
            "node_modules/proxy-agent/node_modules/lru-cache/index.d.ts",
            "node_modules/type-fest/source/package-json.d.ts",
            "node_modules/type-fest/source/tsconfig-json.d.ts",
            "node_modules/ip-address/src/ipv6.ts",
            "node_modules/moment/moment.d.ts",
            "node_modules/moment/ts3.1-typings/moment.d.ts",
            "node_modules/puppeteer/lib/types.d.ts",
            "node_modules/ast-types/gen/builders.d.ts",
            "node_modules/ast-types/gen/namedTypes.d.ts",
            "node_modules/smart-buffer/typings/smartbuffer.d.ts",
            "node_modules/devtools-protocol/types/protocol-mapping.d.ts",
            "node_modules/devtools-protocol/types/protocol-tests-proxy-api.d.ts",
            "node_modules/devtools-protocol/types/protocol.d.ts",
            "node_modules/devtools-protocol/types/protocol-proxy-api.d.ts",
            "node_modules/bare-fs/index.d.ts",
            "node_modules/fecha/src/fecha.ts",
            "node_modules/chromium-bidi/lib/esm/protocol/generated/webdriver-bidi.d.ts",
            "node_modules/chromium-bidi/lib/esm/protocol-parser/generated/webdriver-bidi.d.ts",
            "node_modules/chromium-bidi/lib/esm/protocol-parser/generated/webdriver-bidi-bluetooth.d.ts",
            "node_modules/chromium-bidi/lib/cjs/protocol/generated/webdriver-bidi.d.ts",
            "node_modules/chromium-bidi/lib/cjs/protocol-parser/generated/webdriver-bidi.d.ts",
            "node_modules/chromium-bidi/lib/cjs/protocol-parser/generated/webdriver-bidi-bluetooth.d.ts",
            "node_modules/@supabase/auth-js/dist/module/GoTrueClient.d.ts",
            "node_modules/@supabase/auth-js/dist/module/lib/types.d.ts",
            "node_modules/@supabase/auth-js/dist/main/GoTrueClient.d.ts",
            "node_modules/@supabase/auth-js/dist/main/lib/types.d.ts",
            "node_modules/@supabase/auth-js/src/lib/types.ts",
            "node_modules/@supabase/auth-js/src/GoTrueClient.ts",
            "node_modules/@supabase/realtime-js/src/RealtimeClient.ts",
            "node_modules/@supabase/realtime-js/src/RealtimeChannel.ts",
            "node_modules/@supabase/storage-js/src/packages/StorageFileApi.ts",
            "node_modules/@supabase/postgrest-js/src/PostgrestFilterBuilder.ts",
            "node_modules/@supabase/postgrest-js/src/select-query-parser/utils.ts",
            "node_modules/@supabase/postgrest-js/src/select-query-parser/result.ts",
            "node_modules/rxjs/src/internal/testing/TestScheduler.ts",
            "node_modules/rxjs/src/internal/ajax/ajax.ts",
            "node_modules/puppeteer-core/lib/esm/puppeteer/api/ElementHandle.d.ts",
            "node_modules/puppeteer-core/lib/esm/puppeteer/api/Frame.d.ts",
            "node_modules/puppeteer-core/lib/esm/puppeteer/api/Page.d.ts",
            "node_modules/puppeteer-core/lib/types.d.ts",
            "node_modules/puppeteer-core/lib/es5-iife/puppeteer-core-browser.d.ts",
            "node_modules/puppeteer-core/lib/cjs/puppeteer/api/ElementHandle.d.ts",
            "node_modules/puppeteer-core/lib/cjs/puppeteer/api/Frame.d.ts",
            "node_modules/puppeteer-core/lib/cjs/puppeteer/api/Page.d.ts",
            "node_modules/puppeteer-core/src/cdp/EmulationManager.ts",
            "node_modules/puppeteer-core/src/cdp/ExecutionContext.ts",
            "node_modules/puppeteer-core/src/cdp/FrameManager.ts",
            "node_modules/puppeteer-core/src/cdp/Accessibility.ts",
            "node_modules/puppeteer-core/src/cdp/NetworkManager.ts",
            "node_modules/puppeteer-core/src/cdp/Input.ts",
            "node_modules/puppeteer-core/src/cdp/Page.ts",
            "node_modules/puppeteer-core/src/cdp/Coverage.ts",
            "node_modules/puppeteer-core/src/bidi/core/BrowsingContext.ts",
            "node_modules/puppeteer-core/src/bidi/Frame.ts",
            "node_modules/puppeteer-core/src/bidi/Input.ts",
            "node_modules/puppeteer-core/src/bidi/Page.ts",
            "node_modules/puppeteer-core/src/common/USKeyboardLayout.ts",
            "node_modules/puppeteer-core/src/common/Device.ts",
            "node_modules/puppeteer-core/src/api/HTTPRequest.ts",
            "node_modules/puppeteer-core/src/api/Frame.ts",
            "node_modules/puppeteer-core/src/api/Input.ts",
            "node_modules/puppeteer-core/src/api/locators/locators.ts",
            "node_modules/puppeteer-core/src/api/Browser.ts",
            "node_modules/puppeteer-core/src/api/Page.ts",
            "node_modules/puppeteer-core/src/api/ElementHandle.ts",
            "node_modules/puppeteer-core/src/node/BrowserLauncher.ts",
            "node_modules/@puppeteer/browsers/src/install.ts",
            "node_modules/@puppeteer/browsers/src/CLI.ts",
            "node_modules/@puppeteer/browsers/src/launch.ts",
            "node_modules/simple-git/dist/typings/response.d.ts",
            "node_modules/simple-git/dist/typings/simple-git.d.ts",
            "../total"
          ],
          "duplicateCode": false,
          "missingTests": []
        },
        "optimizations": [
          {
            "type": "parallel-execution",
            "description": "Use batch file operations for faster processing",
            "impact": "high",
            "timeEstimate": "5 minutes",
            "howTo": "Use MultiEdit and batch Read operations in single message"
          },
          {
            "type": "refactor-complex",
            "description": "Refactor 128 complex files",
            "impact": "medium",
            "timeEstimate": "1 hour",
            "howTo": "Use Task(\"code-analyzer\", \"Refactor large files\") with Task(\"coder\", \"Implement refactoring\")"
          },
          {
            "type": "commit-changes",
            "description": "Commit pending changes",
            "impact": "low",
            "timeEstimate": "2 minutes",
            "howTo": "Use git commit workflow with proper message format"
          },
          {
            "type": "complete-todos",
            "description": "Complete 868 TODOs",
            "impact": "medium",
            "timeEstimate": "8680 minutes",
            "howTo": "Use Grep(\"TODO|FIXME\") then Task(\"coder\", \"Complete all TODOs\")"
          }
        ],
        "newFeatures": [
          {
            "feature": "cicd-engineer agent",
            "benefit": "Automatically set up GitHub Actions CI/CD",
            "command": "Task(\"cicd-engineer\", \"Create GitHub Actions workflow\")"
          },
          {
            "feature": "api-docs agent",
            "benefit": "Generate OpenAPI documentation",
            "command": "Task(\"api-docs\", \"Generate API documentation\")"
          },
          {
            "feature": "swarm coordination",
            "benefit": "Use multiple agents in parallel for 2.8x speedup",
            "command": "Launch multiple Task() agents concurrently"
          }
        ],
        "timeToComplete": 8688
      },
      {
        "path": "/Users/Danallovertheplace/pachacuti/shell-viewer/frontend",
        "name": "pachacuti-shell-viewer-frontend",
        "type": "node",
        "language": "javascript",
        "lastModified": "2025-08-26T18:06:14.000Z",
        "status": "uncommitted-changes",
        "todoCount": 5193,
        "issues": [
          "Has uncommitted changes",
          "5193 TODOs/FIXMEs found"
        ],
        "metrics": {
          "fileCount": 73023,
          "totalLines": 0,
          "testCoverage": "unknown",
          "complexFiles": [
            "node_modules/workbox-strategies/src/StrategyHandler.ts",
            "node_modules/idb/build/entry.d.ts",
            "node_modules/@types/node-forge/index.d.ts",
            "node_modules/@types/d3-shape/index.d.ts",
            "node_modules/@types/express-serve-static-core/index.d.ts",
            "node_modules/@types/d3-array/index.d.ts",
            "node_modules/@types/express/node_modules/@types/express-serve-static-core/index.d.ts",
            "node_modules/@types/d3-scale/index.d.ts",
            "node_modules/@types/prettier/index.d.ts",
            "node_modules/@types/d3-color/index.d.ts",
            "node_modules/@types/d3-time/index.d.ts",
            "node_modules/@types/babel__traverse/index.d.ts",
            "node_modules/@types/yargs/index.d.ts",
            "node_modules/@types/eslint/rules/best-practices.d.ts",
            "node_modules/@types/eslint/rules/stylistic-issues.d.ts",
            "node_modules/@types/eslint/rules/ecmascript-6.d.ts",
            "node_modules/@types/eslint/rules/possible-errors.d.ts",
            "node_modules/@types/eslint/index.d.ts",
            "node_modules/@types/estree/index.d.ts",
            "node_modules/@types/node/diagnostics_channel.d.ts",
            "node_modules/@types/node/tls.d.ts",
            "node_modules/@types/node/readline.d.ts",
            "node_modules/@types/node/crypto.d.ts",
            "node_modules/@types/node/events.d.ts",
            "node_modules/@types/node/buffer.d.ts",
            "node_modules/@types/node/worker_threads.d.ts",
            "node_modules/@types/node/async_hooks.d.ts",
            "node_modules/@types/node/stream/web.d.ts",
            "node_modules/@types/node/dns.d.ts",
            "node_modules/@types/node/vm.d.ts",
            "node_modules/@types/node/test.d.ts",
            "node_modules/@types/node/http.d.ts",
            "node_modules/@types/node/http2.d.ts",
            "node_modules/@types/node/stream.d.ts",
            "node_modules/@types/node/inspector.d.ts",
            "node_modules/@types/node/v8.d.ts",
            "node_modules/@types/node/perf_hooks.d.ts",
            "node_modules/@types/node/url.d.ts",
            "node_modules/@types/node/cluster.d.ts",
            "node_modules/@types/node/https.d.ts",
            "node_modules/@types/node/assert.d.ts",
            "node_modules/@types/node/fs.d.ts",
            "node_modules/@types/node/dgram.d.ts",
            "node_modules/@types/node/child_process.d.ts",
            "node_modules/@types/node/zlib.d.ts",
            "node_modules/@types/node/module.d.ts",
            "node_modules/@types/node/sqlite.d.ts",
            "node_modules/@types/node/process.d.ts",
            "node_modules/@types/node/util.d.ts",
            "node_modules/@types/node/dns/promises.d.ts",
            "node_modules/@types/node/fs/promises.d.ts",
            "node_modules/@types/node/net.d.ts",
            "node_modules/@types/babel__core/index.d.ts",
            "node_modules/@types/react/ts5.0/index.d.ts",
            "node_modules/@types/react/index.d.ts",
            "node_modules/@types/q/index.d.ts",
            "node_modules/@types/json-schema/index.d.ts",
            "node_modules/csstype/index.d.ts",
            "node_modules/tempy/node_modules/type-fest/source/package-json.d.ts",
            "node_modules/tempy/node_modules/type-fest/source/tsconfig-json.d.ts",
            "node_modules/type-fest/source/package-json.d.ts",
            "node_modules/type-fest/source/tsconfig-json.d.ts",
            "node_modules/commander/typings/index.d.ts",
            "node_modules/xterm/typings/xterm.d.ts",
            "node_modules/xterm/src/browser/renderer/shared/TextureAtlas.ts",
            "node_modules/xterm/src/browser/renderer/shared/CustomGlyphs.ts",
            "node_modules/xterm/src/browser/renderer/dom/DomRendererRowFactory.ts",
            "node_modules/xterm/src/browser/renderer/dom/DomRenderer.ts",
            "node_modules/xterm/src/browser/Terminal.ts",
            "node_modules/xterm/src/browser/services/SelectionService.ts",
            "node_modules/xterm/src/common/InputHandler.ts",
            "node_modules/xterm/src/common/Types.d.ts",
            "node_modules/xterm/src/common/parser/EscapeSequenceParser.ts",
            "node_modules/xterm/src/common/buffer/Buffer.ts",
            "node_modules/xterm/src/common/buffer/BufferLine.ts",
            "node_modules/decimal.js-light/decimal.d.ts",
            "node_modules/acorn/dist/acorn.d.ts",
            "node_modules/axe-core/axe.d.ts",
            "node_modules/typescript/lib/lib.es2015.core.d.ts",
            "node_modules/typescript/lib/lib.es5.d.ts",
            "node_modules/typescript/lib/typescriptServices.d.ts",
            "node_modules/typescript/lib/lib.dom.d.ts",
            "node_modules/typescript/lib/lib.es2020.bigint.d.ts",
            "node_modules/typescript/lib/protocol.d.ts",
            "node_modules/typescript/lib/lib.webworker.d.ts",
            "node_modules/typescript/lib/tsserverlibrary.d.ts",
            "node_modules/typescript/lib/typescript.d.ts",
            "node_modules/socket.io-client/build/esm-debug/socket.d.ts",
            "node_modules/socket.io-client/build/esm/socket.d.ts",
            "node_modules/socket.io-client/build/cjs/socket.d.ts",
            "node_modules/date-fns/typings.d.ts",
            "node_modules/postcss/lib/node.d.ts",
            "node_modules/@rollup/pluginutils/node_modules/@types/estree/index.d.ts",
            "node_modules/@typescript-eslint/types/dist/generated/ast-spec.d.ts",
            "node_modules/@typescript-eslint/types/_ts3.4/dist/generated/ast-spec.d.ts",
            "node_modules/@typescript-eslint/utils/dist/ast-utils/helpers.d.ts",
            "node_modules/@typescript-eslint/utils/_ts3.4/dist/ast-utils/helpers.d.ts",
            "node_modules/@remix-run/router/history.ts",
            "node_modules/@remix-run/router/router.ts",
            "node_modules/@remix-run/router/dist/utils.d.ts",
            "node_modules/@remix-run/router/dist/router.d.ts",
            "node_modules/@remix-run/router/utils.ts",
            "node_modules/big-integer/BigInteger.d.ts",
            "node_modules/xterm-addon-search/src/SearchAddon.ts",
            "node_modules/enhanced-resolve/types.d.ts",
            "node_modules/postcss-modules-local-by-default/node_modules/postcss-selector-parser/postcss-selector-parser.d.ts",
            "node_modules/saxes/saxes.d.ts",
            "node_modules/postcss-svgo/node_modules/commander/typings/index.d.ts",
            "../../total",
            "node_modules/@mui/icons-material/index.d.ts",
            "../../total",
            "node_modules/@mui/material/styles/components.d.ts",
            "node_modules/webpack/types.d.ts",
            "node_modules/resolve-url-loader/node_modules/postcss/lib/postcss.d.ts",
            "node_modules/workbox-build/build/types.d.ts",
            "node_modules/workbox-build/src/types.ts",
            "node_modules/webpack-dev-server/types/bin/cli-flags.d.ts",
            "node_modules/webpack-dev-server/types/lib/Server.d.ts",
            "node_modules/postcss-modules-scope/node_modules/postcss-selector-parser/postcss-selector-parser.d.ts",
            "node_modules/@babel/types/lib/index-legacy.d.ts",
            "node_modules/@babel/types/lib/index.d.ts",
            "node_modules/postcss-selector-parser/postcss-selector-parser.d.ts",
            "node_modules/rollup/dist/rollup.d.ts",
            "node_modules/ansi-escapes/node_modules/type-fest/source/package-json.d.ts",
            "node_modules/ansi-escapes/node_modules/type-fest/source/tsconfig-json.d.ts",
            "node_modules/minipass/dist/esm/index.d.ts",
            "node_modules/minipass/dist/commonjs/index.d.ts",
            "node_modules/execa/index.d.ts",
            "node_modules/@jridgewell/trace-mapping/src/trace-mapping.ts",
            "node_modules/@jridgewell/gen-mapping/src/gen-mapping.ts",
            "node_modules/workbox-window/src/Workbox.ts",
            "node_modules/recharts/types/util/types.d.ts",
            "node_modules/axios/index.d.ts",
            "node_modules/monaco-editor/monaco.d.ts",
            "node_modules/monaco-editor/esm/vs/editor/editor.api.d.ts",
            "node_modules/ajv/lib/core.ts",
            "node_modules/ajv/lib/compile/validate/index.ts",
            "node_modules/ajv/lib/compile/codegen/index.ts",
            "node_modules/@eslint-community/regexpp/index.d.ts",
            "node_modules/jest-watch-typeahead/node_modules/@types/yargs/index.d.ts",
            "node_modules/jest-watch-typeahead/node_modules/@jest/types/build/index.d.ts",
            "node_modules/jest-watch-typeahead/node_modules/emittery/index.d.ts",
            "node_modules/path-scurry/dist/esm/index.d.ts",
            "node_modules/path-scurry/dist/commonjs/index.d.ts",
            "node_modules/path-scurry/node_modules/lru-cache/dist/esm/index.d.ts",
            "node_modules/path-scurry/node_modules/lru-cache/dist/commonjs/index.d.ts",
            "../../total"
          ],
          "duplicateCode": false,
          "missingTests": []
        },
        "optimizations": [
          {
            "type": "parallel-execution",
            "description": "Use batch file operations for faster processing",
            "impact": "high",
            "timeEstimate": "5 minutes",
            "howTo": "Use MultiEdit and batch Read operations in single message"
          },
          {
            "type": "refactor-complex",
            "description": "Refactor 147 complex files",
            "impact": "medium",
            "timeEstimate": "1 hour",
            "howTo": "Use Task(\"code-analyzer\", \"Refactor large files\") with Task(\"coder\", \"Implement refactoring\")"
          },
          {
            "type": "commit-changes",
            "description": "Commit pending changes",
            "impact": "low",
            "timeEstimate": "2 minutes",
            "howTo": "Use git commit workflow with proper message format"
          },
          {
            "type": "complete-todos",
            "description": "Complete 5193 TODOs",
            "impact": "medium",
            "timeEstimate": "51930 minutes",
            "howTo": "Use Grep(\"TODO|FIXME\") then Task(\"coder\", \"Complete all TODOs\")"
          }
        ],
        "newFeatures": [
          {
            "feature": "cicd-engineer agent",
            "benefit": "Automatically set up GitHub Actions CI/CD",
            "command": "Task(\"cicd-engineer\", \"Create GitHub Actions workflow\")"
          },
          {
            "feature": "api-docs agent",
            "benefit": "Generate OpenAPI documentation",
            "command": "Task(\"api-docs\", \"Generate API documentation\")"
          },
          {
            "feature": "swarm coordination",
            "benefit": "Use multiple agents in parallel for 2.8x speedup",
            "command": "Launch multiple Task() agents concurrently"
          }
        ],
        "timeToComplete": 51938
      },
      {
        "path": "/Users/Danallovertheplace/pachacuti/shell-viewer/backend",
        "name": "pachacuti-shell-viewer-backend",
        "type": "node",
        "language": "javascript",
        "lastModified": "2025-08-26T18:06:14.000Z",
        "status": "uncommitted-changes",
        "todoCount": 692,
        "issues": [
          "Has uncommitted changes",
          "692 TODOs/FIXMEs found"
        ],
        "metrics": {
          "fileCount": 5863,
          "totalLines": 0,
          "testCoverage": "unknown",
          "complexFiles": [
            "node_modules/@types/babel__traverse/index.d.ts",
            "node_modules/@types/yargs/index.d.ts",
            "node_modules/@types/node/diagnostics_channel.d.ts",
            "node_modules/@types/node/tls.d.ts",
            "node_modules/@types/node/readline.d.ts",
            "node_modules/@types/node/crypto.d.ts",
            "node_modules/@types/node/events.d.ts",
            "node_modules/@types/node/buffer.d.ts",
            "node_modules/@types/node/worker_threads.d.ts",
            "node_modules/@types/node/async_hooks.d.ts",
            "node_modules/@types/node/stream/web.d.ts",
            "node_modules/@types/node/dns.d.ts",
            "node_modules/@types/node/vm.d.ts",
            "node_modules/@types/node/test.d.ts",
            "node_modules/@types/node/http.d.ts",
            "node_modules/@types/node/http2.d.ts",
            "node_modules/@types/node/stream.d.ts",
            "node_modules/@types/node/inspector.d.ts",
            "node_modules/@types/node/v8.d.ts",
            "node_modules/@types/node/perf_hooks.d.ts",
            "node_modules/@types/node/url.d.ts",
            "node_modules/@types/node/cluster.d.ts",
            "node_modules/@types/node/https.d.ts",
            "node_modules/@types/node/assert.d.ts",
            "node_modules/@types/node/fs.d.ts",
            "node_modules/@types/node/dgram.d.ts",
            "node_modules/@types/node/child_process.d.ts",
            "node_modules/@types/node/zlib.d.ts",
            "node_modules/@types/node/module.d.ts",
            "node_modules/@types/node/sqlite.d.ts",
            "node_modules/@types/node/process.d.ts",
            "node_modules/@types/node/util.d.ts",
            "node_modules/@types/node/dns/promises.d.ts",
            "node_modules/@types/node/fs/promises.d.ts",
            "node_modules/@types/node/net.d.ts",
            "node_modules/@types/babel__core/index.d.ts",
            "node_modules/web-streams-polyfill/types/ponyfill.d.ts",
            "node_modules/@jest/types/build/index.d.ts",
            "node_modules/type-fest/source/package-json.d.ts",
            "node_modules/type-fest/source/tsconfig-json.d.ts",
            "node_modules/ip-address/src/ipv6.ts",
            "node_modules/moment/moment.d.ts",
            "node_modules/moment/ts3.1-typings/moment.d.ts",
            "node_modules/emittery/index.d.ts",
            "node_modules/smart-buffer/typings/smartbuffer.d.ts",
            "node_modules/fecha/src/fecha.ts",
            "node_modules/socket.io/dist/socket.d.ts",
            "node_modules/socket.io/dist/index.d.ts",
            "node_modules/@sinclair/typebox/typebox.d.ts",
            "node_modules/@babel/types/lib/index-legacy.d.ts",
            "node_modules/@babel/types/lib/index.d.ts",
            "node_modules/@supabase/auth-js/dist/module/GoTrueClient.d.ts",
            "node_modules/@supabase/auth-js/dist/module/lib/types.d.ts",
            "node_modules/@supabase/auth-js/dist/main/GoTrueClient.d.ts",
            "node_modules/@supabase/auth-js/dist/main/lib/types.d.ts",
            "node_modules/@supabase/auth-js/src/lib/types.ts",
            "node_modules/@supabase/auth-js/src/GoTrueClient.ts",
            "node_modules/@supabase/realtime-js/src/RealtimeClient.ts",
            "node_modules/@supabase/realtime-js/src/RealtimeChannel.ts",
            "node_modules/@supabase/storage-js/src/packages/StorageFileApi.ts",
            "node_modules/@supabase/postgrest-js/src/PostgrestFilterBuilder.ts",
            "node_modules/@supabase/postgrest-js/src/select-query-parser/utils.ts",
            "node_modules/@supabase/postgrest-js/src/select-query-parser/result.ts",
            "node_modules/execa/index.d.ts",
            "node_modules/@jridgewell/trace-mapping/src/trace-mapping.ts",
            "node_modules/@jridgewell/gen-mapping/src/gen-mapping.ts",
            "node_modules/openai/resources/beta/realtime/realtime.d.ts",
            "node_modules/openai/resources/beta/realtime/sessions.d.ts",
            "node_modules/openai/resources/beta/threads/messages.d.ts",
            "node_modules/openai/resources/beta/threads/threads.d.ts",
            "node_modules/openai/resources/beta/threads/runs/steps.d.ts",
            "node_modules/openai/resources/beta/threads/runs/runs.d.ts",
            "node_modules/openai/resources/beta/assistants.d.ts",
            "node_modules/openai/resources/evals/evals.d.ts",
            "node_modules/openai/resources/evals/runs/runs.d.ts",
            "node_modules/openai/resources/chat/completions/completions.d.ts",
            "node_modules/openai/resources/responses/responses.d.ts",
            "node_modules/openai/resources/fine-tuning/jobs/jobs.d.ts",
            "node_modules/openai/node_modules/@types/node/diagnostics_channel.d.ts",
            "node_modules/openai/node_modules/@types/node/tls.d.ts",
            "node_modules/openai/node_modules/@types/node/readline.d.ts",
            "node_modules/openai/node_modules/@types/node/crypto.d.ts",
            "node_modules/openai/node_modules/@types/node/events.d.ts",
            "node_modules/openai/node_modules/@types/node/buffer.d.ts",
            "node_modules/openai/node_modules/@types/node/worker_threads.d.ts",
            "node_modules/openai/node_modules/@types/node/async_hooks.d.ts",
            "node_modules/openai/node_modules/@types/node/stream/web.d.ts",
            "node_modules/openai/node_modules/@types/node/dns.d.ts",
            "node_modules/openai/node_modules/@types/node/vm.d.ts",
            "node_modules/openai/node_modules/@types/node/test.d.ts",
            "node_modules/openai/node_modules/@types/node/http.d.ts",
            "node_modules/openai/node_modules/@types/node/http2.d.ts",
            "node_modules/openai/node_modules/@types/node/stream.d.ts",
            "node_modules/openai/node_modules/@types/node/inspector.d.ts",
            "node_modules/openai/node_modules/@types/node/v8.d.ts",
            "node_modules/openai/node_modules/@types/node/perf_hooks.d.ts",
            "node_modules/openai/node_modules/@types/node/url.d.ts",
            "node_modules/openai/node_modules/@types/node/cluster.d.ts",
            "node_modules/openai/node_modules/@types/node/https.d.ts",
            "node_modules/openai/node_modules/@types/node/assert.d.ts",
            "node_modules/openai/node_modules/@types/node/fs.d.ts",
            "node_modules/openai/node_modules/@types/node/dgram.d.ts",
            "node_modules/openai/node_modules/@types/node/child_process.d.ts",
            "node_modules/openai/node_modules/@types/node/zlib.d.ts",
            "node_modules/openai/node_modules/@types/node/module.d.ts",
            "node_modules/openai/node_modules/@types/node/process.d.ts",
            "node_modules/openai/node_modules/@types/node/util.d.ts",
            "node_modules/openai/node_modules/@types/node/fs/promises.d.ts",
            "node_modules/openai/node_modules/@types/node/net.d.ts",
            "node_modules/openai/src/resources/beta/realtime/realtime.ts",
            "node_modules/openai/src/resources/beta/realtime/sessions.ts",
            "node_modules/openai/src/resources/beta/threads/messages.ts",
            "node_modules/openai/src/resources/beta/threads/threads.ts",
            "node_modules/openai/src/resources/beta/threads/runs/runs.ts",
            "node_modules/openai/src/resources/beta/threads/runs/steps.ts",
            "node_modules/openai/src/resources/beta/assistants.ts",
            "node_modules/openai/src/resources/evals/evals.ts",
            "node_modules/openai/src/resources/evals/runs/runs.ts",
            "node_modules/openai/src/resources/chat/completions/completions.ts",
            "node_modules/openai/src/resources/responses/responses.ts",
            "node_modules/openai/src/resources/fine-tuning/jobs/jobs.ts",
            "node_modules/openai/src/resources/vector-stores/vector-stores.ts",
            "node_modules/openai/src/core.ts",
            "node_modules/openai/src/lib/AbstractChatCompletionRunner.ts",
            "node_modules/openai/src/lib/AssistantStream.ts",
            "node_modules/openai/src/lib/ChatCompletionStream.ts",
            "node_modules/openai/src/index.ts",
            "../../total"
          ],
          "duplicateCode": false,
          "missingTests": []
        },
        "optimizations": [
          {
            "type": "parallel-execution",
            "description": "Use batch file operations for faster processing",
            "impact": "high",
            "timeEstimate": "5 minutes",
            "howTo": "Use MultiEdit and batch Read operations in single message"
          },
          {
            "type": "refactor-complex",
            "description": "Refactor 128 complex files",
            "impact": "medium",
            "timeEstimate": "1 hour",
            "howTo": "Use Task(\"code-analyzer\", \"Refactor large files\") with Task(\"coder\", \"Implement refactoring\")"
          },
          {
            "type": "commit-changes",
            "description": "Commit pending changes",
            "impact": "low",
            "timeEstimate": "2 minutes",
            "howTo": "Use git commit workflow with proper message format"
          },
          {
            "type": "complete-todos",
            "description": "Complete 692 TODOs",
            "impact": "medium",
            "timeEstimate": "6920 minutes",
            "howTo": "Use Grep(\"TODO|FIXME\") then Task(\"coder\", \"Complete all TODOs\")"
          }
        ],
        "newFeatures": [
          {
            "feature": "cicd-engineer agent",
            "benefit": "Automatically set up GitHub Actions CI/CD",
            "command": "Task(\"cicd-engineer\", \"Create GitHub Actions workflow\")"
          },
          {
            "feature": "api-docs agent",
            "benefit": "Generate OpenAPI documentation",
            "command": "Task(\"api-docs\", \"Generate API documentation\")"
          },
          {
            "feature": "swarm coordination",
            "benefit": "Use multiple agents in parallel for 2.8x speedup",
            "command": "Launch multiple Task() agents concurrently"
          }
        ],
        "timeToComplete": 6928
      },
      {
        "path": "/Users/Danallovertheplace/pachacuti/node_modules/pend",
        "name": "pend",
        "type": "node",
        "language": "javascript",
        "lastModified": "2025-08-26T18:06:14.000Z",
        "status": "uncommitted-changes",
        "todoCount": 0,
        "issues": [
          "Has uncommitted changes"
        ],
        "metrics": {
          "fileCount": 2,
          "totalLines": 0,
          "testCoverage": "unknown",
          "complexFiles": [],
          "duplicateCode": false,
          "missingTests": [
            "No test files found"
          ]
        },
        "optimizations": [
          {
            "type": "add-tests",
            "description": "Add test coverage with TDD agents",
            "impact": "high",
            "timeEstimate": "30 minutes",
            "howTo": "Use Task(\"tester\", \"Generate comprehensive test suite\")"
          },
          {
            "type": "commit-changes",
            "description": "Commit pending changes",
            "impact": "low",
            "timeEstimate": "2 minutes",
            "howTo": "Use git commit workflow with proper message format"
          }
        ],
        "newFeatures": [
          {
            "feature": "cicd-engineer agent",
            "benefit": "Automatically set up GitHub Actions CI/CD",
            "command": "Task(\"cicd-engineer\", \"Create GitHub Actions workflow\")"
          },
          {
            "feature": "api-docs agent",
            "benefit": "Generate OpenAPI documentation",
            "command": "Task(\"api-docs\", \"Generate API documentation\")"
          }
        ],
        "timeToComplete": 32
      },
      {
        "path": "/Users/Danallovertheplace/pachacuti/node_modules/fd-slicer",
        "name": "fd-slicer",
        "type": "node",
        "language": "javascript",
        "lastModified": "2025-08-26T18:06:14.000Z",
        "status": "uncommitted-changes",
        "todoCount": 0,
        "issues": [
          "Has uncommitted changes"
        ],
        "metrics": {
          "fileCount": 2,
          "totalLines": 0,
          "testCoverage": "unknown",
          "complexFiles": [],
          "duplicateCode": false,
          "missingTests": [
            "No test files found"
          ]
        },
        "optimizations": [
          {
            "type": "add-tests",
            "description": "Add test coverage with TDD agents",
            "impact": "high",
            "timeEstimate": "30 minutes",
            "howTo": "Use Task(\"tester\", \"Generate comprehensive test suite\")"
          },
          {
            "type": "commit-changes",
            "description": "Commit pending changes",
            "impact": "low",
            "timeEstimate": "2 minutes",
            "howTo": "Use git commit workflow with proper message format"
          }
        ],
        "newFeatures": [
          {
            "feature": "cicd-engineer agent",
            "benefit": "Automatically set up GitHub Actions CI/CD",
            "command": "Task(\"cicd-engineer\", \"Create GitHub Actions workflow\")"
          },
          {
            "feature": "api-docs agent",
            "benefit": "Generate OpenAPI documentation",
            "command": "Task(\"api-docs\", \"Generate API documentation\")"
          }
        ],
        "timeToComplete": 32
      },
      {
        "path": "/Users/Danallovertheplace/pachacuti/node_modules/callsites",
        "name": "callsites",
        "type": "node",
        "language": "javascript",
        "lastModified": "2025-08-26T18:06:14.000Z",
        "status": "uncommitted-changes",
        "todoCount": 2,
        "issues": [
          "Has uncommitted changes",
          "2 TODOs/FIXMEs found"
        ],
        "metrics": {
          "fileCount": 2,
          "totalLines": 0,
          "testCoverage": "unknown",
          "complexFiles": [],
          "duplicateCode": false,
          "missingTests": [
            "No test files found"
          ]
        },
        "optimizations": [
          {
            "type": "add-tests",
            "description": "Add test coverage with TDD agents",
            "impact": "high",
            "timeEstimate": "30 minutes",
            "howTo": "Use Task(\"tester\", \"Generate comprehensive test suite\")"
          },
          {
            "type": "commit-changes",
            "description": "Commit pending changes",
            "impact": "low",
            "timeEstimate": "2 minutes",
            "howTo": "Use git commit workflow with proper message format"
          },
          {
            "type": "complete-todos",
            "description": "Complete 2 TODOs",
            "impact": "medium",
            "timeEstimate": "20 minutes",
            "howTo": "Use Grep(\"TODO|FIXME\") then Task(\"coder\", \"Complete all TODOs\")"
          }
        ],
        "newFeatures": [
          {
            "feature": "cicd-engineer agent",
            "benefit": "Automatically set up GitHub Actions CI/CD",
            "command": "Task(\"cicd-engineer\", \"Create GitHub Actions workflow\")"
          },
          {
            "feature": "api-docs agent",
            "benefit": "Generate OpenAPI documentation",
            "command": "Task(\"api-docs\", \"Generate API documentation\")"
          }
        ],
        "timeToComplete": 52
      },
      {
        "path": "/Users/Danallovertheplace/pachacuti/node_modules/zod",
        "name": "zod",
        "type": "node",
        "language": "javascript",
        "lastModified": "2025-08-26T18:06:14.000Z",
        "status": "uncommitted-changes",
        "todoCount": 1,
        "issues": [
          "Has uncommitted changes",
          "1 TODOs/FIXMEs found"
        ],
        "metrics": {
          "fileCount": 417,
          "totalLines": 0,
          "testCoverage": "unknown",
          "complexFiles": [
            "v4/core/schemas.d.ts",
            "v4/classic/schemas.d.ts",
            "v3/types.d.ts",
            "src/v4/core/schemas.ts",
            "src/v4/core/api.ts",
            "src/v4/core/to-json-schema.ts",
            "src/v4/core/checks.ts",
            "src/v4/core/util.ts",
            "src/v4/mini/tests/index.test.ts",
            "src/v4/mini/schemas.ts",
            "src/v4/classic/tests/template-literal.test.ts",
            "src/v4/classic/tests/index.test.ts",
            "src/v4/classic/tests/error-utils.test.ts",
            "src/v4/classic/tests/string.test.ts",
            "src/v4/classic/tests/discriminated-unions.test.ts",
            "src/v4/classic/tests/to-json-schema.test.ts",
            "src/v4/classic/tests/refine.test.ts",
            "src/v4/classic/tests/error.test.ts",
            "src/v4/classic/tests/object.test.ts",
            "src/v4/classic/schemas.ts",
            "src/v3/tests/string.test.ts",
            "src/v3/tests/error.test.ts",
            "src/v3/types.ts",
            "../../total"
          ],
          "duplicateCode": false,
          "missingTests": []
        },
        "optimizations": [
          {
            "type": "parallel-execution",
            "description": "Use batch file operations for faster processing",
            "impact": "high",
            "timeEstimate": "5 minutes",
            "howTo": "Use MultiEdit and batch Read operations in single message"
          },
          {
            "type": "refactor-complex",
            "description": "Refactor 24 complex files",
            "impact": "medium",
            "timeEstimate": "1 hour",
            "howTo": "Use Task(\"code-analyzer\", \"Refactor large files\") with Task(\"coder\", \"Implement refactoring\")"
          },
          {
            "type": "commit-changes",
            "description": "Commit pending changes",
            "impact": "low",
            "timeEstimate": "2 minutes",
            "howTo": "Use git commit workflow with proper message format"
          },
          {
            "type": "complete-todos",
            "description": "Complete 1 TODOs",
            "impact": "medium",
            "timeEstimate": "10 minutes",
            "howTo": "Use Grep(\"TODO|FIXME\") then Task(\"coder\", \"Complete all TODOs\")"
          }
        ],
        "newFeatures": [
          {
            "feature": "cicd-engineer agent",
            "benefit": "Automatically set up GitHub Actions CI/CD",
            "command": "Task(\"cicd-engineer\", \"Create GitHub Actions workflow\")"
          },
          {
            "feature": "api-docs agent",
            "benefit": "Generate OpenAPI documentation",
            "command": "Task(\"api-docs\", \"Generate API documentation\")"
          },
          {
            "feature": "swarm coordination",
            "benefit": "Use multiple agents in parallel for 2.8x speedup",
            "command": "Launch multiple Task() agents concurrently"
          }
        ],
        "timeToComplete": 18
      },
      {
        "path": "/Users/Danallovertheplace/pachacuti/node_modules/json-parse-even-better-errors",
        "name": "json-parse-even-better-errors",
        "type": "node",
        "language": "javascript",
        "lastModified": "2025-08-26T18:06:14.000Z",
        "status": "uncommitted-changes",
        "todoCount": 0,
        "issues": [
          "Has uncommitted changes"
        ],
        "metrics": {
          "fileCount": 1,
          "totalLines": 0,
          "testCoverage": "unknown",
          "complexFiles": [],
          "duplicateCode": false,
          "missingTests": [
            "No test files found"
          ]
        },
        "optimizations": [
          {
            "type": "add-tests",
            "description": "Add test coverage with TDD agents",
            "impact": "high",
            "timeEstimate": "30 minutes",
            "howTo": "Use Task(\"tester\", \"Generate comprehensive test suite\")"
          },
          {
            "type": "commit-changes",
            "description": "Commit pending changes",
            "impact": "low",
            "timeEstimate": "2 minutes",
            "howTo": "Use git commit workflow with proper message format"
          }
        ],
        "newFeatures": [
          {
            "feature": "cicd-engineer agent",
            "benefit": "Automatically set up GitHub Actions CI/CD",
            "command": "Task(\"cicd-engineer\", \"Create GitHub Actions workflow\")"
          },
          {
            "feature": "api-docs agent",
            "benefit": "Generate OpenAPI documentation",
            "command": "Task(\"api-docs\", \"Generate API documentation\")"
          }
        ],
        "timeToComplete": 32
      },
      {
        "path": "/Users/Danallovertheplace/pachacuti/node_modules/typed-query-selector",
        "name": "typed-query-selector",
        "type": "node",
        "language": "javascript",
        "lastModified": "2025-08-26T18:06:14.000Z",
        "status": "uncommitted-changes",
        "todoCount": 0,
        "issues": [
          "Has uncommitted changes"
        ],
        "metrics": {
          "fileCount": 3,
          "totalLines": 0,
          "testCoverage": "unknown",
          "complexFiles": [],
          "duplicateCode": false,
          "missingTests": [
            "No test files found"
          ]
        },
        "optimizations": [
          {
            "type": "add-tests",
            "description": "Add test coverage with TDD agents",
            "impact": "high",
            "timeEstimate": "30 minutes",
            "howTo": "Use Task(\"tester\", \"Generate comprehensive test suite\")"
          },
          {
            "type": "commit-changes",
            "description": "Commit pending changes",
            "impact": "low",
            "timeEstimate": "2 minutes",
            "howTo": "Use git commit workflow with proper message format"
          }
        ],
        "newFeatures": [
          {
            "feature": "cicd-engineer agent",
            "benefit": "Automatically set up GitHub Actions CI/CD",
            "command": "Task(\"cicd-engineer\", \"Create GitHub Actions workflow\")"
          },
          {
            "feature": "api-docs agent",
            "benefit": "Generate OpenAPI documentation",
            "command": "Task(\"api-docs\", \"Generate API documentation\")"
          }
        ],
        "timeToComplete": 32
      },
      {
        "path": "/Users/Danallovertheplace/pachacuti/node_modules/strip-ansi",
        "name": "strip-ansi",
        "type": "node",
        "language": "javascript",
        "lastModified": "2025-08-26T18:06:14.000Z",
        "status": "uncommitted-changes",
        "todoCount": 0,
        "issues": [
          "Has uncommitted changes"
        ],
        "metrics": {
          "fileCount": 2,
          "totalLines": 0,
          "testCoverage": "unknown",
          "complexFiles": [],
          "duplicateCode": false,
          "missingTests": [
            "No test files found"
          ]
        },
        "optimizations": [
          {
            "type": "add-tests",
            "description": "Add test coverage with TDD agents",
            "impact": "high",
            "timeEstimate": "30 minutes",
            "howTo": "Use Task(\"tester\", \"Generate comprehensive test suite\")"
          },
          {
            "type": "commit-changes",
            "description": "Commit pending changes",
            "impact": "low",
            "timeEstimate": "2 minutes",
            "howTo": "Use git commit workflow with proper message format"
          }
        ],
        "newFeatures": [
          {
            "feature": "cicd-engineer agent",
            "benefit": "Automatically set up GitHub Actions CI/CD",
            "command": "Task(\"cicd-engineer\", \"Create GitHub Actions workflow\")"
          },
          {
            "feature": "api-docs agent",
            "benefit": "Generate OpenAPI documentation",
            "command": "Task(\"api-docs\", \"Generate API documentation\")"
          }
        ],
        "timeToComplete": 32
      },
      {
        "path": "/Users/Danallovertheplace/pachacuti/node_modules/proxy-agent",
        "name": "proxy-agent",
        "type": "node",
        "language": "javascript",
        "lastModified": "2025-08-26T18:06:14.000Z",
        "status": "uncommitted-changes",
        "todoCount": 0,
        "issues": [
          "Has uncommitted changes"
        ],
        "metrics": {
          "fileCount": 2,
          "totalLines": 0,
          "testCoverage": "unknown",
          "complexFiles": [],
          "duplicateCode": false,
          "missingTests": [
            "No test files found"
          ]
        },
        "optimizations": [
          {
            "type": "add-tests",
            "description": "Add test coverage with TDD agents",
            "impact": "high",
            "timeEstimate": "30 minutes",
            "howTo": "Use Task(\"tester\", \"Generate comprehensive test suite\")"
          },
          {
            "type": "commit-changes",
            "description": "Commit pending changes",
            "impact": "low",
            "timeEstimate": "2 minutes",
            "howTo": "Use git commit workflow with proper message format"
          }
        ],
        "newFeatures": [
          {
            "feature": "cicd-engineer agent",
            "benefit": "Automatically set up GitHub Actions CI/CD",
            "command": "Task(\"cicd-engineer\", \"Create GitHub Actions workflow\")"
          },
          {
            "feature": "api-docs agent",
            "benefit": "Generate OpenAPI documentation",
            "command": "Task(\"api-docs\", \"Generate API documentation\")"
          }
        ],
        "timeToComplete": 32
      },
      {
        "path": "/Users/Danallovertheplace/pachacuti/node_modules/agent-base",
        "name": "agent-base",
        "type": "node",
        "language": "javascript",
        "lastModified": "2025-08-26T18:06:14.000Z",
        "status": "uncommitted-changes",
        "todoCount": 0,
        "issues": [
          "Has uncommitted changes"
        ],
        "metrics": {
          "fileCount": 4,
          "totalLines": 0,
          "testCoverage": "unknown",
          "complexFiles": [],
          "duplicateCode": false,
          "missingTests": [
            "No test files found"
          ]
        },
        "optimizations": [
          {
            "type": "add-tests",
            "description": "Add test coverage with TDD agents",
            "impact": "high",
            "timeEstimate": "30 minutes",
            "howTo": "Use Task(\"tester\", \"Generate comprehensive test suite\")"
          },
          {
            "type": "commit-changes",
            "description": "Commit pending changes",
            "impact": "low",
            "timeEstimate": "2 minutes",
            "howTo": "Use git commit workflow with proper message format"
          }
        ],
        "newFeatures": [
          {
            "feature": "cicd-engineer agent",
            "benefit": "Automatically set up GitHub Actions CI/CD",
            "command": "Task(\"cicd-engineer\", \"Create GitHub Actions workflow\")"
          },
          {
            "feature": "api-docs agent",
            "benefit": "Generate OpenAPI documentation",
            "command": "Task(\"api-docs\", \"Generate API documentation\")"
          }
        ],
        "timeToComplete": 32
      },
      {
        "path": "/Users/Danallovertheplace/pachacuti/node_modules/text-decoder",
        "name": "text-decoder",
        "type": "node",
        "language": "javascript",
        "lastModified": "2025-08-26T18:06:14.000Z",
        "status": "uncommitted-changes",
        "todoCount": 0,
        "issues": [
          "Has uncommitted changes"
        ],
        "metrics": {
          "fileCount": 4,
          "totalLines": 0,
          "testCoverage": "unknown",
          "complexFiles": [],
          "duplicateCode": false,
          "missingTests": [
            "No test files found"
          ]
        },
        "optimizations": [
          {
            "type": "add-tests",
            "description": "Add test coverage with TDD agents",
            "impact": "high",
            "timeEstimate": "30 minutes",
            "howTo": "Use Task(\"tester\", \"Generate comprehensive test suite\")"
          },
          {
            "type": "commit-changes",
            "description": "Commit pending changes",
            "impact": "low",
            "timeEstimate": "2 minutes",
            "howTo": "Use git commit workflow with proper message format"
          }
        ],
        "newFeatures": [
          {
            "feature": "cicd-engineer agent",
            "benefit": "Automatically set up GitHub Actions CI/CD",
            "command": "Task(\"cicd-engineer\", \"Create GitHub Actions workflow\")"
          },
          {
            "feature": "api-docs agent",
            "benefit": "Generate OpenAPI documentation",
            "command": "Task(\"api-docs\", \"Generate API documentation\")"
          }
        ],
        "timeToComplete": 32
      },
      {
        "path": "/Users/Danallovertheplace/pachacuti/node_modules/ms",
        "name": "ms",
        "type": "node",
        "language": "javascript",
        "lastModified": "2025-08-26T18:06:14.000Z",
        "status": "uncommitted-changes",
        "todoCount": 0,
        "issues": [
          "Has uncommitted changes"
        ],
        "metrics": {
          "fileCount": 1,
          "totalLines": 0,
          "testCoverage": "unknown",
          "complexFiles": [],
          "duplicateCode": false,
          "missingTests": [
            "No test files found"
          ]
        },
        "optimizations": [
          {
            "type": "add-tests",
            "description": "Add test coverage with TDD agents",
            "impact": "high",
            "timeEstimate": "30 minutes",
            "howTo": "Use Task(\"tester\", \"Generate comprehensive test suite\")"
          },
          {
            "type": "commit-changes",
            "description": "Commit pending changes",
            "impact": "low",
            "timeEstimate": "2 minutes",
            "howTo": "Use git commit workflow with proper message format"
          }
        ],
        "newFeatures": [
          {
            "feature": "cicd-engineer agent",
            "benefit": "Automatically set up GitHub Actions CI/CD",
            "command": "Task(\"cicd-engineer\", \"Create GitHub Actions workflow\")"
          },
          {
            "feature": "api-docs agent",
            "benefit": "Generate OpenAPI documentation",
            "command": "Task(\"api-docs\", \"Generate API documentation\")"
          }
        ],
        "timeToComplete": 32
      },
      {
        "path": "/Users/Danallovertheplace/pachacuti/node_modules/dotenv",
        "name": "dotenv",
        "type": "node",
        "language": "javascript",
        "lastModified": "2025-08-26T18:06:14.000Z",
        "status": "uncommitted-changes",
        "todoCount": 0,
        "issues": [
          "Has uncommitted changes"
        ],
        "metrics": {
          "fileCount": 6,
          "totalLines": 0,
          "testCoverage": "unknown",
          "complexFiles": [],
          "duplicateCode": false,
          "missingTests": [
            "No test files found"
          ]
        },
        "optimizations": [
          {
            "type": "add-tests",
            "description": "Add test coverage with TDD agents",
            "impact": "high",
            "timeEstimate": "30 minutes",
            "howTo": "Use Task(\"tester\", \"Generate comprehensive test suite\")"
          },
          {
            "type": "commit-changes",
            "description": "Commit pending changes",
            "impact": "low",
            "timeEstimate": "2 minutes",
            "howTo": "Use git commit workflow with proper message format"
          }
        ],
        "newFeatures": [
          {
            "feature": "cicd-engineer agent",
            "benefit": "Automatically set up GitHub Actions CI/CD",
            "command": "Task(\"cicd-engineer\", \"Create GitHub Actions workflow\")"
          },
          {
            "feature": "api-docs agent",
            "benefit": "Generate OpenAPI documentation",
            "command": "Task(\"api-docs\", \"Generate API documentation\")"
          }
        ],
        "timeToComplete": 32
      },
      {
        "path": "/Users/Danallovertheplace/pachacuti/node_modules/lru-cache",
        "name": "lru-cache",
        "type": "node",
        "language": "javascript",
        "lastModified": "2025-08-26T18:06:14.000Z",
        "status": "uncommitted-changes",
        "todoCount": 0,
        "issues": [
          "Has uncommitted changes"
        ],
        "metrics": {
          "fileCount": 2,
          "totalLines": 0,
          "testCoverage": "unknown",
          "complexFiles": [
            "index.d.ts"
          ],
          "duplicateCode": false,
          "missingTests": [
            "No test files found"
          ]
        },
        "optimizations": [
          {
            "type": "add-tests",
            "description": "Add test coverage with TDD agents",
            "impact": "high",
            "timeEstimate": "30 minutes",
            "howTo": "Use Task(\"tester\", \"Generate comprehensive test suite\")"
          },
          {
            "type": "refactor-complex",
            "description": "Refactor 1 complex files",
            "impact": "medium",
            "timeEstimate": "1 hour",
            "howTo": "Use Task(\"code-analyzer\", \"Refactor large files\") with Task(\"coder\", \"Implement refactoring\")"
          },
          {
            "type": "commit-changes",
            "description": "Commit pending changes",
            "impact": "low",
            "timeEstimate": "2 minutes",
            "howTo": "Use git commit workflow with proper message format"
          }
        ],
        "newFeatures": [
          {
            "feature": "cicd-engineer agent",
            "benefit": "Automatically set up GitHub Actions CI/CD",
            "command": "Task(\"cicd-engineer\", \"Create GitHub Actions workflow\")"
          },
          {
            "feature": "api-docs agent",
            "benefit": "Generate OpenAPI documentation",
            "command": "Task(\"api-docs\", \"Generate API documentation\")"
          }
        ],
        "timeToComplete": 33
      },
      {
        "path": "/Users/Danallovertheplace/pachacuti/node_modules/require-directory",
        "name": "require-directory",
        "type": "node",
        "language": "javascript",
        "lastModified": "2025-08-26T18:06:14.000Z",
        "status": "uncommitted-changes",
        "todoCount": 0,
        "issues": [
          "Has uncommitted changes"
        ],
        "metrics": {
          "fileCount": 1,
          "totalLines": 0,
          "testCoverage": "unknown",
          "complexFiles": [],
          "duplicateCode": false,
          "missingTests": [
            "No test files found"
          ]
        },
        "optimizations": [
          {
            "type": "add-tests",
            "description": "Add test coverage with TDD agents",
            "impact": "high",
            "timeEstimate": "30 minutes",
            "howTo": "Use Task(\"tester\", \"Generate comprehensive test suite\")"
          },
          {
            "type": "commit-changes",
            "description": "Commit pending changes",
            "impact": "low",
            "timeEstimate": "2 minutes",
            "howTo": "Use git commit workflow with proper message format"
          }
        ],
        "newFeatures": [
          {
            "feature": "cicd-engineer agent",
            "benefit": "Automatically set up GitHub Actions CI/CD",
            "command": "Task(\"cicd-engineer\", \"Create GitHub Actions workflow\")"
          },
          {
            "feature": "api-docs agent",
            "benefit": "Generate OpenAPI documentation",
            "command": "Task(\"api-docs\", \"Generate API documentation\")"
          }
        ],
        "timeToComplete": 32
      },
      {
        "path": "/Users/Danallovertheplace/pachacuti/node_modules/escalade",
        "name": "escalade",
        "type": "node",
        "language": "javascript",
        "lastModified": "2025-08-26T18:06:14.000Z",
        "status": "uncommitted-changes",
        "todoCount": 0,
        "issues": [
          "Has uncommitted changes"
        ],
        "metrics": {
          "fileCount": 4,
          "totalLines": 0,
          "testCoverage": "unknown",
          "complexFiles": [],
          "duplicateCode": false,
          "missingTests": [
            "No test files found"
          ]
        },
        "optimizations": [
          {
            "type": "add-tests",
            "description": "Add test coverage with TDD agents",
            "impact": "high",
            "timeEstimate": "30 minutes",
            "howTo": "Use Task(\"tester\", \"Generate comprehensive test suite\")"
          },
          {
            "type": "commit-changes",
            "description": "Commit pending changes",
            "impact": "low",
            "timeEstimate": "2 minutes",
            "howTo": "Use git commit workflow with proper message format"
          }
        ],
        "newFeatures": [
          {
            "feature": "cicd-engineer agent",
            "benefit": "Automatically set up GitHub Actions CI/CD",
            "command": "Task(\"cicd-engineer\", \"Create GitHub Actions workflow\")"
          },
          {
            "feature": "api-docs agent",
            "benefit": "Generate OpenAPI documentation",
            "command": "Task(\"api-docs\", \"Generate API documentation\")"
          }
        ],
        "timeToComplete": 32
      },
      {
        "path": "/Users/Danallovertheplace/pachacuti/node_modules/ip-address",
        "name": "ip-address",
        "type": "node",
        "language": "javascript",
        "lastModified": "2025-08-26T18:06:14.000Z",
        "status": "uncommitted-changes",
        "todoCount": 8,
        "issues": [
          "Has uncommitted changes",
          "8 TODOs/FIXMEs found"
        ],
        "metrics": {
          "fileCount": 27,
          "totalLines": 0,
          "testCoverage": "unknown",
          "complexFiles": [
            "src/ipv6.ts",
            "../../total"
          ],
          "duplicateCode": false,
          "missingTests": [
            "No test files found"
          ]
        },
        "optimizations": [
          {
            "type": "parallel-execution",
            "description": "Use batch file operations for faster processing",
            "impact": "high",
            "timeEstimate": "5 minutes",
            "howTo": "Use MultiEdit and batch Read operations in single message"
          },
          {
            "type": "add-tests",
            "description": "Add test coverage with TDD agents",
            "impact": "high",
            "timeEstimate": "30 minutes",
            "howTo": "Use Task(\"tester\", \"Generate comprehensive test suite\")"
          },
          {
            "type": "refactor-complex",
            "description": "Refactor 2 complex files",
            "impact": "medium",
            "timeEstimate": "1 hour",
            "howTo": "Use Task(\"code-analyzer\", \"Refactor large files\") with Task(\"coder\", \"Implement refactoring\")"
          },
          {
            "type": "commit-changes",
            "description": "Commit pending changes",
            "impact": "low",
            "timeEstimate": "2 minutes",
            "howTo": "Use git commit workflow with proper message format"
          },
          {
            "type": "complete-todos",
            "description": "Complete 8 TODOs",
            "impact": "medium",
            "timeEstimate": "80 minutes",
            "howTo": "Use Grep(\"TODO|FIXME\") then Task(\"coder\", \"Complete all TODOs\")"
          }
        ],
        "newFeatures": [
          {
            "feature": "cicd-engineer agent",
            "benefit": "Automatically set up GitHub Actions CI/CD",
            "command": "Task(\"cicd-engineer\", \"Create GitHub Actions workflow\")"
          },
          {
            "feature": "api-docs agent",
            "benefit": "Generate OpenAPI documentation",
            "command": "Task(\"api-docs\", \"Generate API documentation\")"
          },
          {
            "feature": "swarm coordination",
            "benefit": "Use multiple agents in parallel for 2.8x speedup",
            "command": "Launch multiple Task() agents concurrently"
          }
        ],
        "timeToComplete": 118
      },
      {
        "path": "/Users/Danallovertheplace/pachacuti/node_modules/error-ex",
        "name": "error-ex",
        "type": "node",
        "language": "javascript",
        "lastModified": "2025-08-26T18:06:14.000Z",
        "status": "uncommitted-changes",
        "todoCount": 0,
        "issues": [
          "Has uncommitted changes"
        ],
        "metrics": {
          "fileCount": 1,
          "totalLines": 0,
          "testCoverage": "unknown",
          "complexFiles": [],
          "duplicateCode": false,
          "missingTests": [
            "No test files found"
          ]
        },
        "optimizations": [
          {
            "type": "add-tests",
            "description": "Add test coverage with TDD agents",
            "impact": "high",
            "timeEstimate": "30 minutes",
            "howTo": "Use Task(\"tester\", \"Generate comprehensive test suite\")"
          },
          {
            "type": "commit-changes",
            "description": "Commit pending changes",
            "impact": "low",
            "timeEstimate": "2 minutes",
            "howTo": "Use git commit workflow with proper message format"
          }
        ],
        "newFeatures": [
          {
            "feature": "cicd-engineer agent",
            "benefit": "Automatically set up GitHub Actions CI/CD",
            "command": "Task(\"cicd-engineer\", \"Create GitHub Actions workflow\")"
          },
          {
            "feature": "api-docs agent",
            "benefit": "Generate OpenAPI documentation",
            "command": "Task(\"api-docs\", \"Generate API documentation\")"
          }
        ],
        "timeToComplete": 32
      },
      {
        "path": "/Users/Danallovertheplace/pachacuti/node_modules/progress",
        "name": "progress",
        "type": "node",
        "language": "javascript",
        "lastModified": "2025-08-26T18:06:14.000Z",
        "status": "uncommitted-changes",
        "todoCount": 1,
        "issues": [
          "Has uncommitted changes",
          "1 TODOs/FIXMEs found"
        ],
        "metrics": {
          "fileCount": 2,
          "totalLines": 0,
          "testCoverage": "unknown",
          "complexFiles": [],
          "duplicateCode": false,
          "missingTests": [
            "No test files found"
          ]
        },
        "optimizations": [
          {
            "type": "add-tests",
            "description": "Add test coverage with TDD agents",
            "impact": "high",
            "timeEstimate": "30 minutes",
            "howTo": "Use Task(\"tester\", \"Generate comprehensive test suite\")"
          },
          {
            "type": "commit-changes",
            "description": "Commit pending changes",
            "impact": "low",
            "timeEstimate": "2 minutes",
            "howTo": "Use git commit workflow with proper message format"
          },
          {
            "type": "complete-todos",
            "description": "Complete 1 TODOs",
            "impact": "medium",
            "timeEstimate": "10 minutes",
            "howTo": "Use Grep(\"TODO|FIXME\") then Task(\"coder\", \"Complete all TODOs\")"
          }
        ],
        "newFeatures": [
          {
            "feature": "cicd-engineer agent",
            "benefit": "Automatically set up GitHub Actions CI/CD",
            "command": "Task(\"cicd-engineer\", \"Create GitHub Actions workflow\")"
          },
          {
            "feature": "api-docs agent",
            "benefit": "Generate OpenAPI documentation",
            "command": "Task(\"api-docs\", \"Generate API documentation\")"
          }
        ],
        "timeToComplete": 42
      },
      {
        "path": "/Users/Danallovertheplace/pachacuti/node_modules/puppeteer",
        "name": "puppeteer",
        "type": "node",
        "language": "javascript",
        "lastModified": "2025-08-26T18:06:14.000Z",
        "status": "uncommitted-changes",
        "todoCount": 0,
        "issues": [
          "Has uncommitted changes"
        ],
        "metrics": {
          "fileCount": 21,
          "totalLines": 0,
          "testCoverage": "unknown",
          "complexFiles": [
            "lib/types.d.ts",
            "../../total"
          ],
          "duplicateCode": false,
          "missingTests": [
            "No test files found"
          ]
        },
        "optimizations": [
          {
            "type": "parallel-execution",
            "description": "Use batch file operations for faster processing",
            "impact": "high",
            "timeEstimate": "5 minutes",
            "howTo": "Use MultiEdit and batch Read operations in single message"
          },
          {
            "type": "add-tests",
            "description": "Add test coverage with TDD agents",
            "impact": "high",
            "timeEstimate": "30 minutes",
            "howTo": "Use Task(\"tester\", \"Generate comprehensive test suite\")"
          },
          {
            "type": "refactor-complex",
            "description": "Refactor 2 complex files",
            "impact": "medium",
            "timeEstimate": "1 hour",
            "howTo": "Use Task(\"code-analyzer\", \"Refactor large files\") with Task(\"coder\", \"Implement refactoring\")"
          },
          {
            "type": "commit-changes",
            "description": "Commit pending changes",
            "impact": "low",
            "timeEstimate": "2 minutes",
            "howTo": "Use git commit workflow with proper message format"
          }
        ],
        "newFeatures": [
          {
            "feature": "cicd-engineer agent",
            "benefit": "Automatically set up GitHub Actions CI/CD",
            "command": "Task(\"cicd-engineer\", \"Create GitHub Actions workflow\")"
          },
          {
            "feature": "api-docs agent",
            "benefit": "Generate OpenAPI documentation",
            "command": "Task(\"api-docs\", \"Generate API documentation\")"
          },
          {
            "feature": "swarm coordination",
            "benefit": "Use multiple agents in parallel for 2.8x speedup",
            "command": "Launch multiple Task() agents concurrently"
          }
        ],
        "timeToComplete": 38
      },
      {
        "path": "/Users/Danallovertheplace/pachacuti/node_modules/parse-json",
        "name": "parse-json",
        "type": "node",
        "language": "javascript",
        "lastModified": "2025-08-26T18:06:14.000Z",
        "status": "uncommitted-changes",
        "todoCount": 0,
        "issues": [
          "Has uncommitted changes"
        ],
        "metrics": {
          "fileCount": 1,
          "totalLines": 0,
          "testCoverage": "unknown",
          "complexFiles": [],
          "duplicateCode": false,
          "missingTests": [
            "No test files found"
          ]
        },
        "optimizations": [
          {
            "type": "add-tests",
            "description": "Add test coverage with TDD agents",
            "impact": "high",
            "timeEstimate": "30 minutes",
            "howTo": "Use Task(\"tester\", \"Generate comprehensive test suite\")"
          },
          {
            "type": "commit-changes",
            "description": "Commit pending changes",
            "impact": "low",
            "timeEstimate": "2 minutes",
            "howTo": "Use git commit workflow with proper message format"
          }
        ],
        "newFeatures": [
          {
            "feature": "cicd-engineer agent",
            "benefit": "Automatically set up GitHub Actions CI/CD",
            "command": "Task(\"cicd-engineer\", \"Create GitHub Actions workflow\")"
          },
          {
            "feature": "api-docs agent",
            "benefit": "Generate OpenAPI documentation",
            "command": "Task(\"api-docs\", \"Generate API documentation\")"
          }
        ],
        "timeToComplete": 32
      },
      {
        "path": "/Users/Danallovertheplace/pachacuti/node_modules/buffer-crc32",
        "name": "buffer-crc32",
        "type": "node",
        "language": "javascript",
        "lastModified": "2025-08-26T18:06:14.000Z",
        "status": "uncommitted-changes",
        "todoCount": 0,
        "issues": [
          "Has uncommitted changes"
        ],
        "metrics": {
          "fileCount": 1,
          "totalLines": 0,
          "testCoverage": "unknown",
          "complexFiles": [],
          "duplicateCode": false,
          "missingTests": [
            "No test files found"
          ]
        },
        "optimizations": [
          {
            "type": "add-tests",
            "description": "Add test coverage with TDD agents",
            "impact": "high",
            "timeEstimate": "30 minutes",
            "howTo": "Use Task(\"tester\", \"Generate comprehensive test suite\")"
          },
          {
            "type": "commit-changes",
            "description": "Commit pending changes",
            "impact": "low",
            "timeEstimate": "2 minutes",
            "howTo": "Use git commit workflow with proper message format"
          }
        ],
        "newFeatures": [
          {
            "feature": "cicd-engineer agent",
            "benefit": "Automatically set up GitHub Actions CI/CD",
            "command": "Task(\"cicd-engineer\", \"Create GitHub Actions workflow\")"
          },
          {
            "feature": "api-docs agent",
            "benefit": "Generate OpenAPI documentation",
            "command": "Task(\"api-docs\", \"Generate API documentation\")"
          }
        ],
        "timeToComplete": 32
      },
      {
        "path": "/Users/Danallovertheplace/pachacuti/node_modules/ast-types",
        "name": "ast-types",
        "type": "node",
        "language": "javascript",
        "lastModified": "2025-08-26T18:06:14.000Z",
        "status": "uncommitted-changes",
        "todoCount": 15,
        "issues": [
          "Has uncommitted changes",
          "15 TODOs/FIXMEs found"
        ],
        "metrics": {
          "fileCount": 52,
          "totalLines": 0,
          "testCoverage": "unknown",
          "complexFiles": [
            "gen/builders.d.ts",
            "gen/namedTypes.d.ts",
            "../../total"
          ],
          "duplicateCode": false,
          "missingTests": [
            "No test files found"
          ]
        },
        "optimizations": [
          {
            "type": "parallel-execution",
            "description": "Use batch file operations for faster processing",
            "impact": "high",
            "timeEstimate": "5 minutes",
            "howTo": "Use MultiEdit and batch Read operations in single message"
          },
          {
            "type": "add-tests",
            "description": "Add test coverage with TDD agents",
            "impact": "high",
            "timeEstimate": "30 minutes",
            "howTo": "Use Task(\"tester\", \"Generate comprehensive test suite\")"
          },
          {
            "type": "refactor-complex",
            "description": "Refactor 3 complex files",
            "impact": "medium",
            "timeEstimate": "1 hour",
            "howTo": "Use Task(\"code-analyzer\", \"Refactor large files\") with Task(\"coder\", \"Implement refactoring\")"
          },
          {
            "type": "commit-changes",
            "description": "Commit pending changes",
            "impact": "low",
            "timeEstimate": "2 minutes",
            "howTo": "Use git commit workflow with proper message format"
          },
          {
            "type": "complete-todos",
            "description": "Complete 15 TODOs",
            "impact": "medium",
            "timeEstimate": "150 minutes",
            "howTo": "Use Grep(\"TODO|FIXME\") then Task(\"coder\", \"Complete all TODOs\")"
          }
        ],
        "newFeatures": [
          {
            "feature": "cicd-engineer agent",
            "benefit": "Automatically set up GitHub Actions CI/CD",
            "command": "Task(\"cicd-engineer\", \"Create GitHub Actions workflow\")"
          },
          {
            "feature": "api-docs agent",
            "benefit": "Generate OpenAPI documentation",
            "command": "Task(\"api-docs\", \"Generate API documentation\")"
          },
          {
            "feature": "swarm coordination",
            "benefit": "Use multiple agents in parallel for 2.8x speedup",
            "command": "Launch multiple Task() agents concurrently"
          }
        ],
        "timeToComplete": 188
      },
      {
        "path": "/Users/Danallovertheplace/pachacuti/node_modules/extract-zip",
        "name": "extract-zip",
        "type": "node",
        "language": "javascript",
        "lastModified": "2025-08-26T18:06:14.000Z",
        "status": "uncommitted-changes",
        "todoCount": 0,
        "issues": [
          "Has uncommitted changes"
        ],
        "metrics": {
          "fileCount": 3,
          "totalLines": 0,
          "testCoverage": "unknown",
          "complexFiles": [],
          "duplicateCode": false,
          "missingTests": [
            "No test files found"
          ]
        },
        "optimizations": [
          {
            "type": "add-tests",
            "description": "Add test coverage with TDD agents",
            "impact": "high",
            "timeEstimate": "30 minutes",
            "howTo": "Use Task(\"tester\", \"Generate comprehensive test suite\")"
          },
          {
            "type": "commit-changes",
            "description": "Commit pending changes",
            "impact": "low",
            "timeEstimate": "2 minutes",
            "howTo": "Use git commit workflow with proper message format"
          }
        ],
        "newFeatures": [
          {
            "feature": "cicd-engineer agent",
            "benefit": "Automatically set up GitHub Actions CI/CD",
            "command": "Task(\"cicd-engineer\", \"Create GitHub Actions workflow\")"
          },
          {
            "feature": "api-docs agent",
            "benefit": "Generate OpenAPI documentation",
            "command": "Task(\"api-docs\", \"Generate API documentation\")"
          }
        ],
        "timeToComplete": 32
      },
      {
        "path": "/Users/Danallovertheplace/pachacuti/node_modules/wrap-ansi",
        "name": "wrap-ansi",
        "type": "node",
        "language": "javascript",
        "lastModified": "2025-08-26T18:06:14.000Z",
        "status": "uncommitted-changes",
        "todoCount": 0,
        "issues": [
          "Has uncommitted changes"
        ],
        "metrics": {
          "fileCount": 1,
          "totalLines": 0,
          "testCoverage": "unknown",
          "complexFiles": [],
          "duplicateCode": false,
          "missingTests": [
            "No test files found"
          ]
        },
        "optimizations": [
          {
            "type": "add-tests",
            "description": "Add test coverage with TDD agents",
            "impact": "high",
            "timeEstimate": "30 minutes",
            "howTo": "Use Task(\"tester\", \"Generate comprehensive test suite\")"
          },
          {
            "type": "commit-changes",
            "description": "Commit pending changes",
            "impact": "low",
            "timeEstimate": "2 minutes",
            "howTo": "Use git commit workflow with proper message format"
          }
        ],
        "newFeatures": [
          {
            "feature": "cicd-engineer agent",
            "benefit": "Automatically set up GitHub Actions CI/CD",
            "command": "Task(\"cicd-engineer\", \"Create GitHub Actions workflow\")"
          },
          {
            "feature": "api-docs agent",
            "benefit": "Generate OpenAPI documentation",
            "command": "Task(\"api-docs\", \"Generate API documentation\")"
          }
        ],
        "timeToComplete": 32
      },
      {
        "path": "/Users/Danallovertheplace/pachacuti/node_modules/y18n",
        "name": "y18n",
        "type": "node",
        "language": "javascript",
        "lastModified": "2025-08-26T18:06:14.000Z",
        "status": "uncommitted-changes",
        "todoCount": 0,
        "issues": [
          "Has uncommitted changes"
        ],
        "metrics": {
          "fileCount": 3,
          "totalLines": 0,
          "testCoverage": "unknown",
          "complexFiles": [],
          "duplicateCode": false,
          "missingTests": [
            "No test files found"
          ]
        },
        "optimizations": [
          {
            "type": "add-tests",
            "description": "Add test coverage with TDD agents",
            "impact": "high",
            "timeEstimate": "30 minutes",
            "howTo": "Use Task(\"tester\", \"Generate comprehensive test suite\")"
          },
          {
            "type": "commit-changes",
            "description": "Commit pending changes",
            "impact": "low",
            "timeEstimate": "2 minutes",
            "howTo": "Use git commit workflow with proper message format"
          }
        ],
        "newFeatures": [
          {
            "feature": "cicd-engineer agent",
            "benefit": "Automatically set up GitHub Actions CI/CD",
            "command": "Task(\"cicd-engineer\", \"Create GitHub Actions workflow\")"
          },
          {
            "feature": "api-docs agent",
            "benefit": "Generate OpenAPI documentation",
            "command": "Task(\"api-docs\", \"Generate API documentation\")"
          }
        ],
        "timeToComplete": 32
      },
      {
        "path": "/Users/Danallovertheplace/pachacuti/node_modules/once",
        "name": "once",
        "type": "node",
        "language": "javascript",
        "lastModified": "2025-08-26T18:06:14.000Z",
        "status": "uncommitted-changes",
        "todoCount": 0,
        "issues": [
          "Has uncommitted changes"
        ],
        "metrics": {
          "fileCount": 1,
          "totalLines": 0,
          "testCoverage": "unknown",
          "complexFiles": [],
          "duplicateCode": false,
          "missingTests": [
            "No test files found"
          ]
        },
        "optimizations": [
          {
            "type": "add-tests",
            "description": "Add test coverage with TDD agents",
            "impact": "high",
            "timeEstimate": "30 minutes",
            "howTo": "Use Task(\"tester\", \"Generate comprehensive test suite\")"
          },
          {
            "type": "commit-changes",
            "description": "Commit pending changes",
            "impact": "low",
            "timeEstimate": "2 minutes",
            "howTo": "Use git commit workflow with proper message format"
          }
        ],
        "newFeatures": [
          {
            "feature": "cicd-engineer agent",
            "benefit": "Automatically set up GitHub Actions CI/CD",
            "command": "Task(\"cicd-engineer\", \"Create GitHub Actions workflow\")"
          },
          {
            "feature": "api-docs agent",
            "benefit": "Generate OpenAPI documentation",
            "command": "Task(\"api-docs\", \"Generate API documentation\")"
          }
        ],
        "timeToComplete": 32
      },
      {
        "path": "/Users/Danallovertheplace/pachacuti/node_modules/bare-path",
        "name": "bare-path",
        "type": "node",
        "language": "javascript",
        "lastModified": "2025-08-26T18:06:14.000Z",
        "status": "uncommitted-changes",
        "todoCount": 0,
        "issues": [
          "Has uncommitted changes"
        ],
        "metrics": {
          "fileCount": 5,
          "totalLines": 0,
          "testCoverage": "unknown",
          "complexFiles": [],
          "duplicateCode": false,
          "missingTests": [
            "No test files found"
          ]
        },
        "optimizations": [
          {
            "type": "add-tests",
            "description": "Add test coverage with TDD agents",
            "impact": "high",
            "timeEstimate": "30 minutes",
            "howTo": "Use Task(\"tester\", \"Generate comprehensive test suite\")"
          },
          {
            "type": "commit-changes",
            "description": "Commit pending changes",
            "impact": "low",
            "timeEstimate": "2 minutes",
            "howTo": "Use git commit workflow with proper message format"
          }
        ],
        "newFeatures": [
          {
            "feature": "cicd-engineer agent",
            "benefit": "Automatically set up GitHub Actions CI/CD",
            "command": "Task(\"cicd-engineer\", \"Create GitHub Actions workflow\")"
          },
          {
            "feature": "api-docs agent",
            "benefit": "Generate OpenAPI documentation",
            "command": "Task(\"api-docs\", \"Generate API documentation\")"
          }
        ],
        "timeToComplete": 32
      },
      {
        "path": "/Users/Danallovertheplace/pachacuti/node_modules/proxy-from-env",
        "name": "proxy-from-env",
        "type": "node",
        "language": "javascript",
        "lastModified": "2025-08-26T18:06:14.000Z",
        "status": "uncommitted-changes",
        "todoCount": 1,
        "issues": [
          "Has uncommitted changes",
          "1 TODOs/FIXMEs found"
        ],
        "metrics": {
          "fileCount": 2,
          "totalLines": 0,
          "testCoverage": "unknown",
          "complexFiles": [],
          "duplicateCode": false,
          "missingTests": [
            "No test files found"
          ]
        },
        "optimizations": [
          {
            "type": "add-tests",
            "description": "Add test coverage with TDD agents",
            "impact": "high",
            "timeEstimate": "30 minutes",
            "howTo": "Use Task(\"tester\", \"Generate comprehensive test suite\")"
          },
          {
            "type": "commit-changes",
            "description": "Commit pending changes",
            "impact": "low",
            "timeEstimate": "2 minutes",
            "howTo": "Use git commit workflow with proper message format"
          },
          {
            "type": "complete-todos",
            "description": "Complete 1 TODOs",
            "impact": "medium",
            "timeEstimate": "10 minutes",
            "howTo": "Use Grep(\"TODO|FIXME\") then Task(\"coder\", \"Complete all TODOs\")"
          }
        ],
        "newFeatures": [
          {
            "feature": "cicd-engineer agent",
            "benefit": "Automatically set up GitHub Actions CI/CD",
            "command": "Task(\"cicd-engineer\", \"Create GitHub Actions workflow\")"
          },
          {
            "feature": "api-docs agent",
            "benefit": "Generate OpenAPI documentation",
            "command": "Task(\"api-docs\", \"Generate API documentation\")"
          }
        ],
        "timeToComplete": 42
      },
      {
        "path": "/Users/Danallovertheplace/pachacuti/node_modules/get-uri",
        "name": "get-uri",
        "type": "node",
        "language": "javascript",
        "lastModified": "2025-08-26T18:06:14.000Z",
        "status": "uncommitted-changes",
        "todoCount": 1,
        "issues": [
          "Has uncommitted changes",
          "1 TODOs/FIXMEs found"
        ],
        "metrics": {
          "fileCount": 18,
          "totalLines": 0,
          "testCoverage": "unknown",
          "complexFiles": [],
          "duplicateCode": false,
          "missingTests": [
            "No test files found"
          ]
        },
        "optimizations": [
          {
            "type": "parallel-execution",
            "description": "Use batch file operations for faster processing",
            "impact": "high",
            "timeEstimate": "5 minutes",
            "howTo": "Use MultiEdit and batch Read operations in single message"
          },
          {
            "type": "add-tests",
            "description": "Add test coverage with TDD agents",
            "impact": "high",
            "timeEstimate": "30 minutes",
            "howTo": "Use Task(\"tester\", \"Generate comprehensive test suite\")"
          },
          {
            "type": "commit-changes",
            "description": "Commit pending changes",
            "impact": "low",
            "timeEstimate": "2 minutes",
            "howTo": "Use git commit workflow with proper message format"
          },
          {
            "type": "complete-todos",
            "description": "Complete 1 TODOs",
            "impact": "medium",
            "timeEstimate": "10 minutes",
            "howTo": "Use Grep(\"TODO|FIXME\") then Task(\"coder\", \"Complete all TODOs\")"
          }
        ],
        "newFeatures": [
          {
            "feature": "cicd-engineer agent",
            "benefit": "Automatically set up GitHub Actions CI/CD",
            "command": "Task(\"cicd-engineer\", \"Create GitHub Actions workflow\")"
          },
          {
            "feature": "api-docs agent",
            "benefit": "Generate OpenAPI documentation",
            "command": "Task(\"api-docs\", \"Generate API documentation\")"
          }
        ],
        "timeToComplete": 47
      },
      {
        "path": "/Users/Danallovertheplace/pachacuti/node_modules/tslib",
        "name": "tslib",
        "type": "node",
        "language": "javascript",
        "lastModified": "2025-08-26T18:06:14.000Z",
        "status": "uncommitted-changes",
        "todoCount": 0,
        "issues": [
          "Has uncommitted changes"
        ],
        "metrics": {
          "fileCount": 5,
          "totalLines": 0,
          "testCoverage": "unknown",
          "complexFiles": [],
          "duplicateCode": false,
          "missingTests": [
            "No test files found"
          ]
        },
        "optimizations": [
          {
            "type": "add-tests",
            "description": "Add test coverage with TDD agents",
            "impact": "high",
            "timeEstimate": "30 minutes",
            "howTo": "Use Task(\"tester\", \"Generate comprehensive test suite\")"
          },
          {
            "type": "commit-changes",
            "description": "Commit pending changes",
            "impact": "low",
            "timeEstimate": "2 minutes",
            "howTo": "Use git commit workflow with proper message format"
          }
        ],
        "newFeatures": [
          {
            "feature": "cicd-engineer agent",
            "benefit": "Automatically set up GitHub Actions CI/CD",
            "command": "Task(\"cicd-engineer\", \"Create GitHub Actions workflow\")"
          },
          {
            "feature": "api-docs agent",
            "benefit": "Generate OpenAPI documentation",
            "command": "Task(\"api-docs\", \"Generate API documentation\")"
          }
        ],
        "timeToComplete": 32
      },
      {
        "path": "/Users/Danallovertheplace/pachacuti/node_modules/argparse",
        "name": "argparse",
        "type": "node",
        "language": "javascript",
        "lastModified": "2025-08-26T18:06:14.000Z",
        "status": "uncommitted-changes",
        "todoCount": 0,
        "issues": [
          "Has uncommitted changes"
        ],
        "metrics": {
          "fileCount": 3,
          "totalLines": 0,
          "testCoverage": "unknown",
          "complexFiles": [],
          "duplicateCode": false,
          "missingTests": [
            "No test files found"
          ]
        },
        "optimizations": [
          {
            "type": "add-tests",
            "description": "Add test coverage with TDD agents",
            "impact": "high",
            "timeEstimate": "30 minutes",
            "howTo": "Use Task(\"tester\", \"Generate comprehensive test suite\")"
          },
          {
            "type": "commit-changes",
            "description": "Commit pending changes",
            "impact": "low",
            "timeEstimate": "2 minutes",
            "howTo": "Use git commit workflow with proper message format"
          }
        ],
        "newFeatures": [
          {
            "feature": "cicd-engineer agent",
            "benefit": "Automatically set up GitHub Actions CI/CD",
            "command": "Task(\"cicd-engineer\", \"Create GitHub Actions workflow\")"
          },
          {
            "feature": "api-docs agent",
            "benefit": "Generate OpenAPI documentation",
            "command": "Task(\"api-docs\", \"Generate API documentation\")"
          }
        ],
        "timeToComplete": 32
      },
      {
        "path": "/Users/Danallovertheplace/pachacuti/node_modules/socks-proxy-agent",
        "name": "socks-proxy-agent",
        "type": "node",
        "language": "javascript",
        "lastModified": "2025-08-26T18:06:14.000Z",
        "status": "uncommitted-changes",
        "todoCount": 0,
        "issues": [
          "Has uncommitted changes"
        ],
        "metrics": {
          "fileCount": 2,
          "totalLines": 0,
          "testCoverage": "unknown",
          "complexFiles": [],
          "duplicateCode": false,
          "missingTests": [
            "No test files found"
          ]
        },
        "optimizations": [
          {
            "type": "add-tests",
            "description": "Add test coverage with TDD agents",
            "impact": "high",
            "timeEstimate": "30 minutes",
            "howTo": "Use Task(\"tester\", \"Generate comprehensive test suite\")"
          },
          {
            "type": "commit-changes",
            "description": "Commit pending changes",
            "impact": "low",
            "timeEstimate": "2 minutes",
            "howTo": "Use git commit workflow with proper message format"
          }
        ],
        "newFeatures": [
          {
            "feature": "cicd-engineer agent",
            "benefit": "Automatically set up GitHub Actions CI/CD",
            "command": "Task(\"cicd-engineer\", \"Create GitHub Actions workflow\")"
          },
          {
            "feature": "api-docs agent",
            "benefit": "Generate OpenAPI documentation",
            "command": "Task(\"api-docs\", \"Generate API documentation\")"
          }
        ],
        "timeToComplete": 32
      },
      {
        "path": "/Users/Danallovertheplace/pachacuti/node_modules/is-fullwidth-code-point",
        "name": "is-fullwidth-code-point",
        "type": "node",
        "language": "javascript",
        "lastModified": "2025-08-26T18:06:14.000Z",
        "status": "uncommitted-changes",
        "todoCount": 0,
        "issues": [
          "Has uncommitted changes"
        ],
        "metrics": {
          "fileCount": 2,
          "totalLines": 0,
          "testCoverage": "unknown",
          "complexFiles": [],
          "duplicateCode": false,
          "missingTests": [
            "No test files found"
          ]
        },
        "optimizations": [
          {
            "type": "add-tests",
            "description": "Add test coverage with TDD agents",
            "impact": "high",
            "timeEstimate": "30 minutes",
            "howTo": "Use Task(\"tester\", \"Generate comprehensive test suite\")"
          },
          {
            "type": "commit-changes",
            "description": "Commit pending changes",
            "impact": "low",
            "timeEstimate": "2 minutes",
            "howTo": "Use git commit workflow with proper message format"
          }
        ],
        "newFeatures": [
          {
            "feature": "cicd-engineer agent",
            "benefit": "Automatically set up GitHub Actions CI/CD",
            "command": "Task(\"cicd-engineer\", \"Create GitHub Actions workflow\")"
          },
          {
            "feature": "api-docs agent",
            "benefit": "Generate OpenAPI documentation",
            "command": "Task(\"api-docs\", \"Generate API documentation\")"
          }
        ],
        "timeToComplete": 32
      },
      {
        "path": "/Users/Danallovertheplace/pachacuti/node_modules/env-paths",
        "name": "env-paths",
        "type": "node",
        "language": "javascript",
        "lastModified": "2025-08-26T18:06:14.000Z",
        "status": "uncommitted-changes",
        "todoCount": 2,
        "issues": [
          "Has uncommitted changes",
          "2 TODOs/FIXMEs found"
        ],
        "metrics": {
          "fileCount": 2,
          "totalLines": 0,
          "testCoverage": "unknown",
          "complexFiles": [],
          "duplicateCode": false,
          "missingTests": [
            "No test files found"
          ]
        },
        "optimizations": [
          {
            "type": "add-tests",
            "description": "Add test coverage with TDD agents",
            "impact": "high",
            "timeEstimate": "30 minutes",
            "howTo": "Use Task(\"tester\", \"Generate comprehensive test suite\")"
          },
          {
            "type": "commit-changes",
            "description": "Commit pending changes",
            "impact": "low",
            "timeEstimate": "2 minutes",
            "howTo": "Use git commit workflow with proper message format"
          },
          {
            "type": "complete-todos",
            "description": "Complete 2 TODOs",
            "impact": "medium",
            "timeEstimate": "20 minutes",
            "howTo": "Use Grep(\"TODO|FIXME\") then Task(\"coder\", \"Complete all TODOs\")"
          }
        ],
        "newFeatures": [
          {
            "feature": "cicd-engineer agent",
            "benefit": "Automatically set up GitHub Actions CI/CD",
            "command": "Task(\"cicd-engineer\", \"Create GitHub Actions workflow\")"
          },
          {
            "feature": "api-docs agent",
            "benefit": "Generate OpenAPI documentation",
            "command": "Task(\"api-docs\", \"Generate API documentation\")"
          }
        ],
        "timeToComplete": 52
      },
      {
        "path": "/Users/Danallovertheplace/pachacuti/node_modules/yargs-parser",
        "name": "yargs-parser",
        "type": "node",
        "language": "javascript",
        "lastModified": "2025-08-26T18:06:14.000Z",
        "status": "uncommitted-changes",
        "todoCount": 6,
        "issues": [
          "Has uncommitted changes",
          "6 TODOs/FIXMEs found"
        ],
        "metrics": {
          "fileCount": 6,
          "totalLines": 0,
          "testCoverage": "unknown",
          "complexFiles": [],
          "duplicateCode": false,
          "missingTests": [
            "No test files found"
          ]
        },
        "optimizations": [
          {
            "type": "add-tests",
            "description": "Add test coverage with TDD agents",
            "impact": "high",
            "timeEstimate": "30 minutes",
            "howTo": "Use Task(\"tester\", \"Generate comprehensive test suite\")"
          },
          {
            "type": "commit-changes",
            "description": "Commit pending changes",
            "impact": "low",
            "timeEstimate": "2 minutes",
            "howTo": "Use git commit workflow with proper message format"
          },
          {
            "type": "complete-todos",
            "description": "Complete 6 TODOs",
            "impact": "medium",
            "timeEstimate": "60 minutes",
            "howTo": "Use Grep(\"TODO|FIXME\") then Task(\"coder\", \"Complete all TODOs\")"
          }
        ],
        "newFeatures": [
          {
            "feature": "cicd-engineer agent",
            "benefit": "Automatically set up GitHub Actions CI/CD",
            "command": "Task(\"cicd-engineer\", \"Create GitHub Actions workflow\")"
          },
          {
            "feature": "api-docs agent",
            "benefit": "Generate OpenAPI documentation",
            "command": "Task(\"api-docs\", \"Generate API documentation\")"
          }
        ],
        "timeToComplete": 92
      },
      {
        "path": "/Users/Danallovertheplace/pachacuti/node_modules/color-name",
        "name": "color-name",
        "type": "node",
        "language": "javascript",
        "lastModified": "2025-08-26T18:06:14.000Z",
        "status": "uncommitted-changes",
        "todoCount": 0,
        "issues": [
          "Has uncommitted changes"
        ],
        "metrics": {
          "fileCount": 1,
          "totalLines": 0,
          "testCoverage": "unknown",
          "complexFiles": [],
          "duplicateCode": false,
          "missingTests": [
            "No test files found"
          ]
        },
        "optimizations": [
          {
            "type": "add-tests",
            "description": "Add test coverage with TDD agents",
            "impact": "high",
            "timeEstimate": "30 minutes",
            "howTo": "Use Task(\"tester\", \"Generate comprehensive test suite\")"
          },
          {
            "type": "commit-changes",
            "description": "Commit pending changes",
            "impact": "low",
            "timeEstimate": "2 minutes",
            "howTo": "Use git commit workflow with proper message format"
          }
        ],
        "newFeatures": [
          {
            "feature": "cicd-engineer agent",
            "benefit": "Automatically set up GitHub Actions CI/CD",
            "command": "Task(\"cicd-engineer\", \"Create GitHub Actions workflow\")"
          },
          {
            "feature": "api-docs agent",
            "benefit": "Generate OpenAPI documentation",
            "command": "Task(\"api-docs\", \"Generate API documentation\")"
          }
        ],
        "timeToComplete": 32
      },
      {
        "path": "/Users/Danallovertheplace/pachacuti/node_modules/js-yaml",
        "name": "js-yaml",
        "type": "node",
        "language": "javascript",
        "lastModified": "2025-08-26T18:06:14.000Z",
        "status": "uncommitted-changes",
        "todoCount": 4,
        "issues": [
          "Has uncommitted changes",
          "4 TODOs/FIXMEs found"
        ],
        "metrics": {
          "fileCount": 28,
          "totalLines": 0,
          "testCoverage": "unknown",
          "complexFiles": [],
          "duplicateCode": false,
          "missingTests": [
            "No test files found"
          ]
        },
        "optimizations": [
          {
            "type": "parallel-execution",
            "description": "Use batch file operations for faster processing",
            "impact": "high",
            "timeEstimate": "5 minutes",
            "howTo": "Use MultiEdit and batch Read operations in single message"
          },
          {
            "type": "add-tests",
            "description": "Add test coverage with TDD agents",
            "impact": "high",
            "timeEstimate": "30 minutes",
            "howTo": "Use Task(\"tester\", \"Generate comprehensive test suite\")"
          },
          {
            "type": "commit-changes",
            "description": "Commit pending changes",
            "impact": "low",
            "timeEstimate": "2 minutes",
            "howTo": "Use git commit workflow with proper message format"
          },
          {
            "type": "complete-todos",
            "description": "Complete 4 TODOs",
            "impact": "medium",
            "timeEstimate": "40 minutes",
            "howTo": "Use Grep(\"TODO|FIXME\") then Task(\"coder\", \"Complete all TODOs\")"
          }
        ],
        "newFeatures": [
          {
            "feature": "cicd-engineer agent",
            "benefit": "Automatically set up GitHub Actions CI/CD",
            "command": "Task(\"cicd-engineer\", \"Create GitHub Actions workflow\")"
          },
          {
            "feature": "api-docs agent",
            "benefit": "Generate OpenAPI documentation",
            "command": "Task(\"api-docs\", \"Generate API documentation\")"
          },
          {
            "feature": "swarm coordination",
            "benefit": "Use multiple agents in parallel for 2.8x speedup",
            "command": "Launch multiple Task() agents concurrently"
          }
        ],
        "timeToComplete": 77
      },
      {
        "path": "/Users/Danallovertheplace/pachacuti/node_modules/smart-buffer",
        "name": "smart-buffer",
        "type": "node",
        "language": "javascript",
        "lastModified": "2025-08-26T18:06:14.000Z",
        "status": "uncommitted-changes",
        "todoCount": 0,
        "issues": [
          "Has uncommitted changes"
        ],
        "metrics": {
          "fileCount": 4,
          "totalLines": 0,
          "testCoverage": "unknown",
          "complexFiles": [
            "typings/smartbuffer.d.ts",
            "../../total"
          ],
          "duplicateCode": false,
          "missingTests": [
            "No test files found"
          ]
        },
        "optimizations": [
          {
            "type": "add-tests",
            "description": "Add test coverage with TDD agents",
            "impact": "high",
            "timeEstimate": "30 minutes",
            "howTo": "Use Task(\"tester\", \"Generate comprehensive test suite\")"
          },
          {
            "type": "refactor-complex",
            "description": "Refactor 2 complex files",
            "impact": "medium",
            "timeEstimate": "1 hour",
            "howTo": "Use Task(\"code-analyzer\", \"Refactor large files\") with Task(\"coder\", \"Implement refactoring\")"
          },
          {
            "type": "commit-changes",
            "description": "Commit pending changes",
            "impact": "low",
            "timeEstimate": "2 minutes",
            "howTo": "Use git commit workflow with proper message format"
          }
        ],
        "newFeatures": [
          {
            "feature": "cicd-engineer agent",
            "benefit": "Automatically set up GitHub Actions CI/CD",
            "command": "Task(\"cicd-engineer\", \"Create GitHub Actions workflow\")"
          },
          {
            "feature": "api-docs agent",
            "benefit": "Generate OpenAPI documentation",
            "command": "Task(\"api-docs\", \"Generate API documentation\")"
          }
        ],
        "timeToComplete": 33
      },
      {
        "path": "/Users/Danallovertheplace/pachacuti/node_modules/parent-module",
        "name": "parent-module",
        "type": "node",
        "language": "javascript",
        "lastModified": "2025-08-26T18:06:14.000Z",
        "status": "uncommitted-changes",
        "todoCount": 0,
        "issues": [
          "Has uncommitted changes"
        ],
        "metrics": {
          "fileCount": 1,
          "totalLines": 0,
          "testCoverage": "unknown",
          "complexFiles": [],
          "duplicateCode": false,
          "missingTests": [
            "No test files found"
          ]
        },
        "optimizations": [
          {
            "type": "add-tests",
            "description": "Add test coverage with TDD agents",
            "impact": "high",
            "timeEstimate": "30 minutes",
            "howTo": "Use Task(\"tester\", \"Generate comprehensive test suite\")"
          },
          {
            "type": "commit-changes",
            "description": "Commit pending changes",
            "impact": "low",
            "timeEstimate": "2 minutes",
            "howTo": "Use git commit workflow with proper message format"
          }
        ],
        "newFeatures": [
          {
            "feature": "cicd-engineer agent",
            "benefit": "Automatically set up GitHub Actions CI/CD",
            "command": "Task(\"cicd-engineer\", \"Create GitHub Actions workflow\")"
          },
          {
            "feature": "api-docs agent",
            "benefit": "Generate OpenAPI documentation",
            "command": "Task(\"api-docs\", \"Generate API documentation\")"
          }
        ],
        "timeToComplete": 32
      },
      {
        "path": "/Users/Danallovertheplace/pachacuti/node_modules/devtools-protocol",
        "name": "devtools-protocol",
        "type": "node",
        "language": "javascript",
        "lastModified": "2025-08-26T18:06:14.000Z",
        "status": "uncommitted-changes",
        "todoCount": 17,
        "issues": [
          "Has uncommitted changes",
          "17 TODOs/FIXMEs found"
        ],
        "metrics": {
          "fileCount": 4,
          "totalLines": 0,
          "testCoverage": "unknown",
          "complexFiles": [
            "types/protocol-mapping.d.ts",
            "types/protocol-tests-proxy-api.d.ts",
            "types/protocol.d.ts",
            "types/protocol-proxy-api.d.ts",
            "../../total"
          ],
          "duplicateCode": false,
          "missingTests": [
            "No test files found"
          ]
        },
        "optimizations": [
          {
            "type": "add-tests",
            "description": "Add test coverage with TDD agents",
            "impact": "high",
            "timeEstimate": "30 minutes",
            "howTo": "Use Task(\"tester\", \"Generate comprehensive test suite\")"
          },
          {
            "type": "refactor-complex",
            "description": "Refactor 5 complex files",
            "impact": "medium",
            "timeEstimate": "1 hour",
            "howTo": "Use Task(\"code-analyzer\", \"Refactor large files\") with Task(\"coder\", \"Implement refactoring\")"
          },
          {
            "type": "commit-changes",
            "description": "Commit pending changes",
            "impact": "low",
            "timeEstimate": "2 minutes",
            "howTo": "Use git commit workflow with proper message format"
          },
          {
            "type": "complete-todos",
            "description": "Complete 17 TODOs",
            "impact": "medium",
            "timeEstimate": "170 minutes",
            "howTo": "Use Grep(\"TODO|FIXME\") then Task(\"coder\", \"Complete all TODOs\")"
          }
        ],
        "newFeatures": [
          {
            "feature": "cicd-engineer agent",
            "benefit": "Automatically set up GitHub Actions CI/CD",
            "command": "Task(\"cicd-engineer\", \"Create GitHub Actions workflow\")"
          },
          {
            "feature": "api-docs agent",
            "benefit": "Generate OpenAPI documentation",
            "command": "Task(\"api-docs\", \"Generate API documentation\")"
          }
        ],
        "timeToComplete": 203
      },
      {
        "path": "/Users/Danallovertheplace/pachacuti/node_modules/tar-stream",
        "name": "tar-stream",
        "type": "node",
        "language": "javascript",
        "lastModified": "2025-08-26T18:06:14.000Z",
        "status": "uncommitted-changes",
        "todoCount": 1,
        "issues": [
          "Has uncommitted changes",
          "1 TODOs/FIXMEs found"
        ],
        "metrics": {
          "fileCount": 5,
          "totalLines": 0,
          "testCoverage": "unknown",
          "complexFiles": [],
          "duplicateCode": false,
          "missingTests": [
            "No test files found"
          ]
        },
        "optimizations": [
          {
            "type": "add-tests",
            "description": "Add test coverage with TDD agents",
            "impact": "high",
            "timeEstimate": "30 minutes",
            "howTo": "Use Task(\"tester\", \"Generate comprehensive test suite\")"
          },
          {
            "type": "commit-changes",
            "description": "Commit pending changes",
            "impact": "low",
            "timeEstimate": "2 minutes",
            "howTo": "Use git commit workflow with proper message format"
          },
          {
            "type": "complete-todos",
            "description": "Complete 1 TODOs",
            "impact": "medium",
            "timeEstimate": "10 minutes",
            "howTo": "Use Grep(\"TODO|FIXME\") then Task(\"coder\", \"Complete all TODOs\")"
          }
        ],
        "newFeatures": [
          {
            "feature": "cicd-engineer agent",
            "benefit": "Automatically set up GitHub Actions CI/CD",
            "command": "Task(\"cicd-engineer\", \"Create GitHub Actions workflow\")"
          },
          {
            "feature": "api-docs agent",
            "benefit": "Generate OpenAPI documentation",
            "command": "Task(\"api-docs\", \"Generate API documentation\")"
          }
        ],
        "timeToComplete": 42
      },
      {
        "path": "/Users/Danallovertheplace/pachacuti/node_modules/bare-fs",
        "name": "bare-fs",
        "type": "node",
        "language": "javascript",
        "lastModified": "2025-08-26T18:06:14.000Z",
        "status": "uncommitted-changes",
        "todoCount": 0,
        "issues": [
          "Has uncommitted changes"
        ],
        "metrics": {
          "fileCount": 7,
          "totalLines": 0,
          "testCoverage": "unknown",
          "complexFiles": [
            "index.d.ts",
            "../../total"
          ],
          "duplicateCode": false,
          "missingTests": [
            "No test files found"
          ]
        },
        "optimizations": [
          {
            "type": "add-tests",
            "description": "Add test coverage with TDD agents",
            "impact": "high",
            "timeEstimate": "30 minutes",
            "howTo": "Use Task(\"tester\", \"Generate comprehensive test suite\")"
          },
          {
            "type": "refactor-complex",
            "description": "Refactor 2 complex files",
            "impact": "medium",
            "timeEstimate": "1 hour",
            "howTo": "Use Task(\"code-analyzer\", \"Refactor large files\") with Task(\"coder\", \"Implement refactoring\")"
          },
          {
            "type": "commit-changes",
            "description": "Commit pending changes",
            "impact": "low",
            "timeEstimate": "2 minutes",
            "howTo": "Use git commit workflow with proper message format"
          }
        ],
        "newFeatures": [
          {
            "feature": "cicd-engineer agent",
            "benefit": "Automatically set up GitHub Actions CI/CD",
            "command": "Task(\"cicd-engineer\", \"Create GitHub Actions workflow\")"
          },
          {
            "feature": "api-docs agent",
            "benefit": "Generate OpenAPI documentation",
            "command": "Task(\"api-docs\", \"Generate API documentation\")"
          }
        ],
        "timeToComplete": 33
      },
      {
        "path": "/Users/Danallovertheplace/pachacuti/node_modules/netmask",
        "name": "netmask",
        "type": "node",
        "language": "javascript",
        "lastModified": "2025-08-26T18:06:14.000Z",
        "status": "uncommitted-changes",
        "todoCount": 0,
        "issues": [
          "Has uncommitted changes"
        ],
        "metrics": {
          "fileCount": 2,
          "totalLines": 0,
          "testCoverage": "unknown",
          "complexFiles": [],
          "duplicateCode": false,
          "missingTests": [
            "No test files found"
          ]
        },
        "optimizations": [
          {
            "type": "add-tests",
            "description": "Add test coverage with TDD agents",
            "impact": "high",
            "timeEstimate": "30 minutes",
            "howTo": "Use Task(\"tester\", \"Generate comprehensive test suite\")"
          },
          {
            "type": "commit-changes",
            "description": "Commit pending changes",
            "impact": "low",
            "timeEstimate": "2 minutes",
            "howTo": "Use git commit workflow with proper message format"
          }
        ],
        "newFeatures": [
          {
            "feature": "cicd-engineer agent",
            "benefit": "Automatically set up GitHub Actions CI/CD",
            "command": "Task(\"cicd-engineer\", \"Create GitHub Actions workflow\")"
          },
          {
            "feature": "api-docs agent",
            "benefit": "Generate OpenAPI documentation",
            "command": "Task(\"api-docs\", \"Generate API documentation\")"
          }
        ],
        "timeToComplete": 32
      },
      {
        "path": "/Users/Danallovertheplace/pachacuti/node_modules/undici-types",
        "name": "undici-types",
        "type": "node",
        "language": "javascript",
        "lastModified": "2025-08-26T18:06:14.000Z",
        "status": "uncommitted-changes",
        "todoCount": 17,
        "issues": [
          "Has uncommitted changes",
          "17 TODOs/FIXMEs found"
        ],
        "metrics": {
          "fileCount": 41,
          "totalLines": 0,
          "testCoverage": "unknown",
          "complexFiles": [
            "../../total"
          ],
          "duplicateCode": false,
          "missingTests": [
            "No test files found"
          ]
        },
        "optimizations": [
          {
            "type": "parallel-execution",
            "description": "Use batch file operations for faster processing",
            "impact": "high",
            "timeEstimate": "5 minutes",
            "howTo": "Use MultiEdit and batch Read operations in single message"
          },
          {
            "type": "add-tests",
            "description": "Add test coverage with TDD agents",
            "impact": "high",
            "timeEstimate": "30 minutes",
            "howTo": "Use Task(\"tester\", \"Generate comprehensive test suite\")"
          },
          {
            "type": "refactor-complex",
            "description": "Refactor 1 complex files",
            "impact": "medium",
            "timeEstimate": "1 hour",
            "howTo": "Use Task(\"code-analyzer\", \"Refactor large files\") with Task(\"coder\", \"Implement refactoring\")"
          },
          {
            "type": "commit-changes",
            "description": "Commit pending changes",
            "impact": "low",
            "timeEstimate": "2 minutes",
            "howTo": "Use git commit workflow with proper message format"
          },
          {
            "type": "complete-todos",
            "description": "Complete 17 TODOs",
            "impact": "medium",
            "timeEstimate": "170 minutes",
            "howTo": "Use Grep(\"TODO|FIXME\") then Task(\"coder\", \"Complete all TODOs\")"
          }
        ],
        "newFeatures": [
          {
            "feature": "cicd-engineer agent",
            "benefit": "Automatically set up GitHub Actions CI/CD",
            "command": "Task(\"cicd-engineer\", \"Create GitHub Actions workflow\")"
          },
          {
            "feature": "api-docs agent",
            "benefit": "Generate OpenAPI documentation",
            "command": "Task(\"api-docs\", \"Generate API documentation\")"
          },
          {
            "feature": "swarm coordination",
            "benefit": "Use multiple agents in parallel for 2.8x speedup",
            "command": "Launch multiple Task() agents concurrently"
          }
        ],
        "timeToComplete": 208
      },
      {
        "path": "/Users/Danallovertheplace/pachacuti/node_modules/end-of-stream",
        "name": "end-of-stream",
        "type": "node",
        "language": "javascript",
        "lastModified": "2025-08-26T18:06:14.000Z",
        "status": "uncommitted-changes",
        "todoCount": 0,
        "issues": [
          "Has uncommitted changes"
        ],
        "metrics": {
          "fileCount": 1,
          "totalLines": 0,
          "testCoverage": "unknown",
          "complexFiles": [],
          "duplicateCode": false,
          "missingTests": [
            "No test files found"
          ]
        },
        "optimizations": [
          {
            "type": "add-tests",
            "description": "Add test coverage with TDD agents",
            "impact": "high",
            "timeEstimate": "30 minutes",
            "howTo": "Use Task(\"tester\", \"Generate comprehensive test suite\")"
          },
          {
            "type": "commit-changes",
            "description": "Commit pending changes",
            "impact": "low",
            "timeEstimate": "2 minutes",
            "howTo": "Use git commit workflow with proper message format"
          }
        ],
        "newFeatures": [
          {
            "feature": "cicd-engineer agent",
            "benefit": "Automatically set up GitHub Actions CI/CD",
            "command": "Task(\"cicd-engineer\", \"Create GitHub Actions workflow\")"
          },
          {
            "feature": "api-docs agent",
            "benefit": "Generate OpenAPI documentation",
            "command": "Task(\"api-docs\", \"Generate API documentation\")"
          }
        ],
        "timeToComplete": 32
      },
      {
        "path": "/Users/Danallovertheplace/pachacuti/node_modules/bare-os",
        "name": "bare-os",
        "type": "node",
        "language": "javascript",
        "lastModified": "2025-08-26T18:06:14.000Z",
        "status": "uncommitted-changes",
        "todoCount": 0,
        "issues": [
          "Has uncommitted changes"
        ],
        "metrics": {
          "fileCount": 5,
          "totalLines": 0,
          "testCoverage": "unknown",
          "complexFiles": [],
          "duplicateCode": false,
          "missingTests": [
            "No test files found"
          ]
        },
        "optimizations": [
          {
            "type": "add-tests",
            "description": "Add test coverage with TDD agents",
            "impact": "high",
            "timeEstimate": "30 minutes",
            "howTo": "Use Task(\"tester\", \"Generate comprehensive test suite\")"
          },
          {
            "type": "commit-changes",
            "description": "Commit pending changes",
            "impact": "low",
            "timeEstimate": "2 minutes",
            "howTo": "Use git commit workflow with proper message format"
          }
        ],
        "newFeatures": [
          {
            "feature": "cicd-engineer agent",
            "benefit": "Automatically set up GitHub Actions CI/CD",
            "command": "Task(\"cicd-engineer\", \"Create GitHub Actions workflow\")"
          },
          {
            "feature": "api-docs agent",
            "benefit": "Generate OpenAPI documentation",
            "command": "Task(\"api-docs\", \"Generate API documentation\")"
          }
        ],
        "timeToComplete": 32
      },
      {
        "path": "/Users/Danallovertheplace/pachacuti/node_modules/esutils",
        "name": "esutils",
        "type": "node",
        "language": "javascript",
        "lastModified": "2025-08-26T18:06:14.000Z",
        "status": "uncommitted-changes",
        "todoCount": 0,
        "issues": [
          "Has uncommitted changes"
        ],
        "metrics": {
          "fileCount": 4,
          "totalLines": 0,
          "testCoverage": "unknown",
          "complexFiles": [],
          "duplicateCode": false,
          "missingTests": [
            "No test files found"
          ]
        },
        "optimizations": [
          {
            "type": "add-tests",
            "description": "Add test coverage with TDD agents",
            "impact": "high",
            "timeEstimate": "30 minutes",
            "howTo": "Use Task(\"tester\", \"Generate comprehensive test suite\")"
          },
          {
            "type": "commit-changes",
            "description": "Commit pending changes",
            "impact": "low",
            "timeEstimate": "2 minutes",
            "howTo": "Use git commit workflow with proper message format"
          }
        ],
        "newFeatures": [
          {
            "feature": "cicd-engineer agent",
            "benefit": "Automatically set up GitHub Actions CI/CD",
            "command": "Task(\"cicd-engineer\", \"Create GitHub Actions workflow\")"
          },
          {
            "feature": "api-docs agent",
            "benefit": "Generate OpenAPI documentation",
            "command": "Task(\"api-docs\", \"Generate API documentation\")"
          }
        ],
        "timeToComplete": 32
      },
      {
        "path": "/Users/Danallovertheplace/pachacuti/node_modules/bare-stream",
        "name": "bare-stream",
        "type": "node",
        "language": "javascript",
        "lastModified": "2025-08-26T18:06:14.000Z",
        "status": "uncommitted-changes",
        "todoCount": 0,
        "issues": [
          "Has uncommitted changes"
        ],
        "metrics": {
          "fileCount": 6,
          "totalLines": 0,
          "testCoverage": "unknown",
          "complexFiles": [],
          "duplicateCode": false,
          "missingTests": [
            "No test files found"
          ]
        },
        "optimizations": [
          {
            "type": "add-tests",
            "description": "Add test coverage with TDD agents",
            "impact": "high",
            "timeEstimate": "30 minutes",
            "howTo": "Use Task(\"tester\", \"Generate comprehensive test suite\")"
          },
          {
            "type": "commit-changes",
            "description": "Commit pending changes",
            "impact": "low",
            "timeEstimate": "2 minutes",
            "howTo": "Use git commit workflow with proper message format"
          }
        ],
        "newFeatures": [
          {
            "feature": "cicd-engineer agent",
            "benefit": "Automatically set up GitHub Actions CI/CD",
            "command": "Task(\"cicd-engineer\", \"Create GitHub Actions workflow\")"
          },
          {
            "feature": "api-docs agent",
            "benefit": "Generate OpenAPI documentation",
            "command": "Task(\"api-docs\", \"Generate API documentation\")"
          }
        ],
        "timeToComplete": 32
      },
      {
        "path": "/Users/Danallovertheplace/pachacuti/node_modules/ansi-regex",
        "name": "ansi-regex",
        "type": "node",
        "language": "javascript",
        "lastModified": "2025-08-26T18:06:14.000Z",
        "status": "uncommitted-changes",
        "todoCount": 0,
        "issues": [
          "Has uncommitted changes"
        ],
        "metrics": {
          "fileCount": 2,
          "totalLines": 0,
          "testCoverage": "unknown",
          "complexFiles": [],
          "duplicateCode": false,
          "missingTests": [
            "No test files found"
          ]
        },
        "optimizations": [
          {
            "type": "add-tests",
            "description": "Add test coverage with TDD agents",
            "impact": "high",
            "timeEstimate": "30 minutes",
            "howTo": "Use Task(\"tester\", \"Generate comprehensive test suite\")"
          },
          {
            "type": "commit-changes",
            "description": "Commit pending changes",
            "impact": "low",
            "timeEstimate": "2 minutes",
            "howTo": "Use git commit workflow with proper message format"
          }
        ],
        "newFeatures": [
          {
            "feature": "cicd-engineer agent",
            "benefit": "Automatically set up GitHub Actions CI/CD",
            "command": "Task(\"cicd-engineer\", \"Create GitHub Actions workflow\")"
          },
          {
            "feature": "api-docs agent",
            "benefit": "Generate OpenAPI documentation",
            "command": "Task(\"api-docs\", \"Generate API documentation\")"
          }
        ],
        "timeToComplete": 32
      },
      {
        "path": "/Users/Danallovertheplace/pachacuti/node_modules/esprima",
        "name": "esprima",
        "type": "node",
        "language": "javascript",
        "lastModified": "2025-08-26T18:06:14.000Z",
        "status": "uncommitted-changes",
        "todoCount": 0,
        "issues": [
          "Has uncommitted changes"
        ],
        "metrics": {
          "fileCount": 3,
          "totalLines": 0,
          "testCoverage": "unknown",
          "complexFiles": [],
          "duplicateCode": false,
          "missingTests": [
            "No test files found"
          ]
        },
        "optimizations": [
          {
            "type": "add-tests",
            "description": "Add test coverage with TDD agents",
            "impact": "high",
            "timeEstimate": "30 minutes",
            "howTo": "Use Task(\"tester\", \"Generate comprehensive test suite\")"
          },
          {
            "type": "commit-changes",
            "description": "Commit pending changes",
            "impact": "low",
            "timeEstimate": "2 minutes",
            "howTo": "Use git commit workflow with proper message format"
          }
        ],
        "newFeatures": [
          {
            "feature": "cicd-engineer agent",
            "benefit": "Automatically set up GitHub Actions CI/CD",
            "command": "Task(\"cicd-engineer\", \"Create GitHub Actions workflow\")"
          },
          {
            "feature": "api-docs agent",
            "benefit": "Generate OpenAPI documentation",
            "command": "Task(\"api-docs\", \"Generate API documentation\")"
          }
        ],
        "timeToComplete": 32
      },
      {
        "path": "/Users/Danallovertheplace/pachacuti/node_modules/basic-ftp",
        "name": "basic-ftp",
        "type": "node",
        "language": "javascript",
        "lastModified": "2025-08-26T18:06:14.000Z",
        "status": "uncommitted-changes",
        "todoCount": 2,
        "issues": [
          "Has uncommitted changes",
          "2 TODOs/FIXMEs found"
        ],
        "metrics": {
          "fileCount": 28,
          "totalLines": 0,
          "testCoverage": "unknown",
          "complexFiles": [
            "../../total"
          ],
          "duplicateCode": false,
          "missingTests": [
            "No test files found"
          ]
        },
        "optimizations": [
          {
            "type": "parallel-execution",
            "description": "Use batch file operations for faster processing",
            "impact": "high",
            "timeEstimate": "5 minutes",
            "howTo": "Use MultiEdit and batch Read operations in single message"
          },
          {
            "type": "add-tests",
            "description": "Add test coverage with TDD agents",
            "impact": "high",
            "timeEstimate": "30 minutes",
            "howTo": "Use Task(\"tester\", \"Generate comprehensive test suite\")"
          },
          {
            "type": "refactor-complex",
            "description": "Refactor 1 complex files",
            "impact": "medium",
            "timeEstimate": "1 hour",
            "howTo": "Use Task(\"code-analyzer\", \"Refactor large files\") with Task(\"coder\", \"Implement refactoring\")"
          },
          {
            "type": "commit-changes",
            "description": "Commit pending changes",
            "impact": "low",
            "timeEstimate": "2 minutes",
            "howTo": "Use git commit workflow with proper message format"
          },
          {
            "type": "complete-todos",
            "description": "Complete 2 TODOs",
            "impact": "medium",
            "timeEstimate": "20 minutes",
            "howTo": "Use Grep(\"TODO|FIXME\") then Task(\"coder\", \"Complete all TODOs\")"
          }
        ],
        "newFeatures": [
          {
            "feature": "cicd-engineer agent",
            "benefit": "Automatically set up GitHub Actions CI/CD",
            "command": "Task(\"cicd-engineer\", \"Create GitHub Actions workflow\")"
          },
          {
            "feature": "api-docs agent",
            "benefit": "Generate OpenAPI documentation",
            "command": "Task(\"api-docs\", \"Generate API documentation\")"
          },
          {
            "feature": "swarm coordination",
            "benefit": "Use multiple agents in parallel for 2.8x speedup",
            "command": "Launch multiple Task() agents concurrently"
          }
        ],
        "timeToComplete": 58
      },
      {
        "path": "/Users/Danallovertheplace/pachacuti/node_modules/color-convert",
        "name": "color-convert",
        "type": "node",
        "language": "javascript",
        "lastModified": "2025-08-26T18:06:14.000Z",
        "status": "uncommitted-changes",
        "todoCount": 0,
        "issues": [
          "Has uncommitted changes"
        ],
        "metrics": {
          "fileCount": 3,
          "totalLines": 0,
          "testCoverage": "unknown",
          "complexFiles": [],
          "duplicateCode": false,
          "missingTests": [
            "No test files found"
          ]
        },
        "optimizations": [
          {
            "type": "add-tests",
            "description": "Add test coverage with TDD agents",
            "impact": "high",
            "timeEstimate": "30 minutes",
            "howTo": "Use Task(\"tester\", \"Generate comprehensive test suite\")"
          },
          {
            "type": "commit-changes",
            "description": "Commit pending changes",
            "impact": "low",
            "timeEstimate": "2 minutes",
            "howTo": "Use git commit workflow with proper message format"
          }
        ],
        "newFeatures": [
          {
            "feature": "cicd-engineer agent",
            "benefit": "Automatically set up GitHub Actions CI/CD",
            "command": "Task(\"cicd-engineer\", \"Create GitHub Actions workflow\")"
          },
          {
            "feature": "api-docs agent",
            "benefit": "Generate OpenAPI documentation",
            "command": "Task(\"api-docs\", \"Generate API documentation\")"
          }
        ],
        "timeToComplete": 32
      },
      {
        "path": "/Users/Danallovertheplace/pachacuti/node_modules/get-caller-file",
        "name": "get-caller-file",
        "type": "node",
        "language": "javascript",
        "lastModified": "2025-08-26T18:06:14.000Z",
        "status": "uncommitted-changes",
        "todoCount": 0,
        "issues": [
          "Has uncommitted changes"
        ],
        "metrics": {
          "fileCount": 2,
          "totalLines": 0,
          "testCoverage": "unknown",
          "complexFiles": [],
          "duplicateCode": false,
          "missingTests": [
            "No test files found"
          ]
        },
        "optimizations": [
          {
            "type": "add-tests",
            "description": "Add test coverage with TDD agents",
            "impact": "high",
            "timeEstimate": "30 minutes",
            "howTo": "Use Task(\"tester\", \"Generate comprehensive test suite\")"
          },
          {
            "type": "commit-changes",
            "description": "Commit pending changes",
            "impact": "low",
            "timeEstimate": "2 minutes",
            "howTo": "Use git commit workflow with proper message format"
          }
        ],
        "newFeatures": [
          {
            "feature": "cicd-engineer agent",
            "benefit": "Automatically set up GitHub Actions CI/CD",
            "command": "Task(\"cicd-engineer\", \"Create GitHub Actions workflow\")"
          },
          {
            "feature": "api-docs agent",
            "benefit": "Generate OpenAPI documentation",
            "command": "Task(\"api-docs\", \"Generate API documentation\")"
          }
        ],
        "timeToComplete": 32
      },
      {
        "path": "/Users/Danallovertheplace/pachacuti/node_modules/picocolors",
        "name": "picocolors",
        "type": "node",
        "language": "javascript",
        "lastModified": "2025-08-26T18:06:14.000Z",
        "status": "uncommitted-changes",
        "todoCount": 0,
        "issues": [
          "Has uncommitted changes"
        ],
        "metrics": {
          "fileCount": 4,
          "totalLines": 0,
          "testCoverage": "unknown",
          "complexFiles": [],
          "duplicateCode": false,
          "missingTests": [
            "No test files found"
          ]
        },
        "optimizations": [
          {
            "type": "add-tests",
            "description": "Add test coverage with TDD agents",
            "impact": "high",
            "timeEstimate": "30 minutes",
            "howTo": "Use Task(\"tester\", \"Generate comprehensive test suite\")"
          },
          {
            "type": "commit-changes",
            "description": "Commit pending changes",
            "impact": "low",
            "timeEstimate": "2 minutes",
            "howTo": "Use git commit workflow with proper message format"
          }
        ],
        "newFeatures": [
          {
            "feature": "cicd-engineer agent",
            "benefit": "Automatically set up GitHub Actions CI/CD",
            "command": "Task(\"cicd-engineer\", \"Create GitHub Actions workflow\")"
          },
          {
            "feature": "api-docs agent",
            "benefit": "Generate OpenAPI documentation",
            "command": "Task(\"api-docs\", \"Generate API documentation\")"
          }
        ],
        "timeToComplete": 32
      },
      {
        "path": "/Users/Danallovertheplace/pachacuti/node_modules/lines-and-columns",
        "name": "lines-and-columns",
        "type": "node",
        "language": "javascript",
        "lastModified": "2025-08-26T18:06:14.000Z",
        "status": "uncommitted-changes",
        "todoCount": 0,
        "issues": [
          "Has uncommitted changes"
        ],
        "metrics": {
          "fileCount": 2,
          "totalLines": 0,
          "testCoverage": "unknown",
          "complexFiles": [],
          "duplicateCode": false,
          "missingTests": [
            "No test files found"
          ]
        },
        "optimizations": [
          {
            "type": "add-tests",
            "description": "Add test coverage with TDD agents",
            "impact": "high",
            "timeEstimate": "30 minutes",
            "howTo": "Use Task(\"tester\", \"Generate comprehensive test suite\")"
          },
          {
            "type": "commit-changes",
            "description": "Commit pending changes",
            "impact": "low",
            "timeEstimate": "2 minutes",
            "howTo": "Use git commit workflow with proper message format"
          }
        ],
        "newFeatures": [
          {
            "feature": "cicd-engineer agent",
            "benefit": "Automatically set up GitHub Actions CI/CD",
            "command": "Task(\"cicd-engineer\", \"Create GitHub Actions workflow\")"
          },
          {
            "feature": "api-docs agent",
            "benefit": "Generate OpenAPI documentation",
            "command": "Task(\"api-docs\", \"Generate API documentation\")"
          }
        ],
        "timeToComplete": 32
      },
      {
        "path": "/Users/Danallovertheplace/pachacuti/node_modules/semver",
        "name": "semver",
        "type": "node",
        "language": "javascript",
        "lastModified": "2025-08-26T18:06:14.000Z",
        "status": "uncommitted-changes",
        "todoCount": 1,
        "issues": [
          "Has uncommitted changes",
          "1 TODOs/FIXMEs found"
        ],
        "metrics": {
          "fileCount": 48,
          "totalLines": 0,
          "testCoverage": "unknown",
          "complexFiles": [],
          "duplicateCode": false,
          "missingTests": [
            "No test files found"
          ]
        },
        "optimizations": [
          {
            "type": "parallel-execution",
            "description": "Use batch file operations for faster processing",
            "impact": "high",
            "timeEstimate": "5 minutes",
            "howTo": "Use MultiEdit and batch Read operations in single message"
          },
          {
            "type": "add-tests",
            "description": "Add test coverage with TDD agents",
            "impact": "high",
            "timeEstimate": "30 minutes",
            "howTo": "Use Task(\"tester\", \"Generate comprehensive test suite\")"
          },
          {
            "type": "commit-changes",
            "description": "Commit pending changes",
            "impact": "low",
            "timeEstimate": "2 minutes",
            "howTo": "Use git commit workflow with proper message format"
          },
          {
            "type": "complete-todos",
            "description": "Complete 1 TODOs",
            "impact": "medium",
            "timeEstimate": "10 minutes",
            "howTo": "Use Grep(\"TODO|FIXME\") then Task(\"coder\", \"Complete all TODOs\")"
          }
        ],
        "newFeatures": [
          {
            "feature": "cicd-engineer agent",
            "benefit": "Automatically set up GitHub Actions CI/CD",
            "command": "Task(\"cicd-engineer\", \"Create GitHub Actions workflow\")"
          },
          {
            "feature": "api-docs agent",
            "benefit": "Generate OpenAPI documentation",
            "command": "Task(\"api-docs\", \"Generate API documentation\")"
          },
          {
            "feature": "swarm coordination",
            "benefit": "Use multiple agents in parallel for 2.8x speedup",
            "command": "Launch multiple Task() agents concurrently"
          }
        ],
        "timeToComplete": 47
      },
      {
        "path": "/Users/Danallovertheplace/pachacuti/node_modules/b4a",
        "name": "b4a",
        "type": "node",
        "language": "javascript",
        "lastModified": "2025-08-26T18:06:14.000Z",
        "status": "uncommitted-changes",
        "todoCount": 0,
        "issues": [
          "Has uncommitted changes"
        ],
        "metrics": {
          "fileCount": 7,
          "totalLines": 0,
          "testCoverage": "unknown",
          "complexFiles": [],
          "duplicateCode": false,
          "missingTests": [
            "No test files found"
          ]
        },
        "optimizations": [
          {
            "type": "add-tests",
            "description": "Add test coverage with TDD agents",
            "impact": "high",
            "timeEstimate": "30 minutes",
            "howTo": "Use Task(\"tester\", \"Generate comprehensive test suite\")"
          },
          {
            "type": "commit-changes",
            "description": "Commit pending changes",
            "impact": "low",
            "timeEstimate": "2 minutes",
            "howTo": "Use git commit workflow with proper message format"
          }
        ],
        "newFeatures": [
          {
            "feature": "cicd-engineer agent",
            "benefit": "Automatically set up GitHub Actions CI/CD",
            "command": "Task(\"cicd-engineer\", \"Create GitHub Actions workflow\")"
          },
          {
            "feature": "api-docs agent",
            "benefit": "Generate OpenAPI documentation",
            "command": "Task(\"api-docs\", \"Generate API documentation\")"
          }
        ],
        "timeToComplete": 32
      },
      {
        "path": "/Users/Danallovertheplace/pachacuti/node_modules/chromium-bidi",
        "name": "chromium-bidi",
        "type": "node",
        "language": "javascript",
        "lastModified": "2025-08-26T18:06:14.000Z",
        "status": "uncommitted-changes",
        "todoCount": 154,
        "issues": [
          "Has uncommitted changes",
          "154 TODOs/FIXMEs found"
        ],
        "metrics": {
          "fileCount": 375,
          "totalLines": 0,
          "testCoverage": "unknown",
          "complexFiles": [
            "lib/esm/protocol/generated/webdriver-bidi.d.ts",
            "lib/esm/protocol-parser/generated/webdriver-bidi.d.ts",
            "lib/esm/protocol-parser/generated/webdriver-bidi-bluetooth.d.ts",
            "lib/cjs/protocol/generated/webdriver-bidi.d.ts",
            "lib/cjs/protocol-parser/generated/webdriver-bidi.d.ts",
            "lib/cjs/protocol-parser/generated/webdriver-bidi-bluetooth.d.ts",
            "../../total"
          ],
          "duplicateCode": false,
          "missingTests": [
            "No test files found"
          ]
        },
        "optimizations": [
          {
            "type": "parallel-execution",
            "description": "Use batch file operations for faster processing",
            "impact": "high",
            "timeEstimate": "5 minutes",
            "howTo": "Use MultiEdit and batch Read operations in single message"
          },
          {
            "type": "add-tests",
            "description": "Add test coverage with TDD agents",
            "impact": "high",
            "timeEstimate": "30 minutes",
            "howTo": "Use Task(\"tester\", \"Generate comprehensive test suite\")"
          },
          {
            "type": "refactor-complex",
            "description": "Refactor 7 complex files",
            "impact": "medium",
            "timeEstimate": "1 hour",
            "howTo": "Use Task(\"code-analyzer\", \"Refactor large files\") with Task(\"coder\", \"Implement refactoring\")"
          },
          {
            "type": "commit-changes",
            "description": "Commit pending changes",
            "impact": "low",
            "timeEstimate": "2 minutes",
            "howTo": "Use git commit workflow with proper message format"
          },
          {
            "type": "complete-todos",
            "description": "Complete 154 TODOs",
            "impact": "medium",
            "timeEstimate": "1540 minutes",
            "howTo": "Use Grep(\"TODO|FIXME\") then Task(\"coder\", \"Complete all TODOs\")"
          }
        ],
        "newFeatures": [
          {
            "feature": "cicd-engineer agent",
            "benefit": "Automatically set up GitHub Actions CI/CD",
            "command": "Task(\"cicd-engineer\", \"Create GitHub Actions workflow\")"
          },
          {
            "feature": "api-docs agent",
            "benefit": "Generate OpenAPI documentation",
            "command": "Task(\"api-docs\", \"Generate API documentation\")"
          },
          {
            "feature": "swarm coordination",
            "benefit": "Use multiple agents in parallel for 2.8x speedup",
            "command": "Launch multiple Task() agents concurrently"
          }
        ],
        "timeToComplete": 1578
      },
      {
        "path": "/Users/Danallovertheplace/pachacuti/node_modules/estraverse",
        "name": "estraverse",
        "type": "node",
        "language": "javascript",
        "lastModified": "2025-08-26T18:06:14.000Z",
        "status": "uncommitted-changes",
        "todoCount": 0,
        "issues": [
          "Has uncommitted changes"
        ],
        "metrics": {
          "fileCount": 2,
          "totalLines": 0,
          "testCoverage": "unknown",
          "complexFiles": [],
          "duplicateCode": false,
          "missingTests": [
            "No test files found"
          ]
        },
        "optimizations": [
          {
            "type": "add-tests",
            "description": "Add test coverage with TDD agents",
            "impact": "high",
            "timeEstimate": "30 minutes",
            "howTo": "Use Task(\"tester\", \"Generate comprehensive test suite\")"
          },
          {
            "type": "commit-changes",
            "description": "Commit pending changes",
            "impact": "low",
            "timeEstimate": "2 minutes",
            "howTo": "Use git commit workflow with proper message format"
          }
        ],
        "newFeatures": [
          {
            "feature": "cicd-engineer agent",
            "benefit": "Automatically set up GitHub Actions CI/CD",
            "command": "Task(\"cicd-engineer\", \"Create GitHub Actions workflow\")"
          },
          {
            "feature": "api-docs agent",
            "benefit": "Generate OpenAPI documentation",
            "command": "Task(\"api-docs\", \"Generate API documentation\")"
          }
        ],
        "timeToComplete": 32
      },
      {
        "path": "/Users/Danallovertheplace/pachacuti/node_modules/ansi-styles",
        "name": "ansi-styles",
        "type": "node",
        "language": "javascript",
        "lastModified": "2025-08-26T18:06:14.000Z",
        "status": "uncommitted-changes",
        "todoCount": 0,
        "issues": [
          "Has uncommitted changes"
        ],
        "metrics": {
          "fileCount": 2,
          "totalLines": 0,
          "testCoverage": "unknown",
          "complexFiles": [],
          "duplicateCode": false,
          "missingTests": [
            "No test files found"
          ]
        },
        "optimizations": [
          {
            "type": "add-tests",
            "description": "Add test coverage with TDD agents",
            "impact": "high",
            "timeEstimate": "30 minutes",
            "howTo": "Use Task(\"tester\", \"Generate comprehensive test suite\")"
          },
          {
            "type": "commit-changes",
            "description": "Commit pending changes",
            "impact": "low",
            "timeEstimate": "2 minutes",
            "howTo": "Use git commit workflow with proper message format"
          }
        ],
        "newFeatures": [
          {
            "feature": "cicd-engineer agent",
            "benefit": "Automatically set up GitHub Actions CI/CD",
            "command": "Task(\"cicd-engineer\", \"Create GitHub Actions workflow\")"
          },
          {
            "feature": "api-docs agent",
            "benefit": "Generate OpenAPI documentation",
            "command": "Task(\"api-docs\", \"Generate API documentation\")"
          }
        ],
        "timeToComplete": 32
      },
      {
        "path": "/Users/Danallovertheplace/pachacuti/node_modules/js-tokens",
        "name": "js-tokens",
        "type": "node",
        "language": "javascript",
        "lastModified": "2025-08-26T18:06:14.000Z",
        "status": "uncommitted-changes",
        "todoCount": 0,
        "issues": [
          "Has uncommitted changes"
        ],
        "metrics": {
          "fileCount": 1,
          "totalLines": 0,
          "testCoverage": "unknown",
          "complexFiles": [],
          "duplicateCode": false,
          "missingTests": [
            "No test files found"
          ]
        },
        "optimizations": [
          {
            "type": "add-tests",
            "description": "Add test coverage with TDD agents",
            "impact": "high",
            "timeEstimate": "30 minutes",
            "howTo": "Use Task(\"tester\", \"Generate comprehensive test suite\")"
          },
          {
            "type": "commit-changes",
            "description": "Commit pending changes",
            "impact": "low",
            "timeEstimate": "2 minutes",
            "howTo": "Use git commit workflow with proper message format"
          }
        ],
        "newFeatures": [
          {
            "feature": "cicd-engineer agent",
            "benefit": "Automatically set up GitHub Actions CI/CD",
            "command": "Task(\"cicd-engineer\", \"Create GitHub Actions workflow\")"
          },
          {
            "feature": "api-docs agent",
            "benefit": "Generate OpenAPI documentation",
            "command": "Task(\"api-docs\", \"Generate API documentation\")"
          }
        ],
        "timeToComplete": 32
      },
      {
        "path": "/Users/Danallovertheplace/pachacuti/node_modules/fast-fifo",
        "name": "fast-fifo",
        "type": "node",
        "language": "javascript",
        "lastModified": "2025-08-26T18:06:14.000Z",
        "status": "uncommitted-changes",
        "todoCount": 0,
        "issues": [
          "Has uncommitted changes"
        ],
        "metrics": {
          "fileCount": 2,
          "totalLines": 0,
          "testCoverage": "unknown",
          "complexFiles": [],
          "duplicateCode": false,
          "missingTests": [
            "No test files found"
          ]
        },
        "optimizations": [
          {
            "type": "add-tests",
            "description": "Add test coverage with TDD agents",
            "impact": "high",
            "timeEstimate": "30 minutes",
            "howTo": "Use Task(\"tester\", \"Generate comprehensive test suite\")"
          },
          {
            "type": "commit-changes",
            "description": "Commit pending changes",
            "impact": "low",
            "timeEstimate": "2 minutes",
            "howTo": "Use git commit workflow with proper message format"
          }
        ],
        "newFeatures": [
          {
            "feature": "cicd-engineer agent",
            "benefit": "Automatically set up GitHub Actions CI/CD",
            "command": "Task(\"cicd-engineer\", \"Create GitHub Actions workflow\")"
          },
          {
            "feature": "api-docs agent",
            "benefit": "Generate OpenAPI documentation",
            "command": "Task(\"api-docs\", \"Generate API documentation\")"
          }
        ],
        "timeToComplete": 32
      },
      {
        "path": "/Users/Danallovertheplace/pachacuti/node_modules/pump",
        "name": "pump",
        "type": "node",
        "language": "javascript",
        "lastModified": "2025-08-26T18:06:14.000Z",
        "status": "uncommitted-changes",
        "todoCount": 0,
        "issues": [
          "Has uncommitted changes"
        ],
        "metrics": {
          "fileCount": 3,
          "totalLines": 0,
          "testCoverage": "unknown",
          "complexFiles": [],
          "duplicateCode": false,
          "missingTests": [
            "No test files found"
          ]
        },
        "optimizations": [
          {
            "type": "add-tests",
            "description": "Add test coverage with TDD agents",
            "impact": "high",
            "timeEstimate": "30 minutes",
            "howTo": "Use Task(\"tester\", \"Generate comprehensive test suite\")"
          },
          {
            "type": "commit-changes",
            "description": "Commit pending changes",
            "impact": "low",
            "timeEstimate": "2 minutes",
            "howTo": "Use git commit workflow with proper message format"
          }
        ],
        "newFeatures": [
          {
            "feature": "cicd-engineer agent",
            "benefit": "Automatically set up GitHub Actions CI/CD",
            "command": "Task(\"cicd-engineer\", \"Create GitHub Actions workflow\")"
          },
          {
            "feature": "api-docs agent",
            "benefit": "Generate OpenAPI documentation",
            "command": "Task(\"api-docs\", \"Generate API documentation\")"
          }
        ],
        "timeToComplete": 32
      },
      {
        "path": "/Users/Danallovertheplace/pachacuti/node_modules/get-stream",
        "name": "get-stream",
        "type": "node",
        "language": "javascript",
        "lastModified": "2025-08-26T18:06:14.000Z",
        "status": "uncommitted-changes",
        "todoCount": 2,
        "issues": [
          "Has uncommitted changes",
          "2 TODOs/FIXMEs found"
        ],
        "metrics": {
          "fileCount": 3,
          "totalLines": 0,
          "testCoverage": "unknown",
          "complexFiles": [],
          "duplicateCode": false,
          "missingTests": [
            "No test files found"
          ]
        },
        "optimizations": [
          {
            "type": "add-tests",
            "description": "Add test coverage with TDD agents",
            "impact": "high",
            "timeEstimate": "30 minutes",
            "howTo": "Use Task(\"tester\", \"Generate comprehensive test suite\")"
          },
          {
            "type": "commit-changes",
            "description": "Commit pending changes",
            "impact": "low",
            "timeEstimate": "2 minutes",
            "howTo": "Use git commit workflow with proper message format"
          },
          {
            "type": "complete-todos",
            "description": "Complete 2 TODOs",
            "impact": "medium",
            "timeEstimate": "20 minutes",
            "howTo": "Use Grep(\"TODO|FIXME\") then Task(\"coder\", \"Complete all TODOs\")"
          }
        ],
        "newFeatures": [
          {
            "feature": "cicd-engineer agent",
            "benefit": "Automatically set up GitHub Actions CI/CD",
            "command": "Task(\"cicd-engineer\", \"Create GitHub Actions workflow\")"
          },
          {
            "feature": "api-docs agent",
            "benefit": "Generate OpenAPI documentation",
            "command": "Task(\"api-docs\", \"Generate API documentation\")"
          }
        ],
        "timeToComplete": 52
      },
      {
        "path": "/Users/Danallovertheplace/pachacuti/node_modules/is-arrayish",
        "name": "is-arrayish",
        "type": "node",
        "language": "javascript",
        "lastModified": "2025-08-26T18:06:14.000Z",
        "status": "uncommitted-changes",
        "todoCount": 0,
        "issues": [
          "Has uncommitted changes"
        ],
        "metrics": {
          "fileCount": 1,
          "totalLines": 0,
          "testCoverage": "unknown",
          "complexFiles": [],
          "duplicateCode": false,
          "missingTests": [
            "No test files found"
          ]
        },
        "optimizations": [
          {
            "type": "add-tests",
            "description": "Add test coverage with TDD agents",
            "impact": "high",
            "timeEstimate": "30 minutes",
            "howTo": "Use Task(\"tester\", \"Generate comprehensive test suite\")"
          },
          {
            "type": "commit-changes",
            "description": "Commit pending changes",
            "impact": "low",
            "timeEstimate": "2 minutes",
            "howTo": "Use git commit workflow with proper message format"
          }
        ],
        "newFeatures": [
          {
            "feature": "cicd-engineer agent",
            "benefit": "Automatically set up GitHub Actions CI/CD",
            "command": "Task(\"cicd-engineer\", \"Create GitHub Actions workflow\")"
          },
          {
            "feature": "api-docs agent",
            "benefit": "Generate OpenAPI documentation",
            "command": "Task(\"api-docs\", \"Generate API documentation\")"
          }
        ],
        "timeToComplete": 32
      },
      {
        "path": "/Users/Danallovertheplace/pachacuti/node_modules/cliui",
        "name": "cliui",
        "type": "node",
        "language": "javascript",
        "lastModified": "2025-08-26T18:06:14.000Z",
        "status": "uncommitted-changes",
        "todoCount": 1,
        "issues": [
          "Has uncommitted changes",
          "1 TODOs/FIXMEs found"
        ],
        "metrics": {
          "fileCount": 2,
          "totalLines": 0,
          "testCoverage": "unknown",
          "complexFiles": [],
          "duplicateCode": false,
          "missingTests": [
            "No test files found"
          ]
        },
        "optimizations": [
          {
            "type": "add-tests",
            "description": "Add test coverage with TDD agents",
            "impact": "high",
            "timeEstimate": "30 minutes",
            "howTo": "Use Task(\"tester\", \"Generate comprehensive test suite\")"
          },
          {
            "type": "commit-changes",
            "description": "Commit pending changes",
            "impact": "low",
            "timeEstimate": "2 minutes",
            "howTo": "Use git commit workflow with proper message format"
          },
          {
            "type": "complete-todos",
            "description": "Complete 1 TODOs",
            "impact": "medium",
            "timeEstimate": "10 minutes",
            "howTo": "Use Grep(\"TODO|FIXME\") then Task(\"coder\", \"Complete all TODOs\")"
          }
        ],
        "newFeatures": [
          {
            "feature": "cicd-engineer agent",
            "benefit": "Automatically set up GitHub Actions CI/CD",
            "command": "Task(\"cicd-engineer\", \"Create GitHub Actions workflow\")"
          },
          {
            "feature": "api-docs agent",
            "benefit": "Generate OpenAPI documentation",
            "command": "Task(\"api-docs\", \"Generate API documentation\")"
          }
        ],
        "timeToComplete": 42
      },
      {
        "path": "/Users/Danallovertheplace/pachacuti/node_modules/yargs",
        "name": "yargs",
        "type": "node",
        "language": "javascript",
        "lastModified": "2025-08-26T18:06:14.000Z",
        "status": "uncommitted-changes",
        "todoCount": 0,
        "issues": [
          "Has uncommitted changes"
        ],
        "metrics": {
          "fileCount": 22,
          "totalLines": 0,
          "testCoverage": "unknown",
          "complexFiles": [],
          "duplicateCode": false,
          "missingTests": [
            "No test files found"
          ]
        },
        "optimizations": [
          {
            "type": "parallel-execution",
            "description": "Use batch file operations for faster processing",
            "impact": "high",
            "timeEstimate": "5 minutes",
            "howTo": "Use MultiEdit and batch Read operations in single message"
          },
          {
            "type": "add-tests",
            "description": "Add test coverage with TDD agents",
            "impact": "high",
            "timeEstimate": "30 minutes",
            "howTo": "Use Task(\"tester\", \"Generate comprehensive test suite\")"
          },
          {
            "type": "commit-changes",
            "description": "Commit pending changes",
            "impact": "low",
            "timeEstimate": "2 minutes",
            "howTo": "Use git commit workflow with proper message format"
          }
        ],
        "newFeatures": [
          {
            "feature": "cicd-engineer agent",
            "benefit": "Automatically set up GitHub Actions CI/CD",
            "command": "Task(\"cicd-engineer\", \"Create GitHub Actions workflow\")"
          },
          {
            "feature": "api-docs agent",
            "benefit": "Generate OpenAPI documentation",
            "command": "Task(\"api-docs\", \"Generate API documentation\")"
          },
          {
            "feature": "swarm coordination",
            "benefit": "Use multiple agents in parallel for 2.8x speedup",
            "command": "Launch multiple Task() agents concurrently"
          }
        ],
        "timeToComplete": 37
      },
      {
        "path": "/Users/Danallovertheplace/pachacuti/node_modules/pac-proxy-agent",
        "name": "pac-proxy-agent",
        "type": "node",
        "language": "javascript",
        "lastModified": "2025-08-26T18:06:14.000Z",
        "status": "uncommitted-changes",
        "todoCount": 0,
        "issues": [
          "Has uncommitted changes"
        ],
        "metrics": {
          "fileCount": 2,
          "totalLines": 0,
          "testCoverage": "unknown",
          "complexFiles": [],
          "duplicateCode": false,
          "missingTests": [
            "No test files found"
          ]
        },
        "optimizations": [
          {
            "type": "add-tests",
            "description": "Add test coverage with TDD agents",
            "impact": "high",
            "timeEstimate": "30 minutes",
            "howTo": "Use Task(\"tester\", \"Generate comprehensive test suite\")"
          },
          {
            "type": "commit-changes",
            "description": "Commit pending changes",
            "impact": "low",
            "timeEstimate": "2 minutes",
            "howTo": "Use git commit workflow with proper message format"
          }
        ],
        "newFeatures": [
          {
            "feature": "cicd-engineer agent",
            "benefit": "Automatically set up GitHub Actions CI/CD",
            "command": "Task(\"cicd-engineer\", \"Create GitHub Actions workflow\")"
          },
          {
            "feature": "api-docs agent",
            "benefit": "Generate OpenAPI documentation",
            "command": "Task(\"api-docs\", \"Generate API documentation\")"
          }
        ],
        "timeToComplete": 32
      },
      {
        "path": "/Users/Danallovertheplace/pachacuti/node_modules/tar-fs",
        "name": "tar-fs",
        "type": "node",
        "language": "javascript",
        "lastModified": "2025-08-26T18:06:14.000Z",
        "status": "uncommitted-changes",
        "todoCount": 2,
        "issues": [
          "Has uncommitted changes",
          "2 TODOs/FIXMEs found"
        ],
        "metrics": {
          "fileCount": 1,
          "totalLines": 0,
          "testCoverage": "unknown",
          "complexFiles": [],
          "duplicateCode": false,
          "missingTests": [
            "No test files found"
          ]
        },
        "optimizations": [
          {
            "type": "add-tests",
            "description": "Add test coverage with TDD agents",
            "impact": "high",
            "timeEstimate": "30 minutes",
            "howTo": "Use Task(\"tester\", \"Generate comprehensive test suite\")"
          },
          {
            "type": "commit-changes",
            "description": "Commit pending changes",
            "impact": "low",
            "timeEstimate": "2 minutes",
            "howTo": "Use git commit workflow with proper message format"
          },
          {
            "type": "complete-todos",
            "description": "Complete 2 TODOs",
            "impact": "medium",
            "timeEstimate": "20 minutes",
            "howTo": "Use Grep(\"TODO|FIXME\") then Task(\"coder\", \"Complete all TODOs\")"
          }
        ],
        "newFeatures": [
          {
            "feature": "cicd-engineer agent",
            "benefit": "Automatically set up GitHub Actions CI/CD",
            "command": "Task(\"cicd-engineer\", \"Create GitHub Actions workflow\")"
          },
          {
            "feature": "api-docs agent",
            "benefit": "Generate OpenAPI documentation",
            "command": "Task(\"api-docs\", \"Generate API documentation\")"
          }
        ],
        "timeToComplete": 52
      },
      {
        "path": "/Users/Danallovertheplace/pachacuti/node_modules/socks",
        "name": "socks",
        "type": "node",
        "language": "javascript",
        "lastModified": "2025-08-26T18:06:14.000Z",
        "status": "uncommitted-changes",
        "todoCount": 0,
        "issues": [
          "Has uncommitted changes"
        ],
        "metrics": {
          "fileCount": 12,
          "totalLines": 0,
          "testCoverage": "unknown",
          "complexFiles": [],
          "duplicateCode": false,
          "missingTests": [
            "No test files found"
          ]
        },
        "optimizations": [
          {
            "type": "parallel-execution",
            "description": "Use batch file operations for faster processing",
            "impact": "high",
            "timeEstimate": "5 minutes",
            "howTo": "Use MultiEdit and batch Read operations in single message"
          },
          {
            "type": "add-tests",
            "description": "Add test coverage with TDD agents",
            "impact": "high",
            "timeEstimate": "30 minutes",
            "howTo": "Use Task(\"tester\", \"Generate comprehensive test suite\")"
          },
          {
            "type": "commit-changes",
            "description": "Commit pending changes",
            "impact": "low",
            "timeEstimate": "2 minutes",
            "howTo": "Use git commit workflow with proper message format"
          }
        ],
        "newFeatures": [
          {
            "feature": "cicd-engineer agent",
            "benefit": "Automatically set up GitHub Actions CI/CD",
            "command": "Task(\"cicd-engineer\", \"Create GitHub Actions workflow\")"
          },
          {
            "feature": "api-docs agent",
            "benefit": "Generate OpenAPI documentation",
            "command": "Task(\"api-docs\", \"Generate API documentation\")"
          }
        ],
        "timeToComplete": 37
      },
      {
        "path": "/Users/Danallovertheplace/pachacuti/node_modules/import-fresh",
        "name": "import-fresh",
        "type": "node",
        "language": "javascript",
        "lastModified": "2025-08-26T18:06:14.000Z",
        "status": "uncommitted-changes",
        "todoCount": 0,
        "issues": [
          "Has uncommitted changes"
        ],
        "metrics": {
          "fileCount": 2,
          "totalLines": 0,
          "testCoverage": "unknown",
          "complexFiles": [],
          "duplicateCode": false,
          "missingTests": [
            "No test files found"
          ]
        },
        "optimizations": [
          {
            "type": "add-tests",
            "description": "Add test coverage with TDD agents",
            "impact": "high",
            "timeEstimate": "30 minutes",
            "howTo": "Use Task(\"tester\", \"Generate comprehensive test suite\")"
          },
          {
            "type": "commit-changes",
            "description": "Commit pending changes",
            "impact": "low",
            "timeEstimate": "2 minutes",
            "howTo": "Use git commit workflow with proper message format"
          }
        ],
        "newFeatures": [
          {
            "feature": "cicd-engineer agent",
            "benefit": "Automatically set up GitHub Actions CI/CD",
            "command": "Task(\"cicd-engineer\", \"Create GitHub Actions workflow\")"
          },
          {
            "feature": "api-docs agent",
            "benefit": "Generate OpenAPI documentation",
            "command": "Task(\"api-docs\", \"Generate API documentation\")"
          }
        ],
        "timeToComplete": 32
      },
      {
        "path": "/Users/Danallovertheplace/pachacuti/node_modules/source-map",
        "name": "source-map",
        "type": "node",
        "language": "javascript",
        "lastModified": "2025-08-26T18:06:14.000Z",
        "status": "uncommitted-changes",
        "todoCount": 0,
        "issues": [
          "Has uncommitted changes"
        ],
        "metrics": {
          "fileCount": 15,
          "totalLines": 0,
          "testCoverage": "unknown",
          "complexFiles": [],
          "duplicateCode": false,
          "missingTests": [
            "No test files found"
          ]
        },
        "optimizations": [
          {
            "type": "parallel-execution",
            "description": "Use batch file operations for faster processing",
            "impact": "high",
            "timeEstimate": "5 minutes",
            "howTo": "Use MultiEdit and batch Read operations in single message"
          },
          {
            "type": "add-tests",
            "description": "Add test coverage with TDD agents",
            "impact": "high",
            "timeEstimate": "30 minutes",
            "howTo": "Use Task(\"tester\", \"Generate comprehensive test suite\")"
          },
          {
            "type": "commit-changes",
            "description": "Commit pending changes",
            "impact": "low",
            "timeEstimate": "2 minutes",
            "howTo": "Use git commit workflow with proper message format"
          }
        ],
        "newFeatures": [
          {
            "feature": "cicd-engineer agent",
            "benefit": "Automatically set up GitHub Actions CI/CD",
            "command": "Task(\"cicd-engineer\", \"Create GitHub Actions workflow\")"
          },
          {
            "feature": "api-docs agent",
            "benefit": "Generate OpenAPI documentation",
            "command": "Task(\"api-docs\", \"Generate API documentation\")"
          }
        ],
        "timeToComplete": 37
      },
      {
        "path": "/Users/Danallovertheplace/pachacuti/node_modules/degenerator",
        "name": "degenerator",
        "type": "node",
        "language": "javascript",
        "lastModified": "2025-08-26T18:06:14.000Z",
        "status": "uncommitted-changes",
        "todoCount": 0,
        "issues": [
          "Has uncommitted changes"
        ],
        "metrics": {
          "fileCount": 6,
          "totalLines": 0,
          "testCoverage": "unknown",
          "complexFiles": [],
          "duplicateCode": false,
          "missingTests": [
            "No test files found"
          ]
        },
        "optimizations": [
          {
            "type": "add-tests",
            "description": "Add test coverage with TDD agents",
            "impact": "high",
            "timeEstimate": "30 minutes",
            "howTo": "Use Task(\"tester\", \"Generate comprehensive test suite\")"
          },
          {
            "type": "commit-changes",
            "description": "Commit pending changes",
            "impact": "low",
            "timeEstimate": "2 minutes",
            "howTo": "Use git commit workflow with proper message format"
          }
        ],
        "newFeatures": [
          {
            "feature": "cicd-engineer agent",
            "benefit": "Automatically set up GitHub Actions CI/CD",
            "command": "Task(\"cicd-engineer\", \"Create GitHub Actions workflow\")"
          },
          {
            "feature": "api-docs agent",
            "benefit": "Generate OpenAPI documentation",
            "command": "Task(\"api-docs\", \"Generate API documentation\")"
          }
        ],
        "timeToComplete": 32
      },
      {
        "path": "/Users/Danallovertheplace/pachacuti/node_modules/puppeteer-core",
        "name": "puppeteer-core",
        "type": "node",
        "language": "javascript",
        "lastModified": "2025-08-26T18:06:14.000Z",
        "status": "uncommitted-changes",
        "todoCount": 79,
        "issues": [
          "Has uncommitted changes",
          "79 TODOs/FIXMEs found"
        ],
        "metrics": {
          "fileCount": 850,
          "totalLines": 0,
          "testCoverage": "unknown",
          "complexFiles": [
            "lib/esm/puppeteer/api/ElementHandle.d.ts",
            "lib/esm/puppeteer/api/Frame.d.ts",
            "lib/esm/puppeteer/api/Page.d.ts",
            "lib/types.d.ts",
            "lib/es5-iife/puppeteer-core-browser.d.ts",
            "lib/cjs/puppeteer/api/ElementHandle.d.ts",
            "lib/cjs/puppeteer/api/Frame.d.ts",
            "lib/cjs/puppeteer/api/Page.d.ts",
            "src/cdp/EmulationManager.ts",
            "src/cdp/ExecutionContext.ts",
            "src/cdp/FrameManager.ts",
            "src/cdp/Accessibility.ts",
            "src/cdp/NetworkManager.ts",
            "src/cdp/Input.ts",
            "src/cdp/Page.ts",
            "src/cdp/Coverage.ts",
            "src/bidi/core/BrowsingContext.ts",
            "src/bidi/Frame.ts",
            "src/bidi/Input.ts",
            "src/bidi/Page.ts",
            "src/common/USKeyboardLayout.ts",
            "src/common/Device.ts",
            "src/api/HTTPRequest.ts",
            "src/api/Frame.ts",
            "src/api/Input.ts",
            "src/api/locators/locators.ts",
            "src/api/Browser.ts",
            "src/api/Page.ts",
            "src/api/ElementHandle.ts",
            "src/node/BrowserLauncher.ts",
            "../../total"
          ],
          "duplicateCode": false,
          "missingTests": [
            "No test files found"
          ]
        },
        "optimizations": [
          {
            "type": "parallel-execution",
            "description": "Use batch file operations for faster processing",
            "impact": "high",
            "timeEstimate": "5 minutes",
            "howTo": "Use MultiEdit and batch Read operations in single message"
          },
          {
            "type": "add-tests",
            "description": "Add test coverage with TDD agents",
            "impact": "high",
            "timeEstimate": "30 minutes",
            "howTo": "Use Task(\"tester\", \"Generate comprehensive test suite\")"
          },
          {
            "type": "refactor-complex",
            "description": "Refactor 31 complex files",
            "impact": "medium",
            "timeEstimate": "1 hour",
            "howTo": "Use Task(\"code-analyzer\", \"Refactor large files\") with Task(\"coder\", \"Implement refactoring\")"
          },
          {
            "type": "commit-changes",
            "description": "Commit pending changes",
            "impact": "low",
            "timeEstimate": "2 minutes",
            "howTo": "Use git commit workflow with proper message format"
          },
          {
            "type": "complete-todos",
            "description": "Complete 79 TODOs",
            "impact": "medium",
            "timeEstimate": "790 minutes",
            "howTo": "Use Grep(\"TODO|FIXME\") then Task(\"coder\", \"Complete all TODOs\")"
          }
        ],
        "newFeatures": [
          {
            "feature": "cicd-engineer agent",
            "benefit": "Automatically set up GitHub Actions CI/CD",
            "command": "Task(\"cicd-engineer\", \"Create GitHub Actions workflow\")"
          },
          {
            "feature": "api-docs agent",
            "benefit": "Generate OpenAPI documentation",
            "command": "Task(\"api-docs\", \"Generate API documentation\")"
          },
          {
            "feature": "swarm coordination",
            "benefit": "Use multiple agents in parallel for 2.8x speedup",
            "command": "Launch multiple Task() agents concurrently"
          }
        ],
        "timeToComplete": 828
      },
      {
        "path": "/Users/Danallovertheplace/pachacuti/node_modules/escodegen",
        "name": "escodegen",
        "type": "node",
        "language": "javascript",
        "lastModified": "2025-08-26T18:06:14.000Z",
        "status": "uncommitted-changes",
        "todoCount": 0,
        "issues": [
          "Has uncommitted changes"
        ],
        "metrics": {
          "fileCount": 3,
          "totalLines": 0,
          "testCoverage": "unknown",
          "complexFiles": [],
          "duplicateCode": false,
          "missingTests": [
            "No test files found"
          ]
        },
        "optimizations": [
          {
            "type": "add-tests",
            "description": "Add test coverage with TDD agents",
            "impact": "high",
            "timeEstimate": "30 minutes",
            "howTo": "Use Task(\"tester\", \"Generate comprehensive test suite\")"
          },
          {
            "type": "commit-changes",
            "description": "Commit pending changes",
            "impact": "low",
            "timeEstimate": "2 minutes",
            "howTo": "Use git commit workflow with proper message format"
          }
        ],
        "newFeatures": [
          {
            "feature": "cicd-engineer agent",
            "benefit": "Automatically set up GitHub Actions CI/CD",
            "command": "Task(\"cicd-engineer\", \"Create GitHub Actions workflow\")"
          },
          {
            "feature": "api-docs agent",
            "benefit": "Generate OpenAPI documentation",
            "command": "Task(\"api-docs\", \"Generate API documentation\")"
          }
        ],
        "timeToComplete": 32
      },
      {
        "path": "/Users/Danallovertheplace/pachacuti/node_modules/cosmiconfig",
        "name": "cosmiconfig",
        "type": "node",
        "language": "javascript",
        "lastModified": "2025-08-26T18:06:14.000Z",
        "status": "uncommitted-changes",
        "todoCount": 0,
        "issues": [
          "Has uncommitted changes"
        ],
        "metrics": {
          "fileCount": 28,
          "totalLines": 0,
          "testCoverage": "unknown",
          "complexFiles": [],
          "duplicateCode": false,
          "missingTests": [
            "No test files found"
          ]
        },
        "optimizations": [
          {
            "type": "parallel-execution",
            "description": "Use batch file operations for faster processing",
            "impact": "high",
            "timeEstimate": "5 minutes",
            "howTo": "Use MultiEdit and batch Read operations in single message"
          },
          {
            "type": "add-tests",
            "description": "Add test coverage with TDD agents",
            "impact": "high",
            "timeEstimate": "30 minutes",
            "howTo": "Use Task(\"tester\", \"Generate comprehensive test suite\")"
          },
          {
            "type": "commit-changes",
            "description": "Commit pending changes",
            "impact": "low",
            "timeEstimate": "2 minutes",
            "howTo": "Use git commit workflow with proper message format"
          }
        ],
        "newFeatures": [
          {
            "feature": "cicd-engineer agent",
            "benefit": "Automatically set up GitHub Actions CI/CD",
            "command": "Task(\"cicd-engineer\", \"Create GitHub Actions workflow\")"
          },
          {
            "feature": "api-docs agent",
            "benefit": "Generate OpenAPI documentation",
            "command": "Task(\"api-docs\", \"Generate API documentation\")"
          },
          {
            "feature": "swarm coordination",
            "benefit": "Use multiple agents in parallel for 2.8x speedup",
            "command": "Launch multiple Task() agents concurrently"
          }
        ],
        "timeToComplete": 37
      },
      {
        "path": "/Users/Danallovertheplace/pachacuti/node_modules/https-proxy-agent",
        "name": "https-proxy-agent",
        "type": "node",
        "language": "javascript",
        "lastModified": "2025-08-26T18:06:14.000Z",
        "status": "uncommitted-changes",
        "todoCount": 0,
        "issues": [
          "Has uncommitted changes"
        ],
        "metrics": {
          "fileCount": 4,
          "totalLines": 0,
          "testCoverage": "unknown",
          "complexFiles": [],
          "duplicateCode": false,
          "missingTests": [
            "No test files found"
          ]
        },
        "optimizations": [
          {
            "type": "add-tests",
            "description": "Add test coverage with TDD agents",
            "impact": "high",
            "timeEstimate": "30 minutes",
            "howTo": "Use Task(\"tester\", \"Generate comprehensive test suite\")"
          },
          {
            "type": "commit-changes",
            "description": "Commit pending changes",
            "impact": "low",
            "timeEstimate": "2 minutes",
            "howTo": "Use git commit workflow with proper message format"
          }
        ],
        "newFeatures": [
          {
            "feature": "cicd-engineer agent",
            "benefit": "Automatically set up GitHub Actions CI/CD",
            "command": "Task(\"cicd-engineer\", \"Create GitHub Actions workflow\")"
          },
          {
            "feature": "api-docs agent",
            "benefit": "Generate OpenAPI documentation",
            "command": "Task(\"api-docs\", \"Generate API documentation\")"
          }
        ],
        "timeToComplete": 32
      },
      {
        "path": "/Users/Danallovertheplace/pachacuti/node_modules/string-width",
        "name": "string-width",
        "type": "node",
        "language": "javascript",
        "lastModified": "2025-08-26T18:06:14.000Z",
        "status": "uncommitted-changes",
        "todoCount": 2,
        "issues": [
          "Has uncommitted changes",
          "2 TODOs/FIXMEs found"
        ],
        "metrics": {
          "fileCount": 2,
          "totalLines": 0,
          "testCoverage": "unknown",
          "complexFiles": [],
          "duplicateCode": false,
          "missingTests": [
            "No test files found"
          ]
        },
        "optimizations": [
          {
            "type": "add-tests",
            "description": "Add test coverage with TDD agents",
            "impact": "high",
            "timeEstimate": "30 minutes",
            "howTo": "Use Task(\"tester\", \"Generate comprehensive test suite\")"
          },
          {
            "type": "commit-changes",
            "description": "Commit pending changes",
            "impact": "low",
            "timeEstimate": "2 minutes",
            "howTo": "Use git commit workflow with proper message format"
          },
          {
            "type": "complete-todos",
            "description": "Complete 2 TODOs",
            "impact": "medium",
            "timeEstimate": "20 minutes",
            "howTo": "Use Grep(\"TODO|FIXME\") then Task(\"coder\", \"Complete all TODOs\")"
          }
        ],
        "newFeatures": [
          {
            "feature": "cicd-engineer agent",
            "benefit": "Automatically set up GitHub Actions CI/CD",
            "command": "Task(\"cicd-engineer\", \"Create GitHub Actions workflow\")"
          },
          {
            "feature": "api-docs agent",
            "benefit": "Generate OpenAPI documentation",
            "command": "Task(\"api-docs\", \"Generate API documentation\")"
          }
        ],
        "timeToComplete": 52
      },
      {
        "path": "/Users/Danallovertheplace/pachacuti/node_modules/streamx",
        "name": "streamx",
        "type": "node",
        "language": "javascript",
        "lastModified": "2025-08-26T18:06:14.000Z",
        "status": "uncommitted-changes",
        "todoCount": 1,
        "issues": [
          "Has uncommitted changes",
          "1 TODOs/FIXMEs found"
        ],
        "metrics": {
          "fileCount": 1,
          "totalLines": 0,
          "testCoverage": "unknown",
          "complexFiles": [],
          "duplicateCode": false,
          "missingTests": [
            "No test files found"
          ]
        },
        "optimizations": [
          {
            "type": "add-tests",
            "description": "Add test coverage with TDD agents",
            "impact": "high",
            "timeEstimate": "30 minutes",
            "howTo": "Use Task(\"tester\", \"Generate comprehensive test suite\")"
          },
          {
            "type": "commit-changes",
            "description": "Commit pending changes",
            "impact": "low",
            "timeEstimate": "2 minutes",
            "howTo": "Use git commit workflow with proper message format"
          },
          {
            "type": "complete-todos",
            "description": "Complete 1 TODOs",
            "impact": "medium",
            "timeEstimate": "10 minutes",
            "howTo": "Use Grep(\"TODO|FIXME\") then Task(\"coder\", \"Complete all TODOs\")"
          }
        ],
        "newFeatures": [
          {
            "feature": "cicd-engineer agent",
            "benefit": "Automatically set up GitHub Actions CI/CD",
            "command": "Task(\"cicd-engineer\", \"Create GitHub Actions workflow\")"
          },
          {
            "feature": "api-docs agent",
            "benefit": "Generate OpenAPI documentation",
            "command": "Task(\"api-docs\", \"Generate API documentation\")"
          }
        ],
        "timeToComplete": 42
      },
      {
        "path": "/Users/Danallovertheplace/pachacuti/node_modules/yauzl",
        "name": "yauzl",
        "type": "node",
        "language": "javascript",
        "lastModified": "2025-08-26T18:06:14.000Z",
        "status": "uncommitted-changes",
        "todoCount": 1,
        "issues": [
          "Has uncommitted changes",
          "1 TODOs/FIXMEs found"
        ],
        "metrics": {
          "fileCount": 1,
          "totalLines": 0,
          "testCoverage": "unknown",
          "complexFiles": [],
          "duplicateCode": false,
          "missingTests": [
            "No test files found"
          ]
        },
        "optimizations": [
          {
            "type": "add-tests",
            "description": "Add test coverage with TDD agents",
            "impact": "high",
            "timeEstimate": "30 minutes",
            "howTo": "Use Task(\"tester\", \"Generate comprehensive test suite\")"
          },
          {
            "type": "commit-changes",
            "description": "Commit pending changes",
            "impact": "low",
            "timeEstimate": "2 minutes",
            "howTo": "Use git commit workflow with proper message format"
          },
          {
            "type": "complete-todos",
            "description": "Complete 1 TODOs",
            "impact": "medium",
            "timeEstimate": "10 minutes",
            "howTo": "Use Grep(\"TODO|FIXME\") then Task(\"coder\", \"Complete all TODOs\")"
          }
        ],
        "newFeatures": [
          {
            "feature": "cicd-engineer agent",
            "benefit": "Automatically set up GitHub Actions CI/CD",
            "command": "Task(\"cicd-engineer\", \"Create GitHub Actions workflow\")"
          },
          {
            "feature": "api-docs agent",
            "benefit": "Generate OpenAPI documentation",
            "command": "Task(\"api-docs\", \"Generate API documentation\")"
          }
        ],
        "timeToComplete": 42
      },
      {
        "path": "/Users/Danallovertheplace/pachacuti/node_modules/wrappy",
        "name": "wrappy",
        "type": "node",
        "language": "javascript",
        "lastModified": "2025-08-26T18:06:14.000Z",
        "status": "uncommitted-changes",
        "todoCount": 0,
        "issues": [
          "Has uncommitted changes"
        ],
        "metrics": {
          "fileCount": 1,
          "totalLines": 0,
          "testCoverage": "unknown",
          "complexFiles": [],
          "duplicateCode": false,
          "missingTests": [
            "No test files found"
          ]
        },
        "optimizations": [
          {
            "type": "add-tests",
            "description": "Add test coverage with TDD agents",
            "impact": "high",
            "timeEstimate": "30 minutes",
            "howTo": "Use Task(\"tester\", \"Generate comprehensive test suite\")"
          },
          {
            "type": "commit-changes",
            "description": "Commit pending changes",
            "impact": "low",
            "timeEstimate": "2 minutes",
            "howTo": "Use git commit workflow with proper message format"
          }
        ],
        "newFeatures": [
          {
            "feature": "cicd-engineer agent",
            "benefit": "Automatically set up GitHub Actions CI/CD",
            "command": "Task(\"cicd-engineer\", \"Create GitHub Actions workflow\")"
          },
          {
            "feature": "api-docs agent",
            "benefit": "Generate OpenAPI documentation",
            "command": "Task(\"api-docs\", \"Generate API documentation\")"
          }
        ],
        "timeToComplete": 32
      },
      {
        "path": "/Users/Danallovertheplace/pachacuti/node_modules/http-proxy-agent",
        "name": "http-proxy-agent",
        "type": "node",
        "language": "javascript",
        "lastModified": "2025-08-26T18:06:14.000Z",
        "status": "uncommitted-changes",
        "todoCount": 0,
        "issues": [
          "Has uncommitted changes"
        ],
        "metrics": {
          "fileCount": 2,
          "totalLines": 0,
          "testCoverage": "unknown",
          "complexFiles": [],
          "duplicateCode": false,
          "missingTests": [
            "No test files found"
          ]
        },
        "optimizations": [
          {
            "type": "add-tests",
            "description": "Add test coverage with TDD agents",
            "impact": "high",
            "timeEstimate": "30 minutes",
            "howTo": "Use Task(\"tester\", \"Generate comprehensive test suite\")"
          },
          {
            "type": "commit-changes",
            "description": "Commit pending changes",
            "impact": "low",
            "timeEstimate": "2 minutes",
            "howTo": "Use git commit workflow with proper message format"
          }
        ],
        "newFeatures": [
          {
            "feature": "cicd-engineer agent",
            "benefit": "Automatically set up GitHub Actions CI/CD",
            "command": "Task(\"cicd-engineer\", \"Create GitHub Actions workflow\")"
          },
          {
            "feature": "api-docs agent",
            "benefit": "Generate OpenAPI documentation",
            "command": "Task(\"api-docs\", \"Generate API documentation\")"
          }
        ],
        "timeToComplete": 32
      },
      {
        "path": "/Users/Danallovertheplace/pachacuti/node_modules/resolve-from",
        "name": "resolve-from",
        "type": "node",
        "language": "javascript",
        "lastModified": "2025-08-26T18:06:14.000Z",
        "status": "uncommitted-changes",
        "todoCount": 0,
        "issues": [
          "Has uncommitted changes"
        ],
        "metrics": {
          "fileCount": 1,
          "totalLines": 0,
          "testCoverage": "unknown",
          "complexFiles": [],
          "duplicateCode": false,
          "missingTests": [
            "No test files found"
          ]
        },
        "optimizations": [
          {
            "type": "add-tests",
            "description": "Add test coverage with TDD agents",
            "impact": "high",
            "timeEstimate": "30 minutes",
            "howTo": "Use Task(\"tester\", \"Generate comprehensive test suite\")"
          },
          {
            "type": "commit-changes",
            "description": "Commit pending changes",
            "impact": "low",
            "timeEstimate": "2 minutes",
            "howTo": "Use git commit workflow with proper message format"
          }
        ],
        "newFeatures": [
          {
            "feature": "cicd-engineer agent",
            "benefit": "Automatically set up GitHub Actions CI/CD",
            "command": "Task(\"cicd-engineer\", \"Create GitHub Actions workflow\")"
          },
          {
            "feature": "api-docs agent",
            "benefit": "Generate OpenAPI documentation",
            "command": "Task(\"api-docs\", \"Generate API documentation\")"
          }
        ],
        "timeToComplete": 32
      },
      {
        "path": "/Users/Danallovertheplace/pachacuti/node_modules/data-uri-to-buffer",
        "name": "data-uri-to-buffer",
        "type": "node",
        "language": "javascript",
        "lastModified": "2025-08-26T18:06:14.000Z",
        "status": "uncommitted-changes",
        "todoCount": 0,
        "issues": [
          "Has uncommitted changes"
        ],
        "metrics": {
          "fileCount": 6,
          "totalLines": 0,
          "testCoverage": "unknown",
          "complexFiles": [],
          "duplicateCode": false,
          "missingTests": [
            "No test files found"
          ]
        },
        "optimizations": [
          {
            "type": "add-tests",
            "description": "Add test coverage with TDD agents",
            "impact": "high",
            "timeEstimate": "30 minutes",
            "howTo": "Use Task(\"tester\", \"Generate comprehensive test suite\")"
          },
          {
            "type": "commit-changes",
            "description": "Commit pending changes",
            "impact": "low",
            "timeEstimate": "2 minutes",
            "howTo": "Use git commit workflow with proper message format"
          }
        ],
        "newFeatures": [
          {
            "feature": "cicd-engineer agent",
            "benefit": "Automatically set up GitHub Actions CI/CD",
            "command": "Task(\"cicd-engineer\", \"Create GitHub Actions workflow\")"
          },
          {
            "feature": "api-docs agent",
            "benefit": "Generate OpenAPI documentation",
            "command": "Task(\"api-docs\", \"Generate API documentation\")"
          }
        ],
        "timeToComplete": 32
      },
      {
        "path": "/Users/Danallovertheplace/pachacuti/node_modules/emoji-regex",
        "name": "emoji-regex",
        "type": "node",
        "language": "javascript",
        "lastModified": "2025-08-26T18:06:14.000Z",
        "status": "uncommitted-changes",
        "todoCount": 0,
        "issues": [
          "Has uncommitted changes"
        ],
        "metrics": {
          "fileCount": 5,
          "totalLines": 0,
          "testCoverage": "unknown",
          "complexFiles": [],
          "duplicateCode": false,
          "missingTests": [
            "No test files found"
          ]
        },
        "optimizations": [
          {
            "type": "add-tests",
            "description": "Add test coverage with TDD agents",
            "impact": "high",
            "timeEstimate": "30 minutes",
            "howTo": "Use Task(\"tester\", \"Generate comprehensive test suite\")"
          },
          {
            "type": "commit-changes",
            "description": "Commit pending changes",
            "impact": "low",
            "timeEstimate": "2 minutes",
            "howTo": "Use git commit workflow with proper message format"
          }
        ],
        "newFeatures": [
          {
            "feature": "cicd-engineer agent",
            "benefit": "Automatically set up GitHub Actions CI/CD",
            "command": "Task(\"cicd-engineer\", \"Create GitHub Actions workflow\")"
          },
          {
            "feature": "api-docs agent",
            "benefit": "Generate OpenAPI documentation",
            "command": "Task(\"api-docs\", \"Generate API documentation\")"
          }
        ],
        "timeToComplete": 32
      },
      {
        "path": "/Users/Danallovertheplace/pachacuti/node_modules/ws",
        "name": "ws",
        "type": "node",
        "language": "javascript",
        "lastModified": "2025-08-26T18:06:14.000Z",
        "status": "uncommitted-changes",
        "todoCount": 0,
        "issues": [
          "Has uncommitted changes"
        ],
        "metrics": {
          "fileCount": 15,
          "totalLines": 0,
          "testCoverage": "unknown",
          "complexFiles": [],
          "duplicateCode": false,
          "missingTests": [
            "No test files found"
          ]
        },
        "optimizations": [
          {
            "type": "parallel-execution",
            "description": "Use batch file operations for faster processing",
            "impact": "high",
            "timeEstimate": "5 minutes",
            "howTo": "Use MultiEdit and batch Read operations in single message"
          },
          {
            "type": "add-tests",
            "description": "Add test coverage with TDD agents",
            "impact": "high",
            "timeEstimate": "30 minutes",
            "howTo": "Use Task(\"tester\", \"Generate comprehensive test suite\")"
          },
          {
            "type": "commit-changes",
            "description": "Commit pending changes",
            "impact": "low",
            "timeEstimate": "2 minutes",
            "howTo": "Use git commit workflow with proper message format"
          }
        ],
        "newFeatures": [
          {
            "feature": "cicd-engineer agent",
            "benefit": "Automatically set up GitHub Actions CI/CD",
            "command": "Task(\"cicd-engineer\", \"Create GitHub Actions workflow\")"
          },
          {
            "feature": "api-docs agent",
            "benefit": "Generate OpenAPI documentation",
            "command": "Task(\"api-docs\", \"Generate API documentation\")"
          }
        ],
        "timeToComplete": 37
      },
      {
        "path": "/Users/Danallovertheplace/pachacuti/node_modules/pac-resolver",
        "name": "pac-resolver",
        "type": "node",
        "language": "javascript",
        "lastModified": "2025-08-26T18:06:14.000Z",
        "status": "uncommitted-changes",
        "todoCount": 1,
        "issues": [
          "Has uncommitted changes",
          "1 TODOs/FIXMEs found"
        ],
        "metrics": {
          "fileCount": 30,
          "totalLines": 0,
          "testCoverage": "unknown",
          "complexFiles": [],
          "duplicateCode": false,
          "missingTests": [
            "No test files found"
          ]
        },
        "optimizations": [
          {
            "type": "parallel-execution",
            "description": "Use batch file operations for faster processing",
            "impact": "high",
            "timeEstimate": "5 minutes",
            "howTo": "Use MultiEdit and batch Read operations in single message"
          },
          {
            "type": "add-tests",
            "description": "Add test coverage with TDD agents",
            "impact": "high",
            "timeEstimate": "30 minutes",
            "howTo": "Use Task(\"tester\", \"Generate comprehensive test suite\")"
          },
          {
            "type": "commit-changes",
            "description": "Commit pending changes",
            "impact": "low",
            "timeEstimate": "2 minutes",
            "howTo": "Use git commit workflow with proper message format"
          },
          {
            "type": "complete-todos",
            "description": "Complete 1 TODOs",
            "impact": "medium",
            "timeEstimate": "10 minutes",
            "howTo": "Use Grep(\"TODO|FIXME\") then Task(\"coder\", \"Complete all TODOs\")"
          }
        ],
        "newFeatures": [
          {
            "feature": "cicd-engineer agent",
            "benefit": "Automatically set up GitHub Actions CI/CD",
            "command": "Task(\"cicd-engineer\", \"Create GitHub Actions workflow\")"
          },
          {
            "feature": "api-docs agent",
            "benefit": "Generate OpenAPI documentation",
            "command": "Task(\"api-docs\", \"Generate API documentation\")"
          },
          {
            "feature": "swarm coordination",
            "benefit": "Use multiple agents in parallel for 2.8x speedup",
            "command": "Launch multiple Task() agents concurrently"
          }
        ],
        "timeToComplete": 47
      },
      {
        "path": "/Users/Danallovertheplace/pachacuti/node_modules/bare-events",
        "name": "bare-events",
        "type": "node",
        "language": "javascript",
        "lastModified": "2025-08-26T18:06:14.000Z",
        "status": "uncommitted-changes",
        "todoCount": 0,
        "issues": [
          "Has uncommitted changes"
        ],
        "metrics": {
          "fileCount": 3,
          "totalLines": 0,
          "testCoverage": "unknown",
          "complexFiles": [],
          "duplicateCode": false,
          "missingTests": [
            "No test files found"
          ]
        },
        "optimizations": [
          {
            "type": "add-tests",
            "description": "Add test coverage with TDD agents",
            "impact": "high",
            "timeEstimate": "30 minutes",
            "howTo": "Use Task(\"tester\", \"Generate comprehensive test suite\")"
          },
          {
            "type": "commit-changes",
            "description": "Commit pending changes",
            "impact": "low",
            "timeEstimate": "2 minutes",
            "howTo": "Use git commit workflow with proper message format"
          }
        ],
        "newFeatures": [
          {
            "feature": "cicd-engineer agent",
            "benefit": "Automatically set up GitHub Actions CI/CD",
            "command": "Task(\"cicd-engineer\", \"Create GitHub Actions workflow\")"
          },
          {
            "feature": "api-docs agent",
            "benefit": "Generate OpenAPI documentation",
            "command": "Task(\"api-docs\", \"Generate API documentation\")"
          }
        ],
        "timeToComplete": 32
      },
      {
        "path": "/Users/Danallovertheplace/pachacuti/node_modules/debug",
        "name": "debug",
        "type": "node",
        "language": "javascript",
        "lastModified": "2025-08-26T18:06:14.000Z",
        "status": "uncommitted-changes",
        "todoCount": 1,
        "issues": [
          "Has uncommitted changes",
          "1 TODOs/FIXMEs found"
        ],
        "metrics": {
          "fileCount": 4,
          "totalLines": 0,
          "testCoverage": "unknown",
          "complexFiles": [],
          "duplicateCode": false,
          "missingTests": [
            "No test files found"
          ]
        },
        "optimizations": [
          {
            "type": "add-tests",
            "description": "Add test coverage with TDD agents",
            "impact": "high",
            "timeEstimate": "30 minutes",
            "howTo": "Use Task(\"tester\", \"Generate comprehensive test suite\")"
          },
          {
            "type": "commit-changes",
            "description": "Commit pending changes",
            "impact": "low",
            "timeEstimate": "2 minutes",
            "howTo": "Use git commit workflow with proper message format"
          },
          {
            "type": "complete-todos",
            "description": "Complete 1 TODOs",
            "impact": "medium",
            "timeEstimate": "10 minutes",
            "howTo": "Use Grep(\"TODO|FIXME\") then Task(\"coder\", \"Complete all TODOs\")"
          }
        ],
        "newFeatures": [
          {
            "feature": "cicd-engineer agent",
            "benefit": "Automatically set up GitHub Actions CI/CD",
            "command": "Task(\"cicd-engineer\", \"Create GitHub Actions workflow\")"
          },
          {
            "feature": "api-docs agent",
            "benefit": "Generate OpenAPI documentation",
            "command": "Task(\"api-docs\", \"Generate API documentation\")"
          }
        ],
        "timeToComplete": 42
      },
      {
        "path": "/Users/Danallovertheplace/pachacuti/node_modules/mitt",
        "name": "mitt",
        "type": "node",
        "language": "javascript",
        "lastModified": "2025-08-26T18:06:14.000Z",
        "status": "uncommitted-changes",
        "todoCount": 0,
        "issues": [
          "Has uncommitted changes"
        ],
        "metrics": {
          "fileCount": 3,
          "totalLines": 0,
          "testCoverage": "unknown",
          "complexFiles": [],
          "duplicateCode": false,
          "missingTests": [
            "No test files found"
          ]
        },
        "optimizations": [
          {
            "type": "add-tests",
            "description": "Add test coverage with TDD agents",
            "impact": "high",
            "timeEstimate": "30 minutes",
            "howTo": "Use Task(\"tester\", \"Generate comprehensive test suite\")"
          },
          {
            "type": "commit-changes",
            "description": "Commit pending changes",
            "impact": "low",
            "timeEstimate": "2 minutes",
            "howTo": "Use git commit workflow with proper message format"
          }
        ],
        "newFeatures": [
          {
            "feature": "cicd-engineer agent",
            "benefit": "Automatically set up GitHub Actions CI/CD",
            "command": "Task(\"cicd-engineer\", \"Create GitHub Actions workflow\")"
          },
          {
            "feature": "api-docs agent",
            "benefit": "Generate OpenAPI documentation",
            "command": "Task(\"api-docs\", \"Generate API documentation\")"
          }
        ],
        "timeToComplete": 32
      },
      {
        "path": "/Users/Danallovertheplace/pachacuti/tests",
        "name": "tests",
        "type": "node",
        "language": "javascript",
        "lastModified": "2025-08-26T18:06:14.000Z",
        "status": "uncommitted-changes",
        "todoCount": 367,
        "issues": [
          "Has uncommitted changes",
          "367 TODOs/FIXMEs found"
        ],
        "metrics": {
          "fileCount": 2429,
          "totalLines": 0,
          "testCoverage": "unknown",
          "complexFiles": [
            "node_modules/zod/v4/core/schemas.d.ts",
            "node_modules/zod/v4/classic/schemas.d.ts",
            "node_modules/zod/v3/types.d.ts",
            "node_modules/zod/src/v4/core/schemas.ts",
            "node_modules/zod/src/v4/core/api.ts",
            "node_modules/zod/src/v4/core/to-json-schema.ts",
            "node_modules/zod/src/v4/core/checks.ts",
            "node_modules/zod/src/v4/core/util.ts",
            "node_modules/zod/src/v4/mini/tests/index.test.ts",
            "node_modules/zod/src/v4/mini/schemas.ts",
            "node_modules/zod/src/v4/classic/tests/template-literal.test.ts",
            "node_modules/zod/src/v4/classic/tests/index.test.ts",
            "node_modules/zod/src/v4/classic/tests/error-utils.test.ts",
            "node_modules/zod/src/v4/classic/tests/string.test.ts",
            "node_modules/zod/src/v4/classic/tests/discriminated-unions.test.ts",
            "node_modules/zod/src/v4/classic/tests/to-json-schema.test.ts",
            "node_modules/zod/src/v4/classic/tests/refine.test.ts",
            "node_modules/zod/src/v4/classic/tests/error.test.ts",
            "node_modules/zod/src/v4/classic/tests/object.test.ts",
            "node_modules/zod/src/v4/classic/schemas.ts",
            "node_modules/zod/src/v3/tests/string.test.ts",
            "node_modules/zod/src/v3/tests/error.test.ts",
            "node_modules/zod/src/v3/types.ts",
            "node_modules/@types/node/diagnostics_channel.d.ts",
            "node_modules/@types/node/tls.d.ts",
            "node_modules/@types/node/readline.d.ts",
            "node_modules/@types/node/crypto.d.ts",
            "node_modules/@types/node/events.d.ts",
            "node_modules/@types/node/buffer.d.ts",
            "node_modules/@types/node/worker_threads.d.ts",
            "node_modules/@types/node/async_hooks.d.ts",
            "node_modules/@types/node/stream/web.d.ts",
            "node_modules/@types/node/dns.d.ts",
            "node_modules/@types/node/vm.d.ts",
            "node_modules/@types/node/test.d.ts",
            "node_modules/@types/node/http.d.ts",
            "node_modules/@types/node/http2.d.ts",
            "node_modules/@types/node/stream.d.ts",
            "node_modules/@types/node/inspector.d.ts",
            "node_modules/@types/node/v8.d.ts",
            "node_modules/@types/node/perf_hooks.d.ts",
            "node_modules/@types/node/url.d.ts",
            "node_modules/@types/node/cluster.d.ts",
            "node_modules/@types/node/https.d.ts",
            "node_modules/@types/node/assert.d.ts",
            "node_modules/@types/node/fs.d.ts",
            "node_modules/@types/node/dgram.d.ts",
            "node_modules/@types/node/child_process.d.ts",
            "node_modules/@types/node/zlib.d.ts",
            "node_modules/@types/node/module.d.ts",
            "node_modules/@types/node/sqlite.d.ts",
            "node_modules/@types/node/process.d.ts",
            "node_modules/@types/node/util.d.ts",
            "node_modules/@types/node/dns/promises.d.ts",
            "node_modules/@types/node/fs/promises.d.ts",
            "node_modules/@types/node/net.d.ts",
            "node_modules/lru-cache/index.d.ts",
            "node_modules/ip-address/src/ipv6.ts",
            "node_modules/puppeteer/lib/types.d.ts",
            "node_modules/ast-types/gen/builders.d.ts",
            "node_modules/ast-types/gen/namedTypes.d.ts",
            "node_modules/smart-buffer/typings/smartbuffer.d.ts",
            "node_modules/devtools-protocol/types/protocol-mapping.d.ts",
            "node_modules/devtools-protocol/types/protocol-tests-proxy-api.d.ts",
            "node_modules/devtools-protocol/types/protocol.d.ts",
            "node_modules/devtools-protocol/types/protocol-proxy-api.d.ts",
            "node_modules/bare-fs/index.d.ts",
            "node_modules/chromium-bidi/lib/esm/protocol/generated/webdriver-bidi.d.ts",
            "node_modules/chromium-bidi/lib/esm/protocol-parser/generated/webdriver-bidi.d.ts",
            "node_modules/chromium-bidi/lib/esm/protocol-parser/generated/webdriver-bidi-bluetooth.d.ts",
            "node_modules/chromium-bidi/lib/cjs/protocol/generated/webdriver-bidi.d.ts",
            "node_modules/chromium-bidi/lib/cjs/protocol-parser/generated/webdriver-bidi.d.ts",
            "node_modules/chromium-bidi/lib/cjs/protocol-parser/generated/webdriver-bidi-bluetooth.d.ts",
            "node_modules/puppeteer-core/lib/esm/puppeteer/api/ElementHandle.d.ts",
            "node_modules/puppeteer-core/lib/esm/puppeteer/api/Frame.d.ts",
            "node_modules/puppeteer-core/lib/esm/puppeteer/api/Page.d.ts",
            "node_modules/puppeteer-core/lib/types.d.ts",
            "node_modules/puppeteer-core/lib/es5-iife/puppeteer-core-browser.d.ts",
            "node_modules/puppeteer-core/lib/cjs/puppeteer/api/ElementHandle.d.ts",
            "node_modules/puppeteer-core/lib/cjs/puppeteer/api/Frame.d.ts",
            "node_modules/puppeteer-core/lib/cjs/puppeteer/api/Page.d.ts",
            "node_modules/puppeteer-core/src/cdp/EmulationManager.ts",
            "node_modules/puppeteer-core/src/cdp/ExecutionContext.ts",
            "node_modules/puppeteer-core/src/cdp/FrameManager.ts",
            "node_modules/puppeteer-core/src/cdp/Accessibility.ts",
            "node_modules/puppeteer-core/src/cdp/NetworkManager.ts",
            "node_modules/puppeteer-core/src/cdp/Input.ts",
            "node_modules/puppeteer-core/src/cdp/Page.ts",
            "node_modules/puppeteer-core/src/cdp/Coverage.ts",
            "node_modules/puppeteer-core/src/bidi/core/BrowsingContext.ts",
            "node_modules/puppeteer-core/src/bidi/Frame.ts",
            "node_modules/puppeteer-core/src/bidi/Input.ts",
            "node_modules/puppeteer-core/src/bidi/Page.ts",
            "node_modules/puppeteer-core/src/common/USKeyboardLayout.ts",
            "node_modules/puppeteer-core/src/common/Device.ts",
            "node_modules/puppeteer-core/src/api/HTTPRequest.ts",
            "node_modules/puppeteer-core/src/api/Frame.ts",
            "node_modules/puppeteer-core/src/api/Input.ts",
            "node_modules/puppeteer-core/src/api/locators/locators.ts",
            "node_modules/puppeteer-core/src/api/Browser.ts",
            "node_modules/puppeteer-core/src/api/Page.ts",
            "node_modules/puppeteer-core/src/api/ElementHandle.ts",
            "node_modules/puppeteer-core/src/node/BrowserLauncher.ts",
            "node_modules/@puppeteer/browsers/src/install.ts",
            "node_modules/@puppeteer/browsers/src/CLI.ts",
            "node_modules/@puppeteer/browsers/src/launch.ts",
            "../total"
          ],
          "duplicateCode": false,
          "missingTests": []
        },
        "optimizations": [
          {
            "type": "parallel-execution",
            "description": "Use batch file operations for faster processing",
            "impact": "high",
            "timeEstimate": "5 minutes",
            "howTo": "Use MultiEdit and batch Read operations in single message"
          },
          {
            "type": "refactor-complex",
            "description": "Refactor 107 complex files",
            "impact": "medium",
            "timeEstimate": "1 hour",
            "howTo": "Use Task(\"code-analyzer\", \"Refactor large files\") with Task(\"coder\", \"Implement refactoring\")"
          },
          {
            "type": "commit-changes",
            "description": "Commit pending changes",
            "impact": "low",
            "timeEstimate": "2 minutes",
            "howTo": "Use git commit workflow with proper message format"
          },
          {
            "type": "complete-todos",
            "description": "Complete 367 TODOs",
            "impact": "medium",
            "timeEstimate": "3670 minutes",
            "howTo": "Use Grep(\"TODO|FIXME\") then Task(\"coder\", \"Complete all TODOs\")"
          }
        ],
        "newFeatures": [
          {
            "feature": "cicd-engineer agent",
            "benefit": "Automatically set up GitHub Actions CI/CD",
            "command": "Task(\"cicd-engineer\", \"Create GitHub Actions workflow\")"
          },
          {
            "feature": "api-docs agent",
            "benefit": "Generate OpenAPI documentation",
            "command": "Task(\"api-docs\", \"Generate API documentation\")"
          },
          {
            "feature": "swarm coordination",
            "benefit": "Use multiple agents in parallel for 2.8x speedup",
            "command": "Launch multiple Task() agents concurrently"
          }
        ],
        "timeToComplete": 3678
      },
      {
        "path": "/Users/Danallovertheplace/pachacuti/lib/slack-integration",
        "name": "pachacuti-slack-integration",
        "type": "node",
        "language": "javascript",
        "lastModified": "2025-08-26T18:06:14.000Z",
        "status": "uncommitted-changes",
        "todoCount": 351,
        "issues": [
          "Has uncommitted changes",
          "351 TODOs/FIXMEs found"
        ],
        "metrics": {
          "fileCount": 2614,
          "totalLines": 0,
          "testCoverage": "unknown",
          "complexFiles": [
            "node_modules/@types/lodash/fp.d.ts",
            "node_modules/@types/lodash/common/function.d.ts",
            "node_modules/@types/lodash/common/array.d.ts",
            "node_modules/@types/lodash/common/string.d.ts",
            "node_modules/@types/lodash/common/object.d.ts",
            "node_modules/@types/lodash/common/lang.d.ts",
            "node_modules/@types/lodash/common/collection.d.ts",
            "node_modules/@types/lodash/common/util.d.ts",
            "node_modules/@types/express-serve-static-core/index.d.ts",
            "node_modules/@types/yargs/index.d.ts",
            "node_modules/@types/node/globals.d.ts",
            "node_modules/@types/node/tls.d.ts",
            "node_modules/@types/node/crypto.d.ts",
            "node_modules/@types/node/http2.d.ts",
            "node_modules/@types/node/inspector.d.ts",
            "node_modules/@types/node/fs.d.ts",
            "node_modules/@types/node/child_process.d.ts",
            "node_modules/fecha/src/fecha.ts",
            "node_modules/axios/index.d.ts",
            "node_modules/@slack/types/dist/block-kit/block-elements.d.ts",
            "node_modules/@slack/logger/node_modules/@types/node/diagnostics_channel.d.ts",
            "node_modules/@slack/logger/node_modules/@types/node/tls.d.ts",
            "node_modules/@slack/logger/node_modules/@types/node/readline.d.ts",
            "node_modules/@slack/logger/node_modules/@types/node/crypto.d.ts",
            "node_modules/@slack/logger/node_modules/@types/node/events.d.ts",
            "node_modules/@slack/logger/node_modules/@types/node/buffer.d.ts",
            "node_modules/@slack/logger/node_modules/@types/node/worker_threads.d.ts",
            "node_modules/@slack/logger/node_modules/@types/node/async_hooks.d.ts",
            "node_modules/@slack/logger/node_modules/@types/node/stream/web.d.ts",
            "node_modules/@slack/logger/node_modules/@types/node/dns.d.ts",
            "node_modules/@slack/logger/node_modules/@types/node/vm.d.ts",
            "node_modules/@slack/logger/node_modules/@types/node/test.d.ts",
            "node_modules/@slack/logger/node_modules/@types/node/http.d.ts",
            "node_modules/@slack/logger/node_modules/@types/node/http2.d.ts",
            "node_modules/@slack/logger/node_modules/@types/node/stream.d.ts",
            "node_modules/@slack/logger/node_modules/@types/node/inspector.d.ts",
            "node_modules/@slack/logger/node_modules/@types/node/v8.d.ts",
            "node_modules/@slack/logger/node_modules/@types/node/perf_hooks.d.ts",
            "node_modules/@slack/logger/node_modules/@types/node/url.d.ts",
            "node_modules/@slack/logger/node_modules/@types/node/cluster.d.ts",
            "node_modules/@slack/logger/node_modules/@types/node/https.d.ts",
            "node_modules/@slack/logger/node_modules/@types/node/assert.d.ts",
            "node_modules/@slack/logger/node_modules/@types/node/fs.d.ts",
            "node_modules/@slack/logger/node_modules/@types/node/dgram.d.ts",
            "node_modules/@slack/logger/node_modules/@types/node/child_process.d.ts",
            "node_modules/@slack/logger/node_modules/@types/node/zlib.d.ts",
            "node_modules/@slack/logger/node_modules/@types/node/module.d.ts",
            "node_modules/@slack/logger/node_modules/@types/node/sqlite.d.ts",
            "node_modules/@slack/logger/node_modules/@types/node/process.d.ts",
            "node_modules/@slack/logger/node_modules/@types/node/util.d.ts",
            "node_modules/@slack/logger/node_modules/@types/node/dns/promises.d.ts",
            "node_modules/@slack/logger/node_modules/@types/node/fs/promises.d.ts",
            "node_modules/@slack/logger/node_modules/@types/node/net.d.ts",
            "node_modules/@slack/web-api/dist/types/response/SearchAllResponse.d.ts",
            "node_modules/@slack/web-api/dist/types/response/FilesSharedPublicURLResponse.d.ts",
            "node_modules/@slack/web-api/dist/types/response/FilesInfoResponse.d.ts",
            "node_modules/@slack/web-api/dist/types/response/PinsListResponse.d.ts",
            "node_modules/@slack/web-api/dist/types/response/FilesRemoteInfoResponse.d.ts",
            "node_modules/@slack/web-api/dist/types/response/FilesRemoteShareResponse.d.ts",
            "node_modules/@slack/web-api/dist/types/response/FilesListResponse.d.ts",
            "node_modules/@slack/web-api/dist/types/response/FilesRemoteListResponse.d.ts",
            "node_modules/@slack/web-api/dist/types/response/ReactionsListResponse.d.ts",
            "node_modules/@slack/web-api/dist/types/response/ReactionsGetResponse.d.ts",
            "node_modules/@slack/web-api/dist/types/response/FilesRevokePublicURLResponse.d.ts",
            "node_modules/@slack/web-api/dist/types/response/SearchMessagesResponse.d.ts",
            "node_modules/@slack/web-api/dist/types/response/FilesRemoteAddResponse.d.ts",
            "node_modules/@slack/web-api/dist/types/response/SearchFilesResponse.d.ts",
            "node_modules/@slack/web-api/dist/types/response/ChatPostMessageResponse.d.ts",
            "node_modules/@slack/web-api/dist/types/response/ChatScheduleMessageResponse.d.ts",
            "node_modules/@slack/web-api/dist/types/response/ConversationsRepliesResponse.d.ts",
            "node_modules/@slack/web-api/dist/types/response/ConversationsOpenResponse.d.ts",
            "node_modules/@slack/web-api/dist/types/response/ChatUpdateResponse.d.ts",
            "node_modules/@slack/web-api/dist/types/response/RtmStartResponse.d.ts",
            "node_modules/@slack/web-api/dist/types/response/ConversationsHistoryResponse.d.ts",
            "node_modules/@slack/web-api/dist/types/response/StarsListResponse.d.ts",
            "node_modules/@slack/web-api/dist/types/response/FilesRemoteUpdateResponse.d.ts",
            "node_modules/@slack/web-api/dist/types/response/FilesUploadResponse.d.ts",
            "node_modules/@slack/web-api/dist/methods.d.ts",
            "node_modules/@slack/web-api/node_modules/@types/node/diagnostics_channel.d.ts",
            "node_modules/@slack/web-api/node_modules/@types/node/tls.d.ts",
            "node_modules/@slack/web-api/node_modules/@types/node/readline.d.ts",
            "node_modules/@slack/web-api/node_modules/@types/node/crypto.d.ts",
            "node_modules/@slack/web-api/node_modules/@types/node/events.d.ts",
            "node_modules/@slack/web-api/node_modules/@types/node/buffer.d.ts",
            "node_modules/@slack/web-api/node_modules/@types/node/worker_threads.d.ts",
            "node_modules/@slack/web-api/node_modules/@types/node/async_hooks.d.ts",
            "node_modules/@slack/web-api/node_modules/@types/node/stream/web.d.ts",
            "node_modules/@slack/web-api/node_modules/@types/node/dns.d.ts",
            "node_modules/@slack/web-api/node_modules/@types/node/vm.d.ts",
            "node_modules/@slack/web-api/node_modules/@types/node/test.d.ts",
            "node_modules/@slack/web-api/node_modules/@types/node/http.d.ts",
            "node_modules/@slack/web-api/node_modules/@types/node/http2.d.ts",
            "node_modules/@slack/web-api/node_modules/@types/node/stream.d.ts",
            "node_modules/@slack/web-api/node_modules/@types/node/inspector.d.ts",
            "node_modules/@slack/web-api/node_modules/@types/node/v8.d.ts",
            "node_modules/@slack/web-api/node_modules/@types/node/perf_hooks.d.ts",
            "node_modules/@slack/web-api/node_modules/@types/node/url.d.ts",
            "node_modules/@slack/web-api/node_modules/@types/node/cluster.d.ts",
            "node_modules/@slack/web-api/node_modules/@types/node/https.d.ts",
            "node_modules/@slack/web-api/node_modules/@types/node/assert.d.ts",
            "node_modules/@slack/web-api/node_modules/@types/node/fs.d.ts",
            "node_modules/@slack/web-api/node_modules/@types/node/dgram.d.ts",
            "node_modules/@slack/web-api/node_modules/@types/node/child_process.d.ts",
            "node_modules/@slack/web-api/node_modules/@types/node/zlib.d.ts",
            "node_modules/@slack/web-api/node_modules/@types/node/module.d.ts",
            "node_modules/@slack/web-api/node_modules/@types/node/sqlite.d.ts",
            "node_modules/@slack/web-api/node_modules/@types/node/process.d.ts",
            "node_modules/@slack/web-api/node_modules/@types/node/util.d.ts",
            "node_modules/@slack/web-api/node_modules/@types/node/dns/promises.d.ts",
            "node_modules/@slack/web-api/node_modules/@types/node/fs/promises.d.ts",
            "node_modules/@slack/web-api/node_modules/@types/node/net.d.ts",
            "../../total"
          ],
          "duplicateCode": false,
          "missingTests": [
            "No test files found"
          ]
        },
        "optimizations": [
          {
            "type": "parallel-execution",
            "description": "Use batch file operations for faster processing",
            "impact": "high",
            "timeEstimate": "5 minutes",
            "howTo": "Use MultiEdit and batch Read operations in single message"
          },
          {
            "type": "add-tests",
            "description": "Add test coverage with TDD agents",
            "impact": "high",
            "timeEstimate": "30 minutes",
            "howTo": "Use Task(\"tester\", \"Generate comprehensive test suite\")"
          },
          {
            "type": "refactor-complex",
            "description": "Refactor 112 complex files",
            "impact": "medium",
            "timeEstimate": "1 hour",
            "howTo": "Use Task(\"code-analyzer\", \"Refactor large files\") with Task(\"coder\", \"Implement refactoring\")"
          },
          {
            "type": "commit-changes",
            "description": "Commit pending changes",
            "impact": "low",
            "timeEstimate": "2 minutes",
            "howTo": "Use git commit workflow with proper message format"
          },
          {
            "type": "complete-todos",
            "description": "Complete 351 TODOs",
            "impact": "medium",
            "timeEstimate": "3510 minutes",
            "howTo": "Use Grep(\"TODO|FIXME\") then Task(\"coder\", \"Complete all TODOs\")"
          }
        ],
        "newFeatures": [
          {
            "feature": "cicd-engineer agent",
            "benefit": "Automatically set up GitHub Actions CI/CD",
            "command": "Task(\"cicd-engineer\", \"Create GitHub Actions workflow\")"
          },
          {
            "feature": "api-docs agent",
            "benefit": "Generate OpenAPI documentation",
            "command": "Task(\"api-docs\", \"Generate API documentation\")"
          },
          {
            "feature": "swarm coordination",
            "benefit": "Use multiple agents in parallel for 2.8x speedup",
            "command": "Launch multiple Task() agents concurrently"
          }
        ],
        "timeToComplete": 3548
      },
      {
        "path": "/Users/Danallovertheplace/pachacuti/crypto-campaign-unified",
        "name": "crypto-campaign-unified",
        "type": "node",
        "language": "javascript",
        "lastModified": "2025-08-26T18:06:14.000Z",
        "status": "uncommitted-changes",
        "todoCount": 1138,
        "issues": [
          "Has uncommitted changes",
          "1138 TODOs/FIXMEs found"
        ],
        "metrics": {
          "fileCount": 8111,
          "totalLines": 0,
          "testCoverage": "unknown",
          "complexFiles": [
            "node_modules/@types/chai/index.d.ts",
            "node_modules/@types/estree/index.d.ts",
            "node_modules/@types/node/diagnostics_channel.d.ts",
            "node_modules/@types/node/tls.d.ts",
            "node_modules/@types/node/readline.d.ts",
            "node_modules/@types/node/crypto.d.ts",
            "node_modules/@types/node/events.d.ts",
            "node_modules/@types/node/buffer.d.ts",
            "node_modules/@types/node/worker_threads.d.ts",
            "node_modules/@types/node/async_hooks.d.ts",
            "node_modules/@types/node/stream/web.d.ts",
            "node_modules/@types/node/dns.d.ts",
            "node_modules/@types/node/vm.d.ts",
            "node_modules/@types/node/test.d.ts",
            "node_modules/@types/node/http.d.ts",
            "node_modules/@types/node/http2.d.ts",
            "node_modules/@types/node/stream.d.ts",
            "node_modules/@types/node/inspector.d.ts",
            "node_modules/@types/node/v8.d.ts",
            "node_modules/@types/node/perf_hooks.d.ts",
            "node_modules/@types/node/url.d.ts",
            "node_modules/@types/node/cluster.d.ts",
            "node_modules/@types/node/https.d.ts",
            "node_modules/@types/node/assert.d.ts",
            "node_modules/@types/node/fs.d.ts",
            "node_modules/@types/node/dgram.d.ts",
            "node_modules/@types/node/child_process.d.ts",
            "node_modules/@types/node/zlib.d.ts",
            "node_modules/@types/node/module.d.ts",
            "node_modules/@types/node/process.d.ts",
            "node_modules/@types/node/util.d.ts",
            "node_modules/@types/node/fs/promises.d.ts",
            "node_modules/@types/node/net.d.ts",
            "node_modules/@noble/curves/src/abstract/weierstrass.ts",
            "node_modules/@noble/curves/src/abstract/edwards.ts",
            "node_modules/@noble/curves/src/bls12-381.ts",
            "node_modules/happy-dom/lib/css/declaration/property-manager/CSSStyleDeclarationPropertySetParser.d.ts",
            "node_modules/happy-dom/lib/css/declaration/CSSStyleDeclaration.d.ts",
            "node_modules/happy-dom/lib/nodes/element/Element.d.ts",
            "node_modules/happy-dom/lib/nodes/document/Document.d.ts",
            "node_modules/happy-dom/lib/nodes/html-input-element/HTMLInputElement.d.ts",
            "node_modules/happy-dom/lib/window/BrowserWindow.d.ts",
            "node_modules/happy-dom/src/svg/SVGTransformList.ts",
            "node_modules/happy-dom/src/svg/SVGNumberList.ts",
            "node_modules/happy-dom/src/svg/SVGPointList.ts",
            "node_modules/happy-dom/src/css/declaration/property-manager/CSSStyleDeclarationPropertyManager.ts",
            "node_modules/happy-dom/src/css/declaration/property-manager/CSSStyleDeclarationPropertySetParser.ts",
            "node_modules/happy-dom/src/css/declaration/property-manager/CSSStyleDeclarationPropertyGetParser.ts",
            "node_modules/happy-dom/src/css/declaration/CSSStyleDeclaration.ts",
            "node_modules/happy-dom/src/config/HTMLElementConfig.ts",
            "node_modules/happy-dom/src/nodes/html-element/HTMLElement.ts",
            "node_modules/happy-dom/src/nodes/html-form-element/HTMLFormElement.ts",
            "node_modules/happy-dom/src/nodes/svg-element/SVGElement.ts",
            "node_modules/happy-dom/src/nodes/html-text-area-element/HTMLTextAreaElement.ts",
            "node_modules/happy-dom/src/nodes/element/Element.ts",
            "node_modules/happy-dom/src/nodes/document/Document.ts",
            "node_modules/happy-dom/src/nodes/html-input-element/HTMLInputElement.ts",
            "node_modules/happy-dom/src/nodes/html-select-element/HTMLSelectElement.ts",
            "node_modules/happy-dom/src/nodes/node/Node.ts",
            "node_modules/happy-dom/src/nodes/html-script-element/HTMLScriptElement.ts",
            "node_modules/happy-dom/src/nodes/svg-svg-element/SVGSVGElement.ts",
            "node_modules/happy-dom/src/nodes/html-media-element/HTMLMediaElement.ts",
            "node_modules/happy-dom/src/module/ECMAScriptModuleCompiler.ts",
            "node_modules/happy-dom/src/xml-http-request/XMLHttpRequest.ts",
            "node_modules/happy-dom/src/fetch/SyncFetch.ts",
            "node_modules/happy-dom/src/fetch/Fetch.ts",
            "node_modules/happy-dom/src/xml-parser/XMLParser.ts",
            "node_modules/happy-dom/src/window/BrowserWindow.ts",
            "node_modules/happy-dom/src/html-parser/HTMLParser.ts",
            "node_modules/happy-dom/src/dom/dom-matrix/DOMMatrixReadOnly.ts",
            "node_modules/happy-dom/src/selection/Selection.ts",
            "node_modules/happy-dom/src/range/Range.ts",
            "node_modules/happy-dom/src/query-selector/QuerySelector.ts",
            "node_modules/happy-dom/cjs/css/declaration/property-manager/CSSStyleDeclarationPropertySetParser.d.ts",
            "node_modules/happy-dom/cjs/css/declaration/CSSStyleDeclaration.d.ts",
            "node_modules/happy-dom/cjs/nodes/element/Element.d.ts",
            "node_modules/happy-dom/cjs/nodes/document/Document.d.ts",
            "node_modules/happy-dom/cjs/nodes/html-input-element/HTMLInputElement.d.ts",
            "node_modules/happy-dom/cjs/window/BrowserWindow.d.ts",
            "node_modules/lru-cache/dist/esm/index.d.ts",
            "node_modules/lru-cache/dist/commonjs/index.d.ts",
            "node_modules/ethers/lib.commonjs/providers/provider.d.ts",
            "node_modules/ethers/lib.commonjs/utils/errors.d.ts",
            "node_modules/ethers/lib.commonjs/abi/typed.d.ts",
            "node_modules/ethers/src.ts/transaction/transaction.ts",
            "node_modules/ethers/src.ts/contract/contract.ts",
            "node_modules/ethers/src.ts/hash/typed-data.ts",
            "node_modules/ethers/src.ts/providers/provider-etherscan.ts",
            "node_modules/ethers/src.ts/providers/abstract-provider.ts",
            "node_modules/ethers/src.ts/providers/provider-fallback.ts",
            "node_modules/ethers/src.ts/providers/ens-resolver.ts",
            "node_modules/ethers/src.ts/providers/provider-jsonrpc.ts",
            "node_modules/ethers/src.ts/providers/provider.ts",
            "node_modules/ethers/src.ts/utils/errors.ts",
            "node_modules/ethers/src.ts/utils/fixednumber.ts",
            "node_modules/ethers/src.ts/utils/fetch.ts",
            "node_modules/ethers/src.ts/abi/coders/abstract-coder.ts",
            "node_modules/ethers/src.ts/abi/fragments.ts",
            "node_modules/ethers/src.ts/abi/interface.ts",
            "node_modules/ethers/src.ts/abi/typed.ts",
            "node_modules/ethers/src.ts/wallet/hdwallet.ts",
            "node_modules/ethers/node_modules/@types/node/diagnostics_channel.d.ts",
            "node_modules/ethers/node_modules/@types/node/globals.d.ts",
            "node_modules/ethers/node_modules/@types/node/tls.d.ts",
            "node_modules/ethers/node_modules/@types/node/readline.d.ts",
            "node_modules/ethers/node_modules/@types/node/crypto.d.ts",
            "node_modules/ethers/node_modules/@types/node/events.d.ts",
            "node_modules/ethers/node_modules/@types/node/buffer.d.ts",
            "node_modules/ethers/node_modules/@types/node/worker_threads.d.ts",
            "node_modules/ethers/node_modules/@types/node/async_hooks.d.ts",
            "node_modules/ethers/node_modules/@types/node/stream/web.d.ts",
            "node_modules/ethers/node_modules/@types/node/dns.d.ts",
            "node_modules/ethers/node_modules/@types/node/vm.d.ts",
            "node_modules/ethers/node_modules/@types/node/test.d.ts",
            "node_modules/ethers/node_modules/@types/node/http.d.ts",
            "node_modules/ethers/node_modules/@types/node/http2.d.ts",
            "node_modules/ethers/node_modules/@types/node/stream.d.ts",
            "node_modules/ethers/node_modules/@types/node/inspector.d.ts",
            "node_modules/ethers/node_modules/@types/node/v8.d.ts",
            "node_modules/ethers/node_modules/@types/node/perf_hooks.d.ts",
            "node_modules/ethers/node_modules/@types/node/url.d.ts",
            "node_modules/ethers/node_modules/@types/node/cluster.d.ts",
            "node_modules/ethers/node_modules/@types/node/https.d.ts",
            "node_modules/ethers/node_modules/@types/node/assert.d.ts",
            "node_modules/ethers/node_modules/@types/node/fs.d.ts",
            "node_modules/ethers/node_modules/@types/node/dgram.d.ts",
            "node_modules/ethers/node_modules/@types/node/child_process.d.ts",
            "node_modules/ethers/node_modules/@types/node/zlib.d.ts",
            "node_modules/ethers/node_modules/@types/node/process.d.ts",
            "node_modules/ethers/node_modules/@types/node/util.d.ts",
            "node_modules/ethers/node_modules/@types/node/fs/promises.d.ts",
            "node_modules/ethers/node_modules/@types/node/net.d.ts",
            "node_modules/ethers/lib.esm/providers/provider.d.ts",
            "node_modules/ethers/lib.esm/utils/errors.d.ts",
            "node_modules/ethers/lib.esm/abi/typed.d.ts",
            "node_modules/type-fest/source/package-json.d.ts",
            "node_modules/type-fest/source/tsconfig-json.d.ts",
            "node_modules/vitest/dist/chunks/reporters.d.BFLkQcL6.d.ts",
            "node_modules/vitest/dist/index.d.ts",
            "node_modules/postcss/lib/node.d.ts",
            "node_modules/@asamuzakjp/css-color/dist/esm/js/color.d.ts",
            "node_modules/@asamuzakjp/css-color/src/js/css-calc.ts",
            "node_modules/@asamuzakjp/css-color/src/js/color.ts",
            "node_modules/@asamuzakjp/css-color/src/js/relative-color.ts",
            "node_modules/@csstools/css-parser-algorithms/dist/index.d.ts",
            "node_modules/@csstools/css-tokenizer/dist/index.d.ts",
            "node_modules/@mswjs/interceptors/src/interceptors/ClientRequest/MockHttpSocket.ts",
            "node_modules/@mswjs/interceptors/src/interceptors/XMLHttpRequest/XMLHttpRequestController.ts",
            "node_modules/saxes/saxes.d.ts",
            "node_modules/vite/dist/node/index.d.ts",
            "node_modules/graphql/language/parser.d.ts",
            "node_modules/graphql/language/ast.d.ts",
            "node_modules/graphql/type/definition.d.ts",
            "node_modules/@babel/types/lib/index-legacy.d.ts",
            "node_modules/@babel/types/lib/index.d.ts",
            "node_modules/msw/src/core/handlers/GraphQLHandler.test.ts",
            "node_modules/rollup/dist/rollup.d.ts",
            "node_modules/@supabase/auth-js/dist/module/GoTrueClient.d.ts",
            "node_modules/@supabase/auth-js/dist/module/lib/types.d.ts",
            "node_modules/@supabase/auth-js/dist/main/GoTrueClient.d.ts",
            "node_modules/@supabase/auth-js/dist/main/lib/types.d.ts",
            "node_modules/@supabase/auth-js/src/lib/types.ts",
            "node_modules/@supabase/auth-js/src/GoTrueClient.ts",
            "node_modules/@supabase/realtime-js/src/RealtimeClient.ts",
            "node_modules/@supabase/realtime-js/src/RealtimeChannel.ts",
            "node_modules/@supabase/storage-js/src/packages/StorageFileApi.ts",
            "node_modules/@supabase/postgrest-js/src/PostgrestFilterBuilder.ts",
            "node_modules/@supabase/postgrest-js/src/select-query-parser/utils.ts",
            "node_modules/@supabase/postgrest-js/src/select-query-parser/result.ts",
            "node_modules/expect-type/dist/index.d.ts",
            "node_modules/ansi-escapes/node_modules/type-fest/source/package-json.d.ts",
            "node_modules/ansi-escapes/node_modules/type-fest/source/tsconfig-json.d.ts",
            "node_modules/@vitest/runner/dist/tasks.d-CkscK4of.d.ts",
            "node_modules/@vitest/mocker/dist/node.d.ts",
            "node_modules/@vitest/expect/dist/index.d.ts",
            "node_modules/esbuild/lib/main.d.ts",
            "node_modules/minipass/dist/esm/index.d.ts",
            "node_modules/minipass/dist/commonjs/index.d.ts",
            "node_modules/@testing-library/jest-dom/types/matchers.d.ts",
            "node_modules/@jridgewell/trace-mapping/src/trace-mapping.ts",
            "node_modules/@jridgewell/gen-mapping/src/gen-mapping.ts",
            "node_modules/tough-cookie/dist/cookie/cookieJar.d.ts",
            "node_modules/entities/src/decode.ts",
            "node_modules/path-scurry/dist/esm/index.d.ts",
            "node_modules/path-scurry/dist/commonjs/index.d.ts",
            "../total"
          ],
          "duplicateCode": false,
          "missingTests": []
        },
        "optimizations": [
          {
            "type": "parallel-execution",
            "description": "Use batch file operations for faster processing",
            "impact": "high",
            "timeEstimate": "5 minutes",
            "howTo": "Use MultiEdit and batch Read operations in single message"
          },
          {
            "type": "refactor-complex",
            "description": "Refactor 186 complex files",
            "impact": "medium",
            "timeEstimate": "1 hour",
            "howTo": "Use Task(\"code-analyzer\", \"Refactor large files\") with Task(\"coder\", \"Implement refactoring\")"
          },
          {
            "type": "commit-changes",
            "description": "Commit pending changes",
            "impact": "low",
            "timeEstimate": "2 minutes",
            "howTo": "Use git commit workflow with proper message format"
          },
          {
            "type": "complete-todos",
            "description": "Complete 1138 TODOs",
            "impact": "medium",
            "timeEstimate": "11380 minutes",
            "howTo": "Use Grep(\"TODO|FIXME\") then Task(\"coder\", \"Complete all TODOs\")"
          }
        ],
        "newFeatures": [
          {
            "feature": "cicd-engineer agent",
            "benefit": "Automatically set up GitHub Actions CI/CD",
            "command": "Task(\"cicd-engineer\", \"Create GitHub Actions workflow\")"
          },
          {
            "feature": "api-docs agent",
            "benefit": "Generate OpenAPI documentation",
            "command": "Task(\"api-docs\", \"Generate API documentation\")"
          },
          {
            "feature": "swarm coordination",
            "benefit": "Use multiple agents in parallel for 2.8x speedup",
            "command": "Launch multiple Task() agents concurrently"
          }
        ],
        "timeToComplete": 11388
      }
    ],
    "recommendations": [
      {
        "project": "pachacuti",
        "type": "parallel-execution",
        "description": "Use batch file operations for faster processing",
        "impact": "high",
        "timeEstimate": "5 minutes",
        "implementation": "Use MultiEdit and batch Read operations in single message",
        "priority": "urgent"
      },
      {
        "project": "pachacuti",
        "type": "refactor-complex",
        "description": "Refactor 912 complex files",
        "impact": "medium",
        "timeEstimate": "1 hour",
        "implementation": "Use Task(\"code-analyzer\", \"Refactor large files\") with Task(\"coder\", \"Implement refactoring\")",
        "priority": "urgent"
      },
      {
        "project": "pachacuti",
        "type": "commit-changes",
        "description": "Commit pending changes",
        "impact": "low",
        "timeEstimate": "2 minutes",
        "implementation": "Use git commit workflow with proper message format",
        "priority": "urgent"
      },
      {
        "project": "pachacuti",
        "type": "complete-todos",
        "description": "Complete 8994 TODOs",
        "impact": "medium",
        "timeEstimate": "89940 minutes",
        "implementation": "Use Grep(\"TODO|FIXME\") then Task(\"coder\", \"Complete all TODOs\")",
        "priority": "low"
      },
      {
        "project": "pachacuti-session-recorder",
        "type": "parallel-execution",
        "description": "Use batch file operations for faster processing",
        "impact": "high",
        "timeEstimate": "5 minutes",
        "implementation": "Use MultiEdit and batch Read operations in single message",
        "priority": "urgent"
      },
      {
        "project": "pachacuti-session-recorder",
        "type": "refactor-complex",
        "description": "Refactor 128 complex files",
        "impact": "medium",
        "timeEstimate": "1 hour",
        "implementation": "Use Task(\"code-analyzer\", \"Refactor large files\") with Task(\"coder\", \"Implement refactoring\")",
        "priority": "urgent"
      },
      {
        "project": "pachacuti-session-recorder",
        "type": "commit-changes",
        "description": "Commit pending changes",
        "impact": "low",
        "timeEstimate": "2 minutes",
        "implementation": "Use git commit workflow with proper message format",
        "priority": "urgent"
      },
      {
        "project": "pachacuti-session-recorder",
        "type": "complete-todos",
        "description": "Complete 868 TODOs",
        "impact": "medium",
        "timeEstimate": "8680 minutes",
        "implementation": "Use Grep(\"TODO|FIXME\") then Task(\"coder\", \"Complete all TODOs\")",
        "priority": "low"
      },
      {
        "project": "pachacuti-shell-viewer-frontend",
        "type": "parallel-execution",
        "description": "Use batch file operations for faster processing",
        "impact": "high",
        "timeEstimate": "5 minutes",
        "implementation": "Use MultiEdit and batch Read operations in single message",
        "priority": "urgent"
      },
      {
        "project": "pachacuti-shell-viewer-frontend",
        "type": "refactor-complex",
        "description": "Refactor 147 complex files",
        "impact": "medium",
        "timeEstimate": "1 hour",
        "implementation": "Use Task(\"code-analyzer\", \"Refactor large files\") with Task(\"coder\", \"Implement refactoring\")",
        "priority": "urgent"
      },
      {
        "project": "pachacuti-shell-viewer-frontend",
        "type": "commit-changes",
        "description": "Commit pending changes",
        "impact": "low",
        "timeEstimate": "2 minutes",
        "implementation": "Use git commit workflow with proper message format",
        "priority": "urgent"
      },
      {
        "project": "pachacuti-shell-viewer-frontend",
        "type": "complete-todos",
        "description": "Complete 5193 TODOs",
        "impact": "medium",
        "timeEstimate": "51930 minutes",
        "implementation": "Use Grep(\"TODO|FIXME\") then Task(\"coder\", \"Complete all TODOs\")",
        "priority": "low"
      },
      {
        "project": "pachacuti-shell-viewer-backend",
        "type": "parallel-execution",
        "description": "Use batch file operations for faster processing",
        "impact": "high",
        "timeEstimate": "5 minutes",
        "implementation": "Use MultiEdit and batch Read operations in single message",
        "priority": "urgent"
      },
      {
        "project": "pachacuti-shell-viewer-backend",
        "type": "refactor-complex",
        "description": "Refactor 128 complex files",
        "impact": "medium",
        "timeEstimate": "1 hour",
        "implementation": "Use Task(\"code-analyzer\", \"Refactor large files\") with Task(\"coder\", \"Implement refactoring\")",
        "priority": "urgent"
      },
      {
        "project": "pachacuti-shell-viewer-backend",
        "type": "commit-changes",
        "description": "Commit pending changes",
        "impact": "low",
        "timeEstimate": "2 minutes",
        "implementation": "Use git commit workflow with proper message format",
        "priority": "urgent"
      },
      {
        "project": "pachacuti-shell-viewer-backend",
        "type": "complete-todos",
        "description": "Complete 692 TODOs",
        "impact": "medium",
        "timeEstimate": "6920 minutes",
        "implementation": "Use Grep(\"TODO|FIXME\") then Task(\"coder\", \"Complete all TODOs\")",
        "priority": "low"
      },
      {
        "project": "pend",
        "type": "add-tests",
        "description": "Add test coverage with TDD agents",
        "impact": "high",
        "timeEstimate": "30 minutes",
        "implementation": "Use Task(\"tester\", \"Generate comprehensive test suite\")",
        "priority": "high"
      },
      {
        "project": "pend",
        "type": "commit-changes",
        "description": "Commit pending changes",
        "impact": "low",
        "timeEstimate": "2 minutes",
        "implementation": "Use git commit workflow with proper message format",
        "priority": "urgent"
      },
      {
        "project": "fd-slicer",
        "type": "add-tests",
        "description": "Add test coverage with TDD agents",
        "impact": "high",
        "timeEstimate": "30 minutes",
        "implementation": "Use Task(\"tester\", \"Generate comprehensive test suite\")",
        "priority": "high"
      },
      {
        "project": "fd-slicer",
        "type": "commit-changes",
        "description": "Commit pending changes",
        "impact": "low",
        "timeEstimate": "2 minutes",
        "implementation": "Use git commit workflow with proper message format",
        "priority": "urgent"
      },
      {
        "project": "callsites",
        "type": "add-tests",
        "description": "Add test coverage with TDD agents",
        "impact": "high",
        "timeEstimate": "30 minutes",
        "implementation": "Use Task(\"tester\", \"Generate comprehensive test suite\")",
        "priority": "high"
      },
      {
        "project": "callsites",
        "type": "commit-changes",
        "description": "Commit pending changes",
        "impact": "low",
        "timeEstimate": "2 minutes",
        "implementation": "Use git commit workflow with proper message format",
        "priority": "urgent"
      },
      {
        "project": "callsites",
        "type": "complete-todos",
        "description": "Complete 2 TODOs",
        "impact": "medium",
        "timeEstimate": "20 minutes",
        "implementation": "Use Grep(\"TODO|FIXME\") then Task(\"coder\", \"Complete all TODOs\")",
        "priority": "high"
      },
      {
        "project": "zod",
        "type": "parallel-execution",
        "description": "Use batch file operations for faster processing",
        "impact": "high",
        "timeEstimate": "5 minutes",
        "implementation": "Use MultiEdit and batch Read operations in single message",
        "priority": "urgent"
      },
      {
        "project": "zod",
        "type": "refactor-complex",
        "description": "Refactor 24 complex files",
        "impact": "medium",
        "timeEstimate": "1 hour",
        "implementation": "Use Task(\"code-analyzer\", \"Refactor large files\") with Task(\"coder\", \"Implement refactoring\")",
        "priority": "urgent"
      },
      {
        "project": "zod",
        "type": "commit-changes",
        "description": "Commit pending changes",
        "impact": "low",
        "timeEstimate": "2 minutes",
        "implementation": "Use git commit workflow with proper message format",
        "priority": "urgent"
      },
      {
        "project": "zod",
        "type": "complete-todos",
        "description": "Complete 1 TODOs",
        "impact": "medium",
        "timeEstimate": "10 minutes",
        "implementation": "Use Grep(\"TODO|FIXME\") then Task(\"coder\", \"Complete all TODOs\")",
        "priority": "urgent"
      },
      {
        "project": "json-parse-even-better-errors",
        "type": "add-tests",
        "description": "Add test coverage with TDD agents",
        "impact": "high",
        "timeEstimate": "30 minutes",
        "implementation": "Use Task(\"tester\", \"Generate comprehensive test suite\")",
        "priority": "high"
      },
      {
        "project": "json-parse-even-better-errors",
        "type": "commit-changes",
        "description": "Commit pending changes",
        "impact": "low",
        "timeEstimate": "2 minutes",
        "implementation": "Use git commit workflow with proper message format",
        "priority": "urgent"
      },
      {
        "project": "typed-query-selector",
        "type": "add-tests",
        "description": "Add test coverage with TDD agents",
        "impact": "high",
        "timeEstimate": "30 minutes",
        "implementation": "Use Task(\"tester\", \"Generate comprehensive test suite\")",
        "priority": "high"
      },
      {
        "project": "typed-query-selector",
        "type": "commit-changes",
        "description": "Commit pending changes",
        "impact": "low",
        "timeEstimate": "2 minutes",
        "implementation": "Use git commit workflow with proper message format",
        "priority": "urgent"
      },
      {
        "project": "strip-ansi",
        "type": "add-tests",
        "description": "Add test coverage with TDD agents",
        "impact": "high",
        "timeEstimate": "30 minutes",
        "implementation": "Use Task(\"tester\", \"Generate comprehensive test suite\")",
        "priority": "high"
      },
      {
        "project": "strip-ansi",
        "type": "commit-changes",
        "description": "Commit pending changes",
        "impact": "low",
        "timeEstimate": "2 minutes",
        "implementation": "Use git commit workflow with proper message format",
        "priority": "urgent"
      },
      {
        "project": "proxy-agent",
        "type": "add-tests",
        "description": "Add test coverage with TDD agents",
        "impact": "high",
        "timeEstimate": "30 minutes",
        "implementation": "Use Task(\"tester\", \"Generate comprehensive test suite\")",
        "priority": "high"
      },
      {
        "project": "proxy-agent",
        "type": "commit-changes",
        "description": "Commit pending changes",
        "impact": "low",
        "timeEstimate": "2 minutes",
        "implementation": "Use git commit workflow with proper message format",
        "priority": "urgent"
      },
      {
        "project": "agent-base",
        "type": "add-tests",
        "description": "Add test coverage with TDD agents",
        "impact": "high",
        "timeEstimate": "30 minutes",
        "implementation": "Use Task(\"tester\", \"Generate comprehensive test suite\")",
        "priority": "high"
      },
      {
        "project": "agent-base",
        "type": "commit-changes",
        "description": "Commit pending changes",
        "impact": "low",
        "timeEstimate": "2 minutes",
        "implementation": "Use git commit workflow with proper message format",
        "priority": "urgent"
      },
      {
        "project": "text-decoder",
        "type": "add-tests",
        "description": "Add test coverage with TDD agents",
        "impact": "high",
        "timeEstimate": "30 minutes",
        "implementation": "Use Task(\"tester\", \"Generate comprehensive test suite\")",
        "priority": "high"
      },
      {
        "project": "text-decoder",
        "type": "commit-changes",
        "description": "Commit pending changes",
        "impact": "low",
        "timeEstimate": "2 minutes",
        "implementation": "Use git commit workflow with proper message format",
        "priority": "urgent"
      },
      {
        "project": "ms",
        "type": "add-tests",
        "description": "Add test coverage with TDD agents",
        "impact": "high",
        "timeEstimate": "30 minutes",
        "implementation": "Use Task(\"tester\", \"Generate comprehensive test suite\")",
        "priority": "high"
      },
      {
        "project": "ms",
        "type": "commit-changes",
        "description": "Commit pending changes",
        "impact": "low",
        "timeEstimate": "2 minutes",
        "implementation": "Use git commit workflow with proper message format",
        "priority": "urgent"
      },
      {
        "project": "dotenv",
        "type": "add-tests",
        "description": "Add test coverage with TDD agents",
        "impact": "high",
        "timeEstimate": "30 minutes",
        "implementation": "Use Task(\"tester\", \"Generate comprehensive test suite\")",
        "priority": "high"
      },
      {
        "project": "dotenv",
        "type": "commit-changes",
        "description": "Commit pending changes",
        "impact": "low",
        "timeEstimate": "2 minutes",
        "implementation": "Use git commit workflow with proper message format",
        "priority": "urgent"
      },
      {
        "project": "lru-cache",
        "type": "add-tests",
        "description": "Add test coverage with TDD agents",
        "impact": "high",
        "timeEstimate": "30 minutes",
        "implementation": "Use Task(\"tester\", \"Generate comprehensive test suite\")",
        "priority": "high"
      },
      {
        "project": "lru-cache",
        "type": "refactor-complex",
        "description": "Refactor 1 complex files",
        "impact": "medium",
        "timeEstimate": "1 hour",
        "implementation": "Use Task(\"code-analyzer\", \"Refactor large files\") with Task(\"coder\", \"Implement refactoring\")",
        "priority": "urgent"
      },
      {
        "project": "lru-cache",
        "type": "commit-changes",
        "description": "Commit pending changes",
        "impact": "low",
        "timeEstimate": "2 minutes",
        "implementation": "Use git commit workflow with proper message format",
        "priority": "urgent"
      },
      {
        "project": "require-directory",
        "type": "add-tests",
        "description": "Add test coverage with TDD agents",
        "impact": "high",
        "timeEstimate": "30 minutes",
        "implementation": "Use Task(\"tester\", \"Generate comprehensive test suite\")",
        "priority": "high"
      },
      {
        "project": "require-directory",
        "type": "commit-changes",
        "description": "Commit pending changes",
        "impact": "low",
        "timeEstimate": "2 minutes",
        "implementation": "Use git commit workflow with proper message format",
        "priority": "urgent"
      },
      {
        "project": "escalade",
        "type": "add-tests",
        "description": "Add test coverage with TDD agents",
        "impact": "high",
        "timeEstimate": "30 minutes",
        "implementation": "Use Task(\"tester\", \"Generate comprehensive test suite\")",
        "priority": "high"
      },
      {
        "project": "escalade",
        "type": "commit-changes",
        "description": "Commit pending changes",
        "impact": "low",
        "timeEstimate": "2 minutes",
        "implementation": "Use git commit workflow with proper message format",
        "priority": "urgent"
      },
      {
        "project": "ip-address",
        "type": "parallel-execution",
        "description": "Use batch file operations for faster processing",
        "impact": "high",
        "timeEstimate": "5 minutes",
        "implementation": "Use MultiEdit and batch Read operations in single message",
        "priority": "urgent"
      },
      {
        "project": "ip-address",
        "type": "add-tests",
        "description": "Add test coverage with TDD agents",
        "impact": "high",
        "timeEstimate": "30 minutes",
        "implementation": "Use Task(\"tester\", \"Generate comprehensive test suite\")",
        "priority": "high"
      },
      {
        "project": "ip-address",
        "type": "refactor-complex",
        "description": "Refactor 2 complex files",
        "impact": "medium",
        "timeEstimate": "1 hour",
        "implementation": "Use Task(\"code-analyzer\", \"Refactor large files\") with Task(\"coder\", \"Implement refactoring\")",
        "priority": "urgent"
      },
      {
        "project": "ip-address",
        "type": "commit-changes",
        "description": "Commit pending changes",
        "impact": "low",
        "timeEstimate": "2 minutes",
        "implementation": "Use git commit workflow with proper message format",
        "priority": "urgent"
      },
      {
        "project": "ip-address",
        "type": "complete-todos",
        "description": "Complete 8 TODOs",
        "impact": "medium",
        "timeEstimate": "80 minutes",
        "implementation": "Use Grep(\"TODO|FIXME\") then Task(\"coder\", \"Complete all TODOs\")",
        "priority": "medium"
      },
      {
        "project": "error-ex",
        "type": "add-tests",
        "description": "Add test coverage with TDD agents",
        "impact": "high",
        "timeEstimate": "30 minutes",
        "implementation": "Use Task(\"tester\", \"Generate comprehensive test suite\")",
        "priority": "high"
      },
      {
        "project": "error-ex",
        "type": "commit-changes",
        "description": "Commit pending changes",
        "impact": "low",
        "timeEstimate": "2 minutes",
        "implementation": "Use git commit workflow with proper message format",
        "priority": "urgent"
      },
      {
        "project": "progress",
        "type": "add-tests",
        "description": "Add test coverage with TDD agents",
        "impact": "high",
        "timeEstimate": "30 minutes",
        "implementation": "Use Task(\"tester\", \"Generate comprehensive test suite\")",
        "priority": "high"
      },
      {
        "project": "progress",
        "type": "commit-changes",
        "description": "Commit pending changes",
        "impact": "low",
        "timeEstimate": "2 minutes",
        "implementation": "Use git commit workflow with proper message format",
        "priority": "urgent"
      },
      {
        "project": "progress",
        "type": "complete-todos",
        "description": "Complete 1 TODOs",
        "impact": "medium",
        "timeEstimate": "10 minutes",
        "implementation": "Use Grep(\"TODO|FIXME\") then Task(\"coder\", \"Complete all TODOs\")",
        "priority": "urgent"
      },
      {
        "project": "puppeteer",
        "type": "parallel-execution",
        "description": "Use batch file operations for faster processing",
        "impact": "high",
        "timeEstimate": "5 minutes",
        "implementation": "Use MultiEdit and batch Read operations in single message",
        "priority": "urgent"
      },
      {
        "project": "puppeteer",
        "type": "add-tests",
        "description": "Add test coverage with TDD agents",
        "impact": "high",
        "timeEstimate": "30 minutes",
        "implementation": "Use Task(\"tester\", \"Generate comprehensive test suite\")",
        "priority": "high"
      },
      {
        "project": "puppeteer",
        "type": "refactor-complex",
        "description": "Refactor 2 complex files",
        "impact": "medium",
        "timeEstimate": "1 hour",
        "implementation": "Use Task(\"code-analyzer\", \"Refactor large files\") with Task(\"coder\", \"Implement refactoring\")",
        "priority": "urgent"
      },
      {
        "project": "puppeteer",
        "type": "commit-changes",
        "description": "Commit pending changes",
        "impact": "low",
        "timeEstimate": "2 minutes",
        "implementation": "Use git commit workflow with proper message format",
        "priority": "urgent"
      },
      {
        "project": "parse-json",
        "type": "add-tests",
        "description": "Add test coverage with TDD agents",
        "impact": "high",
        "timeEstimate": "30 minutes",
        "implementation": "Use Task(\"tester\", \"Generate comprehensive test suite\")",
        "priority": "high"
      },
      {
        "project": "parse-json",
        "type": "commit-changes",
        "description": "Commit pending changes",
        "impact": "low",
        "timeEstimate": "2 minutes",
        "implementation": "Use git commit workflow with proper message format",
        "priority": "urgent"
      },
      {
        "project": "buffer-crc32",
        "type": "add-tests",
        "description": "Add test coverage with TDD agents",
        "impact": "high",
        "timeEstimate": "30 minutes",
        "implementation": "Use Task(\"tester\", \"Generate comprehensive test suite\")",
        "priority": "high"
      },
      {
        "project": "buffer-crc32",
        "type": "commit-changes",
        "description": "Commit pending changes",
        "impact": "low",
        "timeEstimate": "2 minutes",
        "implementation": "Use git commit workflow with proper message format",
        "priority": "urgent"
      },
      {
        "project": "ast-types",
        "type": "parallel-execution",
        "description": "Use batch file operations for faster processing",
        "impact": "high",
        "timeEstimate": "5 minutes",
        "implementation": "Use MultiEdit and batch Read operations in single message",
        "priority": "urgent"
      },
      {
        "project": "ast-types",
        "type": "add-tests",
        "description": "Add test coverage with TDD agents",
        "impact": "high",
        "timeEstimate": "30 minutes",
        "implementation": "Use Task(\"tester\", \"Generate comprehensive test suite\")",
        "priority": "high"
      },
      {
        "project": "ast-types",
        "type": "refactor-complex",
        "description": "Refactor 3 complex files",
        "impact": "medium",
        "timeEstimate": "1 hour",
        "implementation": "Use Task(\"code-analyzer\", \"Refactor large files\") with Task(\"coder\", \"Implement refactoring\")",
        "priority": "urgent"
      },
      {
        "project": "ast-types",
        "type": "commit-changes",
        "description": "Commit pending changes",
        "impact": "low",
        "timeEstimate": "2 minutes",
        "implementation": "Use git commit workflow with proper message format",
        "priority": "urgent"
      },
      {
        "project": "ast-types",
        "type": "complete-todos",
        "description": "Complete 15 TODOs",
        "impact": "medium",
        "timeEstimate": "150 minutes",
        "implementation": "Use Grep(\"TODO|FIXME\") then Task(\"coder\", \"Complete all TODOs\")",
        "priority": "medium"
      },
      {
        "project": "extract-zip",
        "type": "add-tests",
        "description": "Add test coverage with TDD agents",
        "impact": "high",
        "timeEstimate": "30 minutes",
        "implementation": "Use Task(\"tester\", \"Generate comprehensive test suite\")",
        "priority": "high"
      },
      {
        "project": "extract-zip",
        "type": "commit-changes",
        "description": "Commit pending changes",
        "impact": "low",
        "timeEstimate": "2 minutes",
        "implementation": "Use git commit workflow with proper message format",
        "priority": "urgent"
      },
      {
        "project": "wrap-ansi",
        "type": "add-tests",
        "description": "Add test coverage with TDD agents",
        "impact": "high",
        "timeEstimate": "30 minutes",
        "implementation": "Use Task(\"tester\", \"Generate comprehensive test suite\")",
        "priority": "high"
      },
      {
        "project": "wrap-ansi",
        "type": "commit-changes",
        "description": "Commit pending changes",
        "impact": "low",
        "timeEstimate": "2 minutes",
        "implementation": "Use git commit workflow with proper message format",
        "priority": "urgent"
      },
      {
        "project": "y18n",
        "type": "add-tests",
        "description": "Add test coverage with TDD agents",
        "impact": "high",
        "timeEstimate": "30 minutes",
        "implementation": "Use Task(\"tester\", \"Generate comprehensive test suite\")",
        "priority": "high"
      },
      {
        "project": "y18n",
        "type": "commit-changes",
        "description": "Commit pending changes",
        "impact": "low",
        "timeEstimate": "2 minutes",
        "implementation": "Use git commit workflow with proper message format",
        "priority": "urgent"
      },
      {
        "project": "once",
        "type": "add-tests",
        "description": "Add test coverage with TDD agents",
        "impact": "high",
        "timeEstimate": "30 minutes",
        "implementation": "Use Task(\"tester\", \"Generate comprehensive test suite\")",
        "priority": "high"
      },
      {
        "project": "once",
        "type": "commit-changes",
        "description": "Commit pending changes",
        "impact": "low",
        "timeEstimate": "2 minutes",
        "implementation": "Use git commit workflow with proper message format",
        "priority": "urgent"
      },
      {
        "project": "bare-path",
        "type": "add-tests",
        "description": "Add test coverage with TDD agents",
        "impact": "high",
        "timeEstimate": "30 minutes",
        "implementation": "Use Task(\"tester\", \"Generate comprehensive test suite\")",
        "priority": "high"
      },
      {
        "project": "bare-path",
        "type": "commit-changes",
        "description": "Commit pending changes",
        "impact": "low",
        "timeEstimate": "2 minutes",
        "implementation": "Use git commit workflow with proper message format",
        "priority": "urgent"
      },
      {
        "project": "proxy-from-env",
        "type": "add-tests",
        "description": "Add test coverage with TDD agents",
        "impact": "high",
        "timeEstimate": "30 minutes",
        "implementation": "Use Task(\"tester\", \"Generate comprehensive test suite\")",
        "priority": "high"
      },
      {
        "project": "proxy-from-env",
        "type": "commit-changes",
        "description": "Commit pending changes",
        "impact": "low",
        "timeEstimate": "2 minutes",
        "implementation": "Use git commit workflow with proper message format",
        "priority": "urgent"
      },
      {
        "project": "proxy-from-env",
        "type": "complete-todos",
        "description": "Complete 1 TODOs",
        "impact": "medium",
        "timeEstimate": "10 minutes",
        "implementation": "Use Grep(\"TODO|FIXME\") then Task(\"coder\", \"Complete all TODOs\")",
        "priority": "urgent"
      },
      {
        "project": "get-uri",
        "type": "parallel-execution",
        "description": "Use batch file operations for faster processing",
        "impact": "high",
        "timeEstimate": "5 minutes",
        "implementation": "Use MultiEdit and batch Read operations in single message",
        "priority": "urgent"
      },
      {
        "project": "get-uri",
        "type": "add-tests",
        "description": "Add test coverage with TDD agents",
        "impact": "high",
        "timeEstimate": "30 minutes",
        "implementation": "Use Task(\"tester\", \"Generate comprehensive test suite\")",
        "priority": "high"
      },
      {
        "project": "get-uri",
        "type": "commit-changes",
        "description": "Commit pending changes",
        "impact": "low",
        "timeEstimate": "2 minutes",
        "implementation": "Use git commit workflow with proper message format",
        "priority": "urgent"
      },
      {
        "project": "get-uri",
        "type": "complete-todos",
        "description": "Complete 1 TODOs",
        "impact": "medium",
        "timeEstimate": "10 minutes",
        "implementation": "Use Grep(\"TODO|FIXME\") then Task(\"coder\", \"Complete all TODOs\")",
        "priority": "urgent"
      },
      {
        "project": "tslib",
        "type": "add-tests",
        "description": "Add test coverage with TDD agents",
        "impact": "high",
        "timeEstimate": "30 minutes",
        "implementation": "Use Task(\"tester\", \"Generate comprehensive test suite\")",
        "priority": "high"
      },
      {
        "project": "tslib",
        "type": "commit-changes",
        "description": "Commit pending changes",
        "impact": "low",
        "timeEstimate": "2 minutes",
        "implementation": "Use git commit workflow with proper message format",
        "priority": "urgent"
      },
      {
        "project": "argparse",
        "type": "add-tests",
        "description": "Add test coverage with TDD agents",
        "impact": "high",
        "timeEstimate": "30 minutes",
        "implementation": "Use Task(\"tester\", \"Generate comprehensive test suite\")",
        "priority": "high"
      },
      {
        "project": "argparse",
        "type": "commit-changes",
        "description": "Commit pending changes",
        "impact": "low",
        "timeEstimate": "2 minutes",
        "implementation": "Use git commit workflow with proper message format",
        "priority": "urgent"
      },
      {
        "project": "socks-proxy-agent",
        "type": "add-tests",
        "description": "Add test coverage with TDD agents",
        "impact": "high",
        "timeEstimate": "30 minutes",
        "implementation": "Use Task(\"tester\", \"Generate comprehensive test suite\")",
        "priority": "high"
      },
      {
        "project": "socks-proxy-agent",
        "type": "commit-changes",
        "description": "Commit pending changes",
        "impact": "low",
        "timeEstimate": "2 minutes",
        "implementation": "Use git commit workflow with proper message format",
        "priority": "urgent"
      },
      {
        "project": "is-fullwidth-code-point",
        "type": "add-tests",
        "description": "Add test coverage with TDD agents",
        "impact": "high",
        "timeEstimate": "30 minutes",
        "implementation": "Use Task(\"tester\", \"Generate comprehensive test suite\")",
        "priority": "high"
      },
      {
        "project": "is-fullwidth-code-point",
        "type": "commit-changes",
        "description": "Commit pending changes",
        "impact": "low",
        "timeEstimate": "2 minutes",
        "implementation": "Use git commit workflow with proper message format",
        "priority": "urgent"
      },
      {
        "project": "env-paths",
        "type": "add-tests",
        "description": "Add test coverage with TDD agents",
        "impact": "high",
        "timeEstimate": "30 minutes",
        "implementation": "Use Task(\"tester\", \"Generate comprehensive test suite\")",
        "priority": "high"
      },
      {
        "project": "env-paths",
        "type": "commit-changes",
        "description": "Commit pending changes",
        "impact": "low",
        "timeEstimate": "2 minutes",
        "implementation": "Use git commit workflow with proper message format",
        "priority": "urgent"
      },
      {
        "project": "env-paths",
        "type": "complete-todos",
        "description": "Complete 2 TODOs",
        "impact": "medium",
        "timeEstimate": "20 minutes",
        "implementation": "Use Grep(\"TODO|FIXME\") then Task(\"coder\", \"Complete all TODOs\")",
        "priority": "high"
      },
      {
        "project": "yargs-parser",
        "type": "add-tests",
        "description": "Add test coverage with TDD agents",
        "impact": "high",
        "timeEstimate": "30 minutes",
        "implementation": "Use Task(\"tester\", \"Generate comprehensive test suite\")",
        "priority": "high"
      },
      {
        "project": "yargs-parser",
        "type": "commit-changes",
        "description": "Commit pending changes",
        "impact": "low",
        "timeEstimate": "2 minutes",
        "implementation": "Use git commit workflow with proper message format",
        "priority": "urgent"
      },
      {
        "project": "yargs-parser",
        "type": "complete-todos",
        "description": "Complete 6 TODOs",
        "impact": "medium",
        "timeEstimate": "60 minutes",
        "implementation": "Use Grep(\"TODO|FIXME\") then Task(\"coder\", \"Complete all TODOs\")",
        "priority": "medium"
      },
      {
        "project": "color-name",
        "type": "add-tests",
        "description": "Add test coverage with TDD agents",
        "impact": "high",
        "timeEstimate": "30 minutes",
        "implementation": "Use Task(\"tester\", \"Generate comprehensive test suite\")",
        "priority": "high"
      },
      {
        "project": "color-name",
        "type": "commit-changes",
        "description": "Commit pending changes",
        "impact": "low",
        "timeEstimate": "2 minutes",
        "implementation": "Use git commit workflow with proper message format",
        "priority": "urgent"
      },
      {
        "project": "js-yaml",
        "type": "parallel-execution",
        "description": "Use batch file operations for faster processing",
        "impact": "high",
        "timeEstimate": "5 minutes",
        "implementation": "Use MultiEdit and batch Read operations in single message",
        "priority": "urgent"
      },
      {
        "project": "js-yaml",
        "type": "add-tests",
        "description": "Add test coverage with TDD agents",
        "impact": "high",
        "timeEstimate": "30 minutes",
        "implementation": "Use Task(\"tester\", \"Generate comprehensive test suite\")",
        "priority": "high"
      },
      {
        "project": "js-yaml",
        "type": "commit-changes",
        "description": "Commit pending changes",
        "impact": "low",
        "timeEstimate": "2 minutes",
        "implementation": "Use git commit workflow with proper message format",
        "priority": "urgent"
      },
      {
        "project": "js-yaml",
        "type": "complete-todos",
        "description": "Complete 4 TODOs",
        "impact": "medium",
        "timeEstimate": "40 minutes",
        "implementation": "Use Grep(\"TODO|FIXME\") then Task(\"coder\", \"Complete all TODOs\")",
        "priority": "medium"
      },
      {
        "project": "smart-buffer",
        "type": "add-tests",
        "description": "Add test coverage with TDD agents",
        "impact": "high",
        "timeEstimate": "30 minutes",
        "implementation": "Use Task(\"tester\", \"Generate comprehensive test suite\")",
        "priority": "high"
      },
      {
        "project": "smart-buffer",
        "type": "refactor-complex",
        "description": "Refactor 2 complex files",
        "impact": "medium",
        "timeEstimate": "1 hour",
        "implementation": "Use Task(\"code-analyzer\", \"Refactor large files\") with Task(\"coder\", \"Implement refactoring\")",
        "priority": "urgent"
      },
      {
        "project": "smart-buffer",
        "type": "commit-changes",
        "description": "Commit pending changes",
        "impact": "low",
        "timeEstimate": "2 minutes",
        "implementation": "Use git commit workflow with proper message format",
        "priority": "urgent"
      },
      {
        "project": "parent-module",
        "type": "add-tests",
        "description": "Add test coverage with TDD agents",
        "impact": "high",
        "timeEstimate": "30 minutes",
        "implementation": "Use Task(\"tester\", \"Generate comprehensive test suite\")",
        "priority": "high"
      },
      {
        "project": "parent-module",
        "type": "commit-changes",
        "description": "Commit pending changes",
        "impact": "low",
        "timeEstimate": "2 minutes",
        "implementation": "Use git commit workflow with proper message format",
        "priority": "urgent"
      },
      {
        "project": "devtools-protocol",
        "type": "add-tests",
        "description": "Add test coverage with TDD agents",
        "impact": "high",
        "timeEstimate": "30 minutes",
        "implementation": "Use Task(\"tester\", \"Generate comprehensive test suite\")",
        "priority": "high"
      },
      {
        "project": "devtools-protocol",
        "type": "refactor-complex",
        "description": "Refactor 5 complex files",
        "impact": "medium",
        "timeEstimate": "1 hour",
        "implementation": "Use Task(\"code-analyzer\", \"Refactor large files\") with Task(\"coder\", \"Implement refactoring\")",
        "priority": "urgent"
      },
      {
        "project": "devtools-protocol",
        "type": "commit-changes",
        "description": "Commit pending changes",
        "impact": "low",
        "timeEstimate": "2 minutes",
        "implementation": "Use git commit workflow with proper message format",
        "priority": "urgent"
      },
      {
        "project": "devtools-protocol",
        "type": "complete-todos",
        "description": "Complete 17 TODOs",
        "impact": "medium",
        "timeEstimate": "170 minutes",
        "implementation": "Use Grep(\"TODO|FIXME\") then Task(\"coder\", \"Complete all TODOs\")",
        "priority": "medium"
      },
      {
        "project": "tar-stream",
        "type": "add-tests",
        "description": "Add test coverage with TDD agents",
        "impact": "high",
        "timeEstimate": "30 minutes",
        "implementation": "Use Task(\"tester\", \"Generate comprehensive test suite\")",
        "priority": "high"
      },
      {
        "project": "tar-stream",
        "type": "commit-changes",
        "description": "Commit pending changes",
        "impact": "low",
        "timeEstimate": "2 minutes",
        "implementation": "Use git commit workflow with proper message format",
        "priority": "urgent"
      },
      {
        "project": "tar-stream",
        "type": "complete-todos",
        "description": "Complete 1 TODOs",
        "impact": "medium",
        "timeEstimate": "10 minutes",
        "implementation": "Use Grep(\"TODO|FIXME\") then Task(\"coder\", \"Complete all TODOs\")",
        "priority": "urgent"
      },
      {
        "project": "bare-fs",
        "type": "add-tests",
        "description": "Add test coverage with TDD agents",
        "impact": "high",
        "timeEstimate": "30 minutes",
        "implementation": "Use Task(\"tester\", \"Generate comprehensive test suite\")",
        "priority": "high"
      },
      {
        "project": "bare-fs",
        "type": "refactor-complex",
        "description": "Refactor 2 complex files",
        "impact": "medium",
        "timeEstimate": "1 hour",
        "implementation": "Use Task(\"code-analyzer\", \"Refactor large files\") with Task(\"coder\", \"Implement refactoring\")",
        "priority": "urgent"
      },
      {
        "project": "bare-fs",
        "type": "commit-changes",
        "description": "Commit pending changes",
        "impact": "low",
        "timeEstimate": "2 minutes",
        "implementation": "Use git commit workflow with proper message format",
        "priority": "urgent"
      },
      {
        "project": "netmask",
        "type": "add-tests",
        "description": "Add test coverage with TDD agents",
        "impact": "high",
        "timeEstimate": "30 minutes",
        "implementation": "Use Task(\"tester\", \"Generate comprehensive test suite\")",
        "priority": "high"
      },
      {
        "project": "netmask",
        "type": "commit-changes",
        "description": "Commit pending changes",
        "impact": "low",
        "timeEstimate": "2 minutes",
        "implementation": "Use git commit workflow with proper message format",
        "priority": "urgent"
      },
      {
        "project": "undici-types",
        "type": "parallel-execution",
        "description": "Use batch file operations for faster processing",
        "impact": "high",
        "timeEstimate": "5 minutes",
        "implementation": "Use MultiEdit and batch Read operations in single message",
        "priority": "urgent"
      },
      {
        "project": "undici-types",
        "type": "add-tests",
        "description": "Add test coverage with TDD agents",
        "impact": "high",
        "timeEstimate": "30 minutes",
        "implementation": "Use Task(\"tester\", \"Generate comprehensive test suite\")",
        "priority": "high"
      },
      {
        "project": "undici-types",
        "type": "refactor-complex",
        "description": "Refactor 1 complex files",
        "impact": "medium",
        "timeEstimate": "1 hour",
        "implementation": "Use Task(\"code-analyzer\", \"Refactor large files\") with Task(\"coder\", \"Implement refactoring\")",
        "priority": "urgent"
      },
      {
        "project": "undici-types",
        "type": "commit-changes",
        "description": "Commit pending changes",
        "impact": "low",
        "timeEstimate": "2 minutes",
        "implementation": "Use git commit workflow with proper message format",
        "priority": "urgent"
      },
      {
        "project": "undici-types",
        "type": "complete-todos",
        "description": "Complete 17 TODOs",
        "impact": "medium",
        "timeEstimate": "170 minutes",
        "implementation": "Use Grep(\"TODO|FIXME\") then Task(\"coder\", \"Complete all TODOs\")",
        "priority": "medium"
      },
      {
        "project": "end-of-stream",
        "type": "add-tests",
        "description": "Add test coverage with TDD agents",
        "impact": "high",
        "timeEstimate": "30 minutes",
        "implementation": "Use Task(\"tester\", \"Generate comprehensive test suite\")",
        "priority": "high"
      },
      {
        "project": "end-of-stream",
        "type": "commit-changes",
        "description": "Commit pending changes",
        "impact": "low",
        "timeEstimate": "2 minutes",
        "implementation": "Use git commit workflow with proper message format",
        "priority": "urgent"
      },
      {
        "project": "bare-os",
        "type": "add-tests",
        "description": "Add test coverage with TDD agents",
        "impact": "high",
        "timeEstimate": "30 minutes",
        "implementation": "Use Task(\"tester\", \"Generate comprehensive test suite\")",
        "priority": "high"
      },
      {
        "project": "bare-os",
        "type": "commit-changes",
        "description": "Commit pending changes",
        "impact": "low",
        "timeEstimate": "2 minutes",
        "implementation": "Use git commit workflow with proper message format",
        "priority": "urgent"
      },
      {
        "project": "esutils",
        "type": "add-tests",
        "description": "Add test coverage with TDD agents",
        "impact": "high",
        "timeEstimate": "30 minutes",
        "implementation": "Use Task(\"tester\", \"Generate comprehensive test suite\")",
        "priority": "high"
      },
      {
        "project": "esutils",
        "type": "commit-changes",
        "description": "Commit pending changes",
        "impact": "low",
        "timeEstimate": "2 minutes",
        "implementation": "Use git commit workflow with proper message format",
        "priority": "urgent"
      },
      {
        "project": "bare-stream",
        "type": "add-tests",
        "description": "Add test coverage with TDD agents",
        "impact": "high",
        "timeEstimate": "30 minutes",
        "implementation": "Use Task(\"tester\", \"Generate comprehensive test suite\")",
        "priority": "high"
      },
      {
        "project": "bare-stream",
        "type": "commit-changes",
        "description": "Commit pending changes",
        "impact": "low",
        "timeEstimate": "2 minutes",
        "implementation": "Use git commit workflow with proper message format",
        "priority": "urgent"
      },
      {
        "project": "ansi-regex",
        "type": "add-tests",
        "description": "Add test coverage with TDD agents",
        "impact": "high",
        "timeEstimate": "30 minutes",
        "implementation": "Use Task(\"tester\", \"Generate comprehensive test suite\")",
        "priority": "high"
      },
      {
        "project": "ansi-regex",
        "type": "commit-changes",
        "description": "Commit pending changes",
        "impact": "low",
        "timeEstimate": "2 minutes",
        "implementation": "Use git commit workflow with proper message format",
        "priority": "urgent"
      },
      {
        "project": "esprima",
        "type": "add-tests",
        "description": "Add test coverage with TDD agents",
        "impact": "high",
        "timeEstimate": "30 minutes",
        "implementation": "Use Task(\"tester\", \"Generate comprehensive test suite\")",
        "priority": "high"
      },
      {
        "project": "esprima",
        "type": "commit-changes",
        "description": "Commit pending changes",
        "impact": "low",
        "timeEstimate": "2 minutes",
        "implementation": "Use git commit workflow with proper message format",
        "priority": "urgent"
      },
      {
        "project": "basic-ftp",
        "type": "parallel-execution",
        "description": "Use batch file operations for faster processing",
        "impact": "high",
        "timeEstimate": "5 minutes",
        "implementation": "Use MultiEdit and batch Read operations in single message",
        "priority": "urgent"
      },
      {
        "project": "basic-ftp",
        "type": "add-tests",
        "description": "Add test coverage with TDD agents",
        "impact": "high",
        "timeEstimate": "30 minutes",
        "implementation": "Use Task(\"tester\", \"Generate comprehensive test suite\")",
        "priority": "high"
      },
      {
        "project": "basic-ftp",
        "type": "refactor-complex",
        "description": "Refactor 1 complex files",
        "impact": "medium",
        "timeEstimate": "1 hour",
        "implementation": "Use Task(\"code-analyzer\", \"Refactor large files\") with Task(\"coder\", \"Implement refactoring\")",
        "priority": "urgent"
      },
      {
        "project": "basic-ftp",
        "type": "commit-changes",
        "description": "Commit pending changes",
        "impact": "low",
        "timeEstimate": "2 minutes",
        "implementation": "Use git commit workflow with proper message format",
        "priority": "urgent"
      },
      {
        "project": "basic-ftp",
        "type": "complete-todos",
        "description": "Complete 2 TODOs",
        "impact": "medium",
        "timeEstimate": "20 minutes",
        "implementation": "Use Grep(\"TODO|FIXME\") then Task(\"coder\", \"Complete all TODOs\")",
        "priority": "high"
      },
      {
        "project": "color-convert",
        "type": "add-tests",
        "description": "Add test coverage with TDD agents",
        "impact": "high",
        "timeEstimate": "30 minutes",
        "implementation": "Use Task(\"tester\", \"Generate comprehensive test suite\")",
        "priority": "high"
      },
      {
        "project": "color-convert",
        "type": "commit-changes",
        "description": "Commit pending changes",
        "impact": "low",
        "timeEstimate": "2 minutes",
        "implementation": "Use git commit workflow with proper message format",
        "priority": "urgent"
      },
      {
        "project": "get-caller-file",
        "type": "add-tests",
        "description": "Add test coverage with TDD agents",
        "impact": "high",
        "timeEstimate": "30 minutes",
        "implementation": "Use Task(\"tester\", \"Generate comprehensive test suite\")",
        "priority": "high"
      },
      {
        "project": "get-caller-file",
        "type": "commit-changes",
        "description": "Commit pending changes",
        "impact": "low",
        "timeEstimate": "2 minutes",
        "implementation": "Use git commit workflow with proper message format",
        "priority": "urgent"
      },
      {
        "project": "picocolors",
        "type": "add-tests",
        "description": "Add test coverage with TDD agents",
        "impact": "high",
        "timeEstimate": "30 minutes",
        "implementation": "Use Task(\"tester\", \"Generate comprehensive test suite\")",
        "priority": "high"
      },
      {
        "project": "picocolors",
        "type": "commit-changes",
        "description": "Commit pending changes",
        "impact": "low",
        "timeEstimate": "2 minutes",
        "implementation": "Use git commit workflow with proper message format",
        "priority": "urgent"
      },
      {
        "project": "lines-and-columns",
        "type": "add-tests",
        "description": "Add test coverage with TDD agents",
        "impact": "high",
        "timeEstimate": "30 minutes",
        "implementation": "Use Task(\"tester\", \"Generate comprehensive test suite\")",
        "priority": "high"
      },
      {
        "project": "lines-and-columns",
        "type": "commit-changes",
        "description": "Commit pending changes",
        "impact": "low",
        "timeEstimate": "2 minutes",
        "implementation": "Use git commit workflow with proper message format",
        "priority": "urgent"
      },
      {
        "project": "semver",
        "type": "parallel-execution",
        "description": "Use batch file operations for faster processing",
        "impact": "high",
        "timeEstimate": "5 minutes",
        "implementation": "Use MultiEdit and batch Read operations in single message",
        "priority": "urgent"
      },
      {
        "project": "semver",
        "type": "add-tests",
        "description": "Add test coverage with TDD agents",
        "impact": "high",
        "timeEstimate": "30 minutes",
        "implementation": "Use Task(\"tester\", \"Generate comprehensive test suite\")",
        "priority": "high"
      },
      {
        "project": "semver",
        "type": "commit-changes",
        "description": "Commit pending changes",
        "impact": "low",
        "timeEstimate": "2 minutes",
        "implementation": "Use git commit workflow with proper message format",
        "priority": "urgent"
      },
      {
        "project": "semver",
        "type": "complete-todos",
        "description": "Complete 1 TODOs",
        "impact": "medium",
        "timeEstimate": "10 minutes",
        "implementation": "Use Grep(\"TODO|FIXME\") then Task(\"coder\", \"Complete all TODOs\")",
        "priority": "urgent"
      },
      {
        "project": "b4a",
        "type": "add-tests",
        "description": "Add test coverage with TDD agents",
        "impact": "high",
        "timeEstimate": "30 minutes",
        "implementation": "Use Task(\"tester\", \"Generate comprehensive test suite\")",
        "priority": "high"
      },
      {
        "project": "b4a",
        "type": "commit-changes",
        "description": "Commit pending changes",
        "impact": "low",
        "timeEstimate": "2 minutes",
        "implementation": "Use git commit workflow with proper message format",
        "priority": "urgent"
      },
      {
        "project": "chromium-bidi",
        "type": "parallel-execution",
        "description": "Use batch file operations for faster processing",
        "impact": "high",
        "timeEstimate": "5 minutes",
        "implementation": "Use MultiEdit and batch Read operations in single message",
        "priority": "urgent"
      },
      {
        "project": "chromium-bidi",
        "type": "add-tests",
        "description": "Add test coverage with TDD agents",
        "impact": "high",
        "timeEstimate": "30 minutes",
        "implementation": "Use Task(\"tester\", \"Generate comprehensive test suite\")",
        "priority": "high"
      },
      {
        "project": "chromium-bidi",
        "type": "refactor-complex",
        "description": "Refactor 7 complex files",
        "impact": "medium",
        "timeEstimate": "1 hour",
        "implementation": "Use Task(\"code-analyzer\", \"Refactor large files\") with Task(\"coder\", \"Implement refactoring\")",
        "priority": "urgent"
      },
      {
        "project": "chromium-bidi",
        "type": "commit-changes",
        "description": "Commit pending changes",
        "impact": "low",
        "timeEstimate": "2 minutes",
        "implementation": "Use git commit workflow with proper message format",
        "priority": "urgent"
      },
      {
        "project": "chromium-bidi",
        "type": "complete-todos",
        "description": "Complete 154 TODOs",
        "impact": "medium",
        "timeEstimate": "1540 minutes",
        "implementation": "Use Grep(\"TODO|FIXME\") then Task(\"coder\", \"Complete all TODOs\")",
        "priority": "low"
      },
      {
        "project": "estraverse",
        "type": "add-tests",
        "description": "Add test coverage with TDD agents",
        "impact": "high",
        "timeEstimate": "30 minutes",
        "implementation": "Use Task(\"tester\", \"Generate comprehensive test suite\")",
        "priority": "high"
      },
      {
        "project": "estraverse",
        "type": "commit-changes",
        "description": "Commit pending changes",
        "impact": "low",
        "timeEstimate": "2 minutes",
        "implementation": "Use git commit workflow with proper message format",
        "priority": "urgent"
      },
      {
        "project": "ansi-styles",
        "type": "add-tests",
        "description": "Add test coverage with TDD agents",
        "impact": "high",
        "timeEstimate": "30 minutes",
        "implementation": "Use Task(\"tester\", \"Generate comprehensive test suite\")",
        "priority": "high"
      },
      {
        "project": "ansi-styles",
        "type": "commit-changes",
        "description": "Commit pending changes",
        "impact": "low",
        "timeEstimate": "2 minutes",
        "implementation": "Use git commit workflow with proper message format",
        "priority": "urgent"
      },
      {
        "project": "js-tokens",
        "type": "add-tests",
        "description": "Add test coverage with TDD agents",
        "impact": "high",
        "timeEstimate": "30 minutes",
        "implementation": "Use Task(\"tester\", \"Generate comprehensive test suite\")",
        "priority": "high"
      },
      {
        "project": "js-tokens",
        "type": "commit-changes",
        "description": "Commit pending changes",
        "impact": "low",
        "timeEstimate": "2 minutes",
        "implementation": "Use git commit workflow with proper message format",
        "priority": "urgent"
      },
      {
        "project": "fast-fifo",
        "type": "add-tests",
        "description": "Add test coverage with TDD agents",
        "impact": "high",
        "timeEstimate": "30 minutes",
        "implementation": "Use Task(\"tester\", \"Generate comprehensive test suite\")",
        "priority": "high"
      },
      {
        "project": "fast-fifo",
        "type": "commit-changes",
        "description": "Commit pending changes",
        "impact": "low",
        "timeEstimate": "2 minutes",
        "implementation": "Use git commit workflow with proper message format",
        "priority": "urgent"
      },
      {
        "project": "pump",
        "type": "add-tests",
        "description": "Add test coverage with TDD agents",
        "impact": "high",
        "timeEstimate": "30 minutes",
        "implementation": "Use Task(\"tester\", \"Generate comprehensive test suite\")",
        "priority": "high"
      },
      {
        "project": "pump",
        "type": "commit-changes",
        "description": "Commit pending changes",
        "impact": "low",
        "timeEstimate": "2 minutes",
        "implementation": "Use git commit workflow with proper message format",
        "priority": "urgent"
      },
      {
        "project": "get-stream",
        "type": "add-tests",
        "description": "Add test coverage with TDD agents",
        "impact": "high",
        "timeEstimate": "30 minutes",
        "implementation": "Use Task(\"tester\", \"Generate comprehensive test suite\")",
        "priority": "high"
      },
      {
        "project": "get-stream",
        "type": "commit-changes",
        "description": "Commit pending changes",
        "impact": "low",
        "timeEstimate": "2 minutes",
        "implementation": "Use git commit workflow with proper message format",
        "priority": "urgent"
      },
      {
        "project": "get-stream",
        "type": "complete-todos",
        "description": "Complete 2 TODOs",
        "impact": "medium",
        "timeEstimate": "20 minutes",
        "implementation": "Use Grep(\"TODO|FIXME\") then Task(\"coder\", \"Complete all TODOs\")",
        "priority": "high"
      },
      {
        "project": "is-arrayish",
        "type": "add-tests",
        "description": "Add test coverage with TDD agents",
        "impact": "high",
        "timeEstimate": "30 minutes",
        "implementation": "Use Task(\"tester\", \"Generate comprehensive test suite\")",
        "priority": "high"
      },
      {
        "project": "is-arrayish",
        "type": "commit-changes",
        "description": "Commit pending changes",
        "impact": "low",
        "timeEstimate": "2 minutes",
        "implementation": "Use git commit workflow with proper message format",
        "priority": "urgent"
      },
      {
        "project": "cliui",
        "type": "add-tests",
        "description": "Add test coverage with TDD agents",
        "impact": "high",
        "timeEstimate": "30 minutes",
        "implementation": "Use Task(\"tester\", \"Generate comprehensive test suite\")",
        "priority": "high"
      },
      {
        "project": "cliui",
        "type": "commit-changes",
        "description": "Commit pending changes",
        "impact": "low",
        "timeEstimate": "2 minutes",
        "implementation": "Use git commit workflow with proper message format",
        "priority": "urgent"
      },
      {
        "project": "cliui",
        "type": "complete-todos",
        "description": "Complete 1 TODOs",
        "impact": "medium",
        "timeEstimate": "10 minutes",
        "implementation": "Use Grep(\"TODO|FIXME\") then Task(\"coder\", \"Complete all TODOs\")",
        "priority": "urgent"
      },
      {
        "project": "yargs",
        "type": "parallel-execution",
        "description": "Use batch file operations for faster processing",
        "impact": "high",
        "timeEstimate": "5 minutes",
        "implementation": "Use MultiEdit and batch Read operations in single message",
        "priority": "urgent"
      },
      {
        "project": "yargs",
        "type": "add-tests",
        "description": "Add test coverage with TDD agents",
        "impact": "high",
        "timeEstimate": "30 minutes",
        "implementation": "Use Task(\"tester\", \"Generate comprehensive test suite\")",
        "priority": "high"
      },
      {
        "project": "yargs",
        "type": "commit-changes",
        "description": "Commit pending changes",
        "impact": "low",
        "timeEstimate": "2 minutes",
        "implementation": "Use git commit workflow with proper message format",
        "priority": "urgent"
      },
      {
        "project": "pac-proxy-agent",
        "type": "add-tests",
        "description": "Add test coverage with TDD agents",
        "impact": "high",
        "timeEstimate": "30 minutes",
        "implementation": "Use Task(\"tester\", \"Generate comprehensive test suite\")",
        "priority": "high"
      },
      {
        "project": "pac-proxy-agent",
        "type": "commit-changes",
        "description": "Commit pending changes",
        "impact": "low",
        "timeEstimate": "2 minutes",
        "implementation": "Use git commit workflow with proper message format",
        "priority": "urgent"
      },
      {
        "project": "tar-fs",
        "type": "add-tests",
        "description": "Add test coverage with TDD agents",
        "impact": "high",
        "timeEstimate": "30 minutes",
        "implementation": "Use Task(\"tester\", \"Generate comprehensive test suite\")",
        "priority": "high"
      },
      {
        "project": "tar-fs",
        "type": "commit-changes",
        "description": "Commit pending changes",
        "impact": "low",
        "timeEstimate": "2 minutes",
        "implementation": "Use git commit workflow with proper message format",
        "priority": "urgent"
      },
      {
        "project": "tar-fs",
        "type": "complete-todos",
        "description": "Complete 2 TODOs",
        "impact": "medium",
        "timeEstimate": "20 minutes",
        "implementation": "Use Grep(\"TODO|FIXME\") then Task(\"coder\", \"Complete all TODOs\")",
        "priority": "high"
      },
      {
        "project": "socks",
        "type": "parallel-execution",
        "description": "Use batch file operations for faster processing",
        "impact": "high",
        "timeEstimate": "5 minutes",
        "implementation": "Use MultiEdit and batch Read operations in single message",
        "priority": "urgent"
      },
      {
        "project": "socks",
        "type": "add-tests",
        "description": "Add test coverage with TDD agents",
        "impact": "high",
        "timeEstimate": "30 minutes",
        "implementation": "Use Task(\"tester\", \"Generate comprehensive test suite\")",
        "priority": "high"
      },
      {
        "project": "socks",
        "type": "commit-changes",
        "description": "Commit pending changes",
        "impact": "low",
        "timeEstimate": "2 minutes",
        "implementation": "Use git commit workflow with proper message format",
        "priority": "urgent"
      },
      {
        "project": "import-fresh",
        "type": "add-tests",
        "description": "Add test coverage with TDD agents",
        "impact": "high",
        "timeEstimate": "30 minutes",
        "implementation": "Use Task(\"tester\", \"Generate comprehensive test suite\")",
        "priority": "high"
      },
      {
        "project": "import-fresh",
        "type": "commit-changes",
        "description": "Commit pending changes",
        "impact": "low",
        "timeEstimate": "2 minutes",
        "implementation": "Use git commit workflow with proper message format",
        "priority": "urgent"
      },
      {
        "project": "source-map",
        "type": "parallel-execution",
        "description": "Use batch file operations for faster processing",
        "impact": "high",
        "timeEstimate": "5 minutes",
        "implementation": "Use MultiEdit and batch Read operations in single message",
        "priority": "urgent"
      },
      {
        "project": "source-map",
        "type": "add-tests",
        "description": "Add test coverage with TDD agents",
        "impact": "high",
        "timeEstimate": "30 minutes",
        "implementation": "Use Task(\"tester\", \"Generate comprehensive test suite\")",
        "priority": "high"
      },
      {
        "project": "source-map",
        "type": "commit-changes",
        "description": "Commit pending changes",
        "impact": "low",
        "timeEstimate": "2 minutes",
        "implementation": "Use git commit workflow with proper message format",
        "priority": "urgent"
      },
      {
        "project": "degenerator",
        "type": "add-tests",
        "description": "Add test coverage with TDD agents",
        "impact": "high",
        "timeEstimate": "30 minutes",
        "implementation": "Use Task(\"tester\", \"Generate comprehensive test suite\")",
        "priority": "high"
      },
      {
        "project": "degenerator",
        "type": "commit-changes",
        "description": "Commit pending changes",
        "impact": "low",
        "timeEstimate": "2 minutes",
        "implementation": "Use git commit workflow with proper message format",
        "priority": "urgent"
      },
      {
        "project": "puppeteer-core",
        "type": "parallel-execution",
        "description": "Use batch file operations for faster processing",
        "impact": "high",
        "timeEstimate": "5 minutes",
        "implementation": "Use MultiEdit and batch Read operations in single message",
        "priority": "urgent"
      },
      {
        "project": "puppeteer-core",
        "type": "add-tests",
        "description": "Add test coverage with TDD agents",
        "impact": "high",
        "timeEstimate": "30 minutes",
        "implementation": "Use Task(\"tester\", \"Generate comprehensive test suite\")",
        "priority": "high"
      },
      {
        "project": "puppeteer-core",
        "type": "refactor-complex",
        "description": "Refactor 31 complex files",
        "impact": "medium",
        "timeEstimate": "1 hour",
        "implementation": "Use Task(\"code-analyzer\", \"Refactor large files\") with Task(\"coder\", \"Implement refactoring\")",
        "priority": "urgent"
      },
      {
        "project": "puppeteer-core",
        "type": "commit-changes",
        "description": "Commit pending changes",
        "impact": "low",
        "timeEstimate": "2 minutes",
        "implementation": "Use git commit workflow with proper message format",
        "priority": "urgent"
      },
      {
        "project": "puppeteer-core",
        "type": "complete-todos",
        "description": "Complete 79 TODOs",
        "impact": "medium",
        "timeEstimate": "790 minutes",
        "implementation": "Use Grep(\"TODO|FIXME\") then Task(\"coder\", \"Complete all TODOs\")",
        "priority": "low"
      },
      {
        "project": "escodegen",
        "type": "add-tests",
        "description": "Add test coverage with TDD agents",
        "impact": "high",
        "timeEstimate": "30 minutes",
        "implementation": "Use Task(\"tester\", \"Generate comprehensive test suite\")",
        "priority": "high"
      },
      {
        "project": "escodegen",
        "type": "commit-changes",
        "description": "Commit pending changes",
        "impact": "low",
        "timeEstimate": "2 minutes",
        "implementation": "Use git commit workflow with proper message format",
        "priority": "urgent"
      },
      {
        "project": "cosmiconfig",
        "type": "parallel-execution",
        "description": "Use batch file operations for faster processing",
        "impact": "high",
        "timeEstimate": "5 minutes",
        "implementation": "Use MultiEdit and batch Read operations in single message",
        "priority": "urgent"
      },
      {
        "project": "cosmiconfig",
        "type": "add-tests",
        "description": "Add test coverage with TDD agents",
        "impact": "high",
        "timeEstimate": "30 minutes",
        "implementation": "Use Task(\"tester\", \"Generate comprehensive test suite\")",
        "priority": "high"
      },
      {
        "project": "cosmiconfig",
        "type": "commit-changes",
        "description": "Commit pending changes",
        "impact": "low",
        "timeEstimate": "2 minutes",
        "implementation": "Use git commit workflow with proper message format",
        "priority": "urgent"
      },
      {
        "project": "https-proxy-agent",
        "type": "add-tests",
        "description": "Add test coverage with TDD agents",
        "impact": "high",
        "timeEstimate": "30 minutes",
        "implementation": "Use Task(\"tester\", \"Generate comprehensive test suite\")",
        "priority": "high"
      },
      {
        "project": "https-proxy-agent",
        "type": "commit-changes",
        "description": "Commit pending changes",
        "impact": "low",
        "timeEstimate": "2 minutes",
        "implementation": "Use git commit workflow with proper message format",
        "priority": "urgent"
      },
      {
        "project": "string-width",
        "type": "add-tests",
        "description": "Add test coverage with TDD agents",
        "impact": "high",
        "timeEstimate": "30 minutes",
        "implementation": "Use Task(\"tester\", \"Generate comprehensive test suite\")",
        "priority": "high"
      },
      {
        "project": "string-width",
        "type": "commit-changes",
        "description": "Commit pending changes",
        "impact": "low",
        "timeEstimate": "2 minutes",
        "implementation": "Use git commit workflow with proper message format",
        "priority": "urgent"
      },
      {
        "project": "string-width",
        "type": "complete-todos",
        "description": "Complete 2 TODOs",
        "impact": "medium",
        "timeEstimate": "20 minutes",
        "implementation": "Use Grep(\"TODO|FIXME\") then Task(\"coder\", \"Complete all TODOs\")",
        "priority": "high"
      },
      {
        "project": "streamx",
        "type": "add-tests",
        "description": "Add test coverage with TDD agents",
        "impact": "high",
        "timeEstimate": "30 minutes",
        "implementation": "Use Task(\"tester\", \"Generate comprehensive test suite\")",
        "priority": "high"
      },
      {
        "project": "streamx",
        "type": "commit-changes",
        "description": "Commit pending changes",
        "impact": "low",
        "timeEstimate": "2 minutes",
        "implementation": "Use git commit workflow with proper message format",
        "priority": "urgent"
      },
      {
        "project": "streamx",
        "type": "complete-todos",
        "description": "Complete 1 TODOs",
        "impact": "medium",
        "timeEstimate": "10 minutes",
        "implementation": "Use Grep(\"TODO|FIXME\") then Task(\"coder\", \"Complete all TODOs\")",
        "priority": "urgent"
      },
      {
        "project": "yauzl",
        "type": "add-tests",
        "description": "Add test coverage with TDD agents",
        "impact": "high",
        "timeEstimate": "30 minutes",
        "implementation": "Use Task(\"tester\", \"Generate comprehensive test suite\")",
        "priority": "high"
      },
      {
        "project": "yauzl",
        "type": "commit-changes",
        "description": "Commit pending changes",
        "impact": "low",
        "timeEstimate": "2 minutes",
        "implementation": "Use git commit workflow with proper message format",
        "priority": "urgent"
      },
      {
        "project": "yauzl",
        "type": "complete-todos",
        "description": "Complete 1 TODOs",
        "impact": "medium",
        "timeEstimate": "10 minutes",
        "implementation": "Use Grep(\"TODO|FIXME\") then Task(\"coder\", \"Complete all TODOs\")",
        "priority": "urgent"
      },
      {
        "project": "wrappy",
        "type": "add-tests",
        "description": "Add test coverage with TDD agents",
        "impact": "high",
        "timeEstimate": "30 minutes",
        "implementation": "Use Task(\"tester\", \"Generate comprehensive test suite\")",
        "priority": "high"
      },
      {
        "project": "wrappy",
        "type": "commit-changes",
        "description": "Commit pending changes",
        "impact": "low",
        "timeEstimate": "2 minutes",
        "implementation": "Use git commit workflow with proper message format",
        "priority": "urgent"
      },
      {
        "project": "http-proxy-agent",
        "type": "add-tests",
        "description": "Add test coverage with TDD agents",
        "impact": "high",
        "timeEstimate": "30 minutes",
        "implementation": "Use Task(\"tester\", \"Generate comprehensive test suite\")",
        "priority": "high"
      },
      {
        "project": "http-proxy-agent",
        "type": "commit-changes",
        "description": "Commit pending changes",
        "impact": "low",
        "timeEstimate": "2 minutes",
        "implementation": "Use git commit workflow with proper message format",
        "priority": "urgent"
      },
      {
        "project": "resolve-from",
        "type": "add-tests",
        "description": "Add test coverage with TDD agents",
        "impact": "high",
        "timeEstimate": "30 minutes",
        "implementation": "Use Task(\"tester\", \"Generate comprehensive test suite\")",
        "priority": "high"
      },
      {
        "project": "resolve-from",
        "type": "commit-changes",
        "description": "Commit pending changes",
        "impact": "low",
        "timeEstimate": "2 minutes",
        "implementation": "Use git commit workflow with proper message format",
        "priority": "urgent"
      },
      {
        "project": "data-uri-to-buffer",
        "type": "add-tests",
        "description": "Add test coverage with TDD agents",
        "impact": "high",
        "timeEstimate": "30 minutes",
        "implementation": "Use Task(\"tester\", \"Generate comprehensive test suite\")",
        "priority": "high"
      },
      {
        "project": "data-uri-to-buffer",
        "type": "commit-changes",
        "description": "Commit pending changes",
        "impact": "low",
        "timeEstimate": "2 minutes",
        "implementation": "Use git commit workflow with proper message format",
        "priority": "urgent"
      },
      {
        "project": "emoji-regex",
        "type": "add-tests",
        "description": "Add test coverage with TDD agents",
        "impact": "high",
        "timeEstimate": "30 minutes",
        "implementation": "Use Task(\"tester\", \"Generate comprehensive test suite\")",
        "priority": "high"
      },
      {
        "project": "emoji-regex",
        "type": "commit-changes",
        "description": "Commit pending changes",
        "impact": "low",
        "timeEstimate": "2 minutes",
        "implementation": "Use git commit workflow with proper message format",
        "priority": "urgent"
      },
      {
        "project": "ws",
        "type": "parallel-execution",
        "description": "Use batch file operations for faster processing",
        "impact": "high",
        "timeEstimate": "5 minutes",
        "implementation": "Use MultiEdit and batch Read operations in single message",
        "priority": "urgent"
      },
      {
        "project": "ws",
        "type": "add-tests",
        "description": "Add test coverage with TDD agents",
        "impact": "high",
        "timeEstimate": "30 minutes",
        "implementation": "Use Task(\"tester\", \"Generate comprehensive test suite\")",
        "priority": "high"
      },
      {
        "project": "ws",
        "type": "commit-changes",
        "description": "Commit pending changes",
        "impact": "low",
        "timeEstimate": "2 minutes",
        "implementation": "Use git commit workflow with proper message format",
        "priority": "urgent"
      },
      {
        "project": "pac-resolver",
        "type": "parallel-execution",
        "description": "Use batch file operations for faster processing",
        "impact": "high",
        "timeEstimate": "5 minutes",
        "implementation": "Use MultiEdit and batch Read operations in single message",
        "priority": "urgent"
      },
      {
        "project": "pac-resolver",
        "type": "add-tests",
        "description": "Add test coverage with TDD agents",
        "impact": "high",
        "timeEstimate": "30 minutes",
        "implementation": "Use Task(\"tester\", \"Generate comprehensive test suite\")",
        "priority": "high"
      },
      {
        "project": "pac-resolver",
        "type": "commit-changes",
        "description": "Commit pending changes",
        "impact": "low",
        "timeEstimate": "2 minutes",
        "implementation": "Use git commit workflow with proper message format",
        "priority": "urgent"
      },
      {
        "project": "pac-resolver",
        "type": "complete-todos",
        "description": "Complete 1 TODOs",
        "impact": "medium",
        "timeEstimate": "10 minutes",
        "implementation": "Use Grep(\"TODO|FIXME\") then Task(\"coder\", \"Complete all TODOs\")",
        "priority": "urgent"
      },
      {
        "project": "bare-events",
        "type": "add-tests",
        "description": "Add test coverage with TDD agents",
        "impact": "high",
        "timeEstimate": "30 minutes",
        "implementation": "Use Task(\"tester\", \"Generate comprehensive test suite\")",
        "priority": "high"
      },
      {
        "project": "bare-events",
        "type": "commit-changes",
        "description": "Commit pending changes",
        "impact": "low",
        "timeEstimate": "2 minutes",
        "implementation": "Use git commit workflow with proper message format",
        "priority": "urgent"
      },
      {
        "project": "debug",
        "type": "add-tests",
        "description": "Add test coverage with TDD agents",
        "impact": "high",
        "timeEstimate": "30 minutes",
        "implementation": "Use Task(\"tester\", \"Generate comprehensive test suite\")",
        "priority": "high"
      },
      {
        "project": "debug",
        "type": "commit-changes",
        "description": "Commit pending changes",
        "impact": "low",
        "timeEstimate": "2 minutes",
        "implementation": "Use git commit workflow with proper message format",
        "priority": "urgent"
      },
      {
        "project": "debug",
        "type": "complete-todos",
        "description": "Complete 1 TODOs",
        "impact": "medium",
        "timeEstimate": "10 minutes",
        "implementation": "Use Grep(\"TODO|FIXME\") then Task(\"coder\", \"Complete all TODOs\")",
        "priority": "urgent"
      },
      {
        "project": "mitt",
        "type": "add-tests",
        "description": "Add test coverage with TDD agents",
        "impact": "high",
        "timeEstimate": "30 minutes",
        "implementation": "Use Task(\"tester\", \"Generate comprehensive test suite\")",
        "priority": "high"
      },
      {
        "project": "mitt",
        "type": "commit-changes",
        "description": "Commit pending changes",
        "impact": "low",
        "timeEstimate": "2 minutes",
        "implementation": "Use git commit workflow with proper message format",
        "priority": "urgent"
      },
      {
        "project": "tests",
        "type": "parallel-execution",
        "description": "Use batch file operations for faster processing",
        "impact": "high",
        "timeEstimate": "5 minutes",
        "implementation": "Use MultiEdit and batch Read operations in single message",
        "priority": "urgent"
      },
      {
        "project": "tests",
        "type": "refactor-complex",
        "description": "Refactor 107 complex files",
        "impact": "medium",
        "timeEstimate": "1 hour",
        "implementation": "Use Task(\"code-analyzer\", \"Refactor large files\") with Task(\"coder\", \"Implement refactoring\")",
        "priority": "urgent"
      },
      {
        "project": "tests",
        "type": "commit-changes",
        "description": "Commit pending changes",
        "impact": "low",
        "timeEstimate": "2 minutes",
        "implementation": "Use git commit workflow with proper message format",
        "priority": "urgent"
      },
      {
        "project": "tests",
        "type": "complete-todos",
        "description": "Complete 367 TODOs",
        "impact": "medium",
        "timeEstimate": "3670 minutes",
        "implementation": "Use Grep(\"TODO|FIXME\") then Task(\"coder\", \"Complete all TODOs\")",
        "priority": "low"
      },
      {
        "project": "pachacuti-slack-integration",
        "type": "parallel-execution",
        "description": "Use batch file operations for faster processing",
        "impact": "high",
        "timeEstimate": "5 minutes",
        "implementation": "Use MultiEdit and batch Read operations in single message",
        "priority": "urgent"
      },
      {
        "project": "pachacuti-slack-integration",
        "type": "add-tests",
        "description": "Add test coverage with TDD agents",
        "impact": "high",
        "timeEstimate": "30 minutes",
        "implementation": "Use Task(\"tester\", \"Generate comprehensive test suite\")",
        "priority": "high"
      },
      {
        "project": "pachacuti-slack-integration",
        "type": "refactor-complex",
        "description": "Refactor 112 complex files",
        "impact": "medium",
        "timeEstimate": "1 hour",
        "implementation": "Use Task(\"code-analyzer\", \"Refactor large files\") with Task(\"coder\", \"Implement refactoring\")",
        "priority": "urgent"
      },
      {
        "project": "pachacuti-slack-integration",
        "type": "commit-changes",
        "description": "Commit pending changes",
        "impact": "low",
        "timeEstimate": "2 minutes",
        "implementation": "Use git commit workflow with proper message format",
        "priority": "urgent"
      },
      {
        "project": "pachacuti-slack-integration",
        "type": "complete-todos",
        "description": "Complete 351 TODOs",
        "impact": "medium",
        "timeEstimate": "3510 minutes",
        "implementation": "Use Grep(\"TODO|FIXME\") then Task(\"coder\", \"Complete all TODOs\")",
        "priority": "low"
      },
      {
        "project": "crypto-campaign-unified",
        "type": "parallel-execution",
        "description": "Use batch file operations for faster processing",
        "impact": "high",
        "timeEstimate": "5 minutes",
        "implementation": "Use MultiEdit and batch Read operations in single message",
        "priority": "urgent"
      },
      {
        "project": "crypto-campaign-unified",
        "type": "refactor-complex",
        "description": "Refactor 186 complex files",
        "impact": "medium",
        "timeEstimate": "1 hour",
        "implementation": "Use Task(\"code-analyzer\", \"Refactor large files\") with Task(\"coder\", \"Implement refactoring\")",
        "priority": "urgent"
      },
      {
        "project": "crypto-campaign-unified",
        "type": "commit-changes",
        "description": "Commit pending changes",
        "impact": "low",
        "timeEstimate": "2 minutes",
        "implementation": "Use git commit workflow with proper message format",
        "priority": "urgent"
      },
      {
        "project": "crypto-campaign-unified",
        "type": "complete-todos",
        "description": "Complete 1138 TODOs",
        "impact": "medium",
        "timeEstimate": "11380 minutes",
        "implementation": "Use Grep(\"TODO|FIXME\") then Task(\"coder\", \"Complete all TODOs\")",
        "priority": "low"
      }
    ],
    "quickWins": [
      {
        "project": "pachacuti",
        "task": "Use batch file operations for faster processing",
        "time": "5 minutes",
        "command": "Use MultiEdit and batch Read operations in single message"
      },
      {
        "project": "pachacuti",
        "task": "Refactor 912 complex files",
        "time": "1 hour",
        "command": "Use Task(\"code-analyzer\", \"Refactor large files\") with Task(\"coder\", \"Implement refactoring\")"
      },
      {
        "project": "pachacuti-session-recorder",
        "task": "Use batch file operations for faster processing",
        "time": "5 minutes",
        "command": "Use MultiEdit and batch Read operations in single message"
      },
      {
        "project": "pachacuti-session-recorder",
        "task": "Refactor 128 complex files",
        "time": "1 hour",
        "command": "Use Task(\"code-analyzer\", \"Refactor large files\") with Task(\"coder\", \"Implement refactoring\")"
      },
      {
        "project": "pachacuti-shell-viewer-frontend",
        "task": "Use batch file operations for faster processing",
        "time": "5 minutes",
        "command": "Use MultiEdit and batch Read operations in single message"
      },
      {
        "project": "pachacuti-shell-viewer-frontend",
        "task": "Refactor 147 complex files",
        "time": "1 hour",
        "command": "Use Task(\"code-analyzer\", \"Refactor large files\") with Task(\"coder\", \"Implement refactoring\")"
      },
      {
        "project": "pachacuti-shell-viewer-backend",
        "task": "Use batch file operations for faster processing",
        "time": "5 minutes",
        "command": "Use MultiEdit and batch Read operations in single message"
      },
      {
        "project": "pachacuti-shell-viewer-backend",
        "task": "Refactor 128 complex files",
        "time": "1 hour",
        "command": "Use Task(\"code-analyzer\", \"Refactor large files\") with Task(\"coder\", \"Implement refactoring\")"
      },
      {
        "project": "zod",
        "task": "Use batch file operations for faster processing",
        "time": "5 minutes",
        "command": "Use MultiEdit and batch Read operations in single message"
      },
      {
        "project": "zod",
        "task": "Refactor 24 complex files",
        "time": "1 hour",
        "command": "Use Task(\"code-analyzer\", \"Refactor large files\") with Task(\"coder\", \"Implement refactoring\")"
      },
      {
        "project": "lru-cache",
        "task": "Refactor 1 complex files",
        "time": "1 hour",
        "command": "Use Task(\"code-analyzer\", \"Refactor large files\") with Task(\"coder\", \"Implement refactoring\")"
      },
      {
        "project": "ip-address",
        "task": "Use batch file operations for faster processing",
        "time": "5 minutes",
        "command": "Use MultiEdit and batch Read operations in single message"
      },
      {
        "project": "ip-address",
        "task": "Refactor 2 complex files",
        "time": "1 hour",
        "command": "Use Task(\"code-analyzer\", \"Refactor large files\") with Task(\"coder\", \"Implement refactoring\")"
      },
      {
        "project": "puppeteer",
        "task": "Use batch file operations for faster processing",
        "time": "5 minutes",
        "command": "Use MultiEdit and batch Read operations in single message"
      },
      {
        "project": "puppeteer",
        "task": "Refactor 2 complex files",
        "time": "1 hour",
        "command": "Use Task(\"code-analyzer\", \"Refactor large files\") with Task(\"coder\", \"Implement refactoring\")"
      },
      {
        "project": "ast-types",
        "task": "Use batch file operations for faster processing",
        "time": "5 minutes",
        "command": "Use MultiEdit and batch Read operations in single message"
      },
      {
        "project": "ast-types",
        "task": "Refactor 3 complex files",
        "time": "1 hour",
        "command": "Use Task(\"code-analyzer\", \"Refactor large files\") with Task(\"coder\", \"Implement refactoring\")"
      },
      {
        "project": "get-uri",
        "task": "Use batch file operations for faster processing",
        "time": "5 minutes",
        "command": "Use MultiEdit and batch Read operations in single message"
      },
      {
        "project": "js-yaml",
        "task": "Use batch file operations for faster processing",
        "time": "5 minutes",
        "command": "Use MultiEdit and batch Read operations in single message"
      },
      {
        "project": "smart-buffer",
        "task": "Refactor 2 complex files",
        "time": "1 hour",
        "command": "Use Task(\"code-analyzer\", \"Refactor large files\") with Task(\"coder\", \"Implement refactoring\")"
      },
      {
        "project": "devtools-protocol",
        "task": "Refactor 5 complex files",
        "time": "1 hour",
        "command": "Use Task(\"code-analyzer\", \"Refactor large files\") with Task(\"coder\", \"Implement refactoring\")"
      },
      {
        "project": "bare-fs",
        "task": "Refactor 2 complex files",
        "time": "1 hour",
        "command": "Use Task(\"code-analyzer\", \"Refactor large files\") with Task(\"coder\", \"Implement refactoring\")"
      },
      {
        "project": "undici-types",
        "task": "Use batch file operations for faster processing",
        "time": "5 minutes",
        "command": "Use MultiEdit and batch Read operations in single message"
      },
      {
        "project": "undici-types",
        "task": "Refactor 1 complex files",
        "time": "1 hour",
        "command": "Use Task(\"code-analyzer\", \"Refactor large files\") with Task(\"coder\", \"Implement refactoring\")"
      },
      {
        "project": "basic-ftp",
        "task": "Use batch file operations for faster processing",
        "time": "5 minutes",
        "command": "Use MultiEdit and batch Read operations in single message"
      },
      {
        "project": "basic-ftp",
        "task": "Refactor 1 complex files",
        "time": "1 hour",
        "command": "Use Task(\"code-analyzer\", \"Refactor large files\") with Task(\"coder\", \"Implement refactoring\")"
      },
      {
        "project": "semver",
        "task": "Use batch file operations for faster processing",
        "time": "5 minutes",
        "command": "Use MultiEdit and batch Read operations in single message"
      },
      {
        "project": "chromium-bidi",
        "task": "Use batch file operations for faster processing",
        "time": "5 minutes",
        "command": "Use MultiEdit and batch Read operations in single message"
      },
      {
        "project": "chromium-bidi",
        "task": "Refactor 7 complex files",
        "time": "1 hour",
        "command": "Use Task(\"code-analyzer\", \"Refactor large files\") with Task(\"coder\", \"Implement refactoring\")"
      },
      {
        "project": "yargs",
        "task": "Use batch file operations for faster processing",
        "time": "5 minutes",
        "command": "Use MultiEdit and batch Read operations in single message"
      },
      {
        "project": "socks",
        "task": "Use batch file operations for faster processing",
        "time": "5 minutes",
        "command": "Use MultiEdit and batch Read operations in single message"
      },
      {
        "project": "source-map",
        "task": "Use batch file operations for faster processing",
        "time": "5 minutes",
        "command": "Use MultiEdit and batch Read operations in single message"
      },
      {
        "project": "puppeteer-core",
        "task": "Use batch file operations for faster processing",
        "time": "5 minutes",
        "command": "Use MultiEdit and batch Read operations in single message"
      },
      {
        "project": "puppeteer-core",
        "task": "Refactor 31 complex files",
        "time": "1 hour",
        "command": "Use Task(\"code-analyzer\", \"Refactor large files\") with Task(\"coder\", \"Implement refactoring\")"
      },
      {
        "project": "cosmiconfig",
        "task": "Use batch file operations for faster processing",
        "time": "5 minutes",
        "command": "Use MultiEdit and batch Read operations in single message"
      },
      {
        "project": "ws",
        "task": "Use batch file operations for faster processing",
        "time": "5 minutes",
        "command": "Use MultiEdit and batch Read operations in single message"
      },
      {
        "project": "pac-resolver",
        "task": "Use batch file operations for faster processing",
        "time": "5 minutes",
        "command": "Use MultiEdit and batch Read operations in single message"
      },
      {
        "project": "tests",
        "task": "Use batch file operations for faster processing",
        "time": "5 minutes",
        "command": "Use MultiEdit and batch Read operations in single message"
      },
      {
        "project": "tests",
        "task": "Refactor 107 complex files",
        "time": "1 hour",
        "command": "Use Task(\"code-analyzer\", \"Refactor large files\") with Task(\"coder\", \"Implement refactoring\")"
      },
      {
        "project": "pachacuti-slack-integration",
        "task": "Use batch file operations for faster processing",
        "time": "5 minutes",
        "command": "Use MultiEdit and batch Read operations in single message"
      },
      {
        "project": "pachacuti-slack-integration",
        "task": "Refactor 112 complex files",
        "time": "1 hour",
        "command": "Use Task(\"code-analyzer\", \"Refactor large files\") with Task(\"coder\", \"Implement refactoring\")"
      },
      {
        "project": "crypto-campaign-unified",
        "task": "Use batch file operations for faster processing",
        "time": "5 minutes",
        "command": "Use MultiEdit and batch Read operations in single message"
      },
      {
        "project": "crypto-campaign-unified",
        "task": "Refactor 186 complex files",
        "time": "1 hour",
        "command": "Use Task(\"code-analyzer\", \"Refactor large files\") with Task(\"coder\", \"Implement refactoring\")"
      }
    ],
    "timeEstimates": {}
  },
  "recommendations": [
    {
      "type": "todo-completion",
      "project": "pachacuti",
      "title": "Complete 8994 TODOs in pachacuti",
      "description": "Use parallel agents to clear technical debt",
      "implementation": "\n// Find all TODOs\nGrep(\"TODO|FIXME|HACK\", {output_mode: \"content\", -n: true})\n\n// Spawn agents to complete them\nTask(\"coder\", \"Complete all TODO items\")\nTask(\"tester\", \"Add tests for completed TODOs\")\nTask(\"reviewer\", \"Review TODO completions\")",
      "timeEstimate": "44970 minutes with parallel agents",
      "priority": "high",
      "benefit": "Reduce technical debt"
    },
    {
      "type": "todo-completion",
      "project": "pachacuti-session-recorder",
      "title": "Complete 868 TODOs in pachacuti-session-recorder",
      "description": "Use parallel agents to clear technical debt",
      "implementation": "\n// Find all TODOs\nGrep(\"TODO|FIXME|HACK\", {output_mode: \"content\", -n: true})\n\n// Spawn agents to complete them\nTask(\"coder\", \"Complete all TODO items\")\nTask(\"tester\", \"Add tests for completed TODOs\")\nTask(\"reviewer\", \"Review TODO completions\")",
      "timeEstimate": "4340 minutes with parallel agents",
      "priority": "high",
      "benefit": "Reduce technical debt"
    },
    {
      "type": "todo-completion",
      "project": "pachacuti-shell-viewer-frontend",
      "title": "Complete 5193 TODOs in pachacuti-shell-viewer-frontend",
      "description": "Use parallel agents to clear technical debt",
      "implementation": "\n// Find all TODOs\nGrep(\"TODO|FIXME|HACK\", {output_mode: \"content\", -n: true})\n\n// Spawn agents to complete them\nTask(\"coder\", \"Complete all TODO items\")\nTask(\"tester\", \"Add tests for completed TODOs\")\nTask(\"reviewer\", \"Review TODO completions\")",
      "timeEstimate": "25965 minutes with parallel agents",
      "priority": "high",
      "benefit": "Reduce technical debt"
    },
    {
      "type": "todo-completion",
      "project": "pachacuti-shell-viewer-backend",
      "title": "Complete 692 TODOs in pachacuti-shell-viewer-backend",
      "description": "Use parallel agents to clear technical debt",
      "implementation": "\n// Find all TODOs\nGrep(\"TODO|FIXME|HACK\", {output_mode: \"content\", -n: true})\n\n// Spawn agents to complete them\nTask(\"coder\", \"Complete all TODO items\")\nTask(\"tester\", \"Add tests for completed TODOs\")\nTask(\"reviewer\", \"Review TODO completions\")",
      "timeEstimate": "3460 minutes with parallel agents",
      "priority": "high",
      "benefit": "Reduce technical debt"
    },
    {
      "type": "add-tests",
      "project": "pend",
      "title": "Add test coverage to pend",
      "description": "Generate comprehensive test suite",
      "implementation": "\nTask(\"tdd-london-swarm\", \"Create test suite with mocks\")\nTask(\"tester\", \"Add integration tests\")\nBash(\"npm test -- --coverage\")",
      "timeEstimate": "20 minutes",
      "priority": "high",
      "benefit": "Prevent regressions"
    },
    {
      "type": "add-tests",
      "project": "fd-slicer",
      "title": "Add test coverage to fd-slicer",
      "description": "Generate comprehensive test suite",
      "implementation": "\nTask(\"tdd-london-swarm\", \"Create test suite with mocks\")\nTask(\"tester\", \"Add integration tests\")\nBash(\"npm test -- --coverage\")",
      "timeEstimate": "20 minutes",
      "priority": "high",
      "benefit": "Prevent regressions"
    },
    {
      "type": "add-tests",
      "project": "callsites",
      "title": "Add test coverage to callsites",
      "description": "Generate comprehensive test suite",
      "implementation": "\nTask(\"tdd-london-swarm\", \"Create test suite with mocks\")\nTask(\"tester\", \"Add integration tests\")\nBash(\"npm test -- --coverage\")",
      "timeEstimate": "20 minutes",
      "priority": "high",
      "benefit": "Prevent regressions"
    },
    {
      "type": "add-tests",
      "project": "json-parse-even-better-errors",
      "title": "Add test coverage to json-parse-even-better-errors",
      "description": "Generate comprehensive test suite",
      "implementation": "\nTask(\"tdd-london-swarm\", \"Create test suite with mocks\")\nTask(\"tester\", \"Add integration tests\")\nBash(\"npm test -- --coverage\")",
      "timeEstimate": "20 minutes",
      "priority": "high",
      "benefit": "Prevent regressions"
    },
    {
      "type": "add-tests",
      "project": "typed-query-selector",
      "title": "Add test coverage to typed-query-selector",
      "description": "Generate comprehensive test suite",
      "implementation": "\nTask(\"tdd-london-swarm\", \"Create test suite with mocks\")\nTask(\"tester\", \"Add integration tests\")\nBash(\"npm test -- --coverage\")",
      "timeEstimate": "20 minutes",
      "priority": "high",
      "benefit": "Prevent regressions"
    },
    {
      "type": "add-tests",
      "project": "strip-ansi",
      "title": "Add test coverage to strip-ansi",
      "description": "Generate comprehensive test suite",
      "implementation": "\nTask(\"tdd-london-swarm\", \"Create test suite with mocks\")\nTask(\"tester\", \"Add integration tests\")\nBash(\"npm test -- --coverage\")",
      "timeEstimate": "20 minutes",
      "priority": "high",
      "benefit": "Prevent regressions"
    },
    {
      "type": "add-tests",
      "project": "proxy-agent",
      "title": "Add test coverage to proxy-agent",
      "description": "Generate comprehensive test suite",
      "implementation": "\nTask(\"tdd-london-swarm\", \"Create test suite with mocks\")\nTask(\"tester\", \"Add integration tests\")\nBash(\"npm test -- --coverage\")",
      "timeEstimate": "20 minutes",
      "priority": "high",
      "benefit": "Prevent regressions"
    },
    {
      "type": "add-tests",
      "project": "agent-base",
      "title": "Add test coverage to agent-base",
      "description": "Generate comprehensive test suite",
      "implementation": "\nTask(\"tdd-london-swarm\", \"Create test suite with mocks\")\nTask(\"tester\", \"Add integration tests\")\nBash(\"npm test -- --coverage\")",
      "timeEstimate": "20 minutes",
      "priority": "high",
      "benefit": "Prevent regressions"
    },
    {
      "type": "add-tests",
      "project": "text-decoder",
      "title": "Add test coverage to text-decoder",
      "description": "Generate comprehensive test suite",
      "implementation": "\nTask(\"tdd-london-swarm\", \"Create test suite with mocks\")\nTask(\"tester\", \"Add integration tests\")\nBash(\"npm test -- --coverage\")",
      "timeEstimate": "20 minutes",
      "priority": "high",
      "benefit": "Prevent regressions"
    },
    {
      "type": "add-tests",
      "project": "ms",
      "title": "Add test coverage to ms",
      "description": "Generate comprehensive test suite",
      "implementation": "\nTask(\"tdd-london-swarm\", \"Create test suite with mocks\")\nTask(\"tester\", \"Add integration tests\")\nBash(\"npm test -- --coverage\")",
      "timeEstimate": "20 minutes",
      "priority": "high",
      "benefit": "Prevent regressions"
    },
    {
      "type": "add-tests",
      "project": "dotenv",
      "title": "Add test coverage to dotenv",
      "description": "Generate comprehensive test suite",
      "implementation": "\nTask(\"tdd-london-swarm\", \"Create test suite with mocks\")\nTask(\"tester\", \"Add integration tests\")\nBash(\"npm test -- --coverage\")",
      "timeEstimate": "20 minutes",
      "priority": "high",
      "benefit": "Prevent regressions"
    },
    {
      "type": "add-tests",
      "project": "lru-cache",
      "title": "Add test coverage to lru-cache",
      "description": "Generate comprehensive test suite",
      "implementation": "\nTask(\"tdd-london-swarm\", \"Create test suite with mocks\")\nTask(\"tester\", \"Add integration tests\")\nBash(\"npm test -- --coverage\")",
      "timeEstimate": "20 minutes",
      "priority": "high",
      "benefit": "Prevent regressions"
    },
    {
      "type": "add-tests",
      "project": "require-directory",
      "title": "Add test coverage to require-directory",
      "description": "Generate comprehensive test suite",
      "implementation": "\nTask(\"tdd-london-swarm\", \"Create test suite with mocks\")\nTask(\"tester\", \"Add integration tests\")\nBash(\"npm test -- --coverage\")",
      "timeEstimate": "20 minutes",
      "priority": "high",
      "benefit": "Prevent regressions"
    },
    {
      "type": "add-tests",
      "project": "escalade",
      "title": "Add test coverage to escalade",
      "description": "Generate comprehensive test suite",
      "implementation": "\nTask(\"tdd-london-swarm\", \"Create test suite with mocks\")\nTask(\"tester\", \"Add integration tests\")\nBash(\"npm test -- --coverage\")",
      "timeEstimate": "20 minutes",
      "priority": "high",
      "benefit": "Prevent regressions"
    },
    {
      "type": "add-tests",
      "project": "ip-address",
      "title": "Add test coverage to ip-address",
      "description": "Generate comprehensive test suite",
      "implementation": "\nTask(\"tdd-london-swarm\", \"Create test suite with mocks\")\nTask(\"tester\", \"Add integration tests\")\nBash(\"npm test -- --coverage\")",
      "timeEstimate": "20 minutes",
      "priority": "high",
      "benefit": "Prevent regressions"
    },
    {
      "type": "add-tests",
      "project": "error-ex",
      "title": "Add test coverage to error-ex",
      "description": "Generate comprehensive test suite",
      "implementation": "\nTask(\"tdd-london-swarm\", \"Create test suite with mocks\")\nTask(\"tester\", \"Add integration tests\")\nBash(\"npm test -- --coverage\")",
      "timeEstimate": "20 minutes",
      "priority": "high",
      "benefit": "Prevent regressions"
    },
    {
      "type": "add-tests",
      "project": "progress",
      "title": "Add test coverage to progress",
      "description": "Generate comprehensive test suite",
      "implementation": "\nTask(\"tdd-london-swarm\", \"Create test suite with mocks\")\nTask(\"tester\", \"Add integration tests\")\nBash(\"npm test -- --coverage\")",
      "timeEstimate": "20 minutes",
      "priority": "high",
      "benefit": "Prevent regressions"
    },
    {
      "type": "add-tests",
      "project": "puppeteer",
      "title": "Add test coverage to puppeteer",
      "description": "Generate comprehensive test suite",
      "implementation": "\nTask(\"tdd-london-swarm\", \"Create test suite with mocks\")\nTask(\"tester\", \"Add integration tests\")\nBash(\"npm test -- --coverage\")",
      "timeEstimate": "20 minutes",
      "priority": "high",
      "benefit": "Prevent regressions"
    },
    {
      "type": "add-tests",
      "project": "parse-json",
      "title": "Add test coverage to parse-json",
      "description": "Generate comprehensive test suite",
      "implementation": "\nTask(\"tdd-london-swarm\", \"Create test suite with mocks\")\nTask(\"tester\", \"Add integration tests\")\nBash(\"npm test -- --coverage\")",
      "timeEstimate": "20 minutes",
      "priority": "high",
      "benefit": "Prevent regressions"
    },
    {
      "type": "add-tests",
      "project": "buffer-crc32",
      "title": "Add test coverage to buffer-crc32",
      "description": "Generate comprehensive test suite",
      "implementation": "\nTask(\"tdd-london-swarm\", \"Create test suite with mocks\")\nTask(\"tester\", \"Add integration tests\")\nBash(\"npm test -- --coverage\")",
      "timeEstimate": "20 minutes",
      "priority": "high",
      "benefit": "Prevent regressions"
    },
    {
      "type": "todo-completion",
      "project": "ast-types",
      "title": "Complete 15 TODOs in ast-types",
      "description": "Use parallel agents to clear technical debt",
      "implementation": "\n// Find all TODOs\nGrep(\"TODO|FIXME|HACK\", {output_mode: \"content\", -n: true})\n\n// Spawn agents to complete them\nTask(\"coder\", \"Complete all TODO items\")\nTask(\"tester\", \"Add tests for completed TODOs\")\nTask(\"reviewer\", \"Review TODO completions\")",
      "timeEstimate": "75 minutes with parallel agents",
      "priority": "high",
      "benefit": "Reduce technical debt"
    },
    {
      "type": "add-tests",
      "project": "ast-types",
      "title": "Add test coverage to ast-types",
      "description": "Generate comprehensive test suite",
      "implementation": "\nTask(\"tdd-london-swarm\", \"Create test suite with mocks\")\nTask(\"tester\", \"Add integration tests\")\nBash(\"npm test -- --coverage\")",
      "timeEstimate": "20 minutes",
      "priority": "high",
      "benefit": "Prevent regressions"
    },
    {
      "type": "add-tests",
      "project": "extract-zip",
      "title": "Add test coverage to extract-zip",
      "description": "Generate comprehensive test suite",
      "implementation": "\nTask(\"tdd-london-swarm\", \"Create test suite with mocks\")\nTask(\"tester\", \"Add integration tests\")\nBash(\"npm test -- --coverage\")",
      "timeEstimate": "20 minutes",
      "priority": "high",
      "benefit": "Prevent regressions"
    },
    {
      "type": "add-tests",
      "project": "wrap-ansi",
      "title": "Add test coverage to wrap-ansi",
      "description": "Generate comprehensive test suite",
      "implementation": "\nTask(\"tdd-london-swarm\", \"Create test suite with mocks\")\nTask(\"tester\", \"Add integration tests\")\nBash(\"npm test -- --coverage\")",
      "timeEstimate": "20 minutes",
      "priority": "high",
      "benefit": "Prevent regressions"
    },
    {
      "type": "add-tests",
      "project": "y18n",
      "title": "Add test coverage to y18n",
      "description": "Generate comprehensive test suite",
      "implementation": "\nTask(\"tdd-london-swarm\", \"Create test suite with mocks\")\nTask(\"tester\", \"Add integration tests\")\nBash(\"npm test -- --coverage\")",
      "timeEstimate": "20 minutes",
      "priority": "high",
      "benefit": "Prevent regressions"
    },
    {
      "type": "add-tests",
      "project": "once",
      "title": "Add test coverage to once",
      "description": "Generate comprehensive test suite",
      "implementation": "\nTask(\"tdd-london-swarm\", \"Create test suite with mocks\")\nTask(\"tester\", \"Add integration tests\")\nBash(\"npm test -- --coverage\")",
      "timeEstimate": "20 minutes",
      "priority": "high",
      "benefit": "Prevent regressions"
    },
    {
      "type": "add-tests",
      "project": "bare-path",
      "title": "Add test coverage to bare-path",
      "description": "Generate comprehensive test suite",
      "implementation": "\nTask(\"tdd-london-swarm\", \"Create test suite with mocks\")\nTask(\"tester\", \"Add integration tests\")\nBash(\"npm test -- --coverage\")",
      "timeEstimate": "20 minutes",
      "priority": "high",
      "benefit": "Prevent regressions"
    },
    {
      "type": "add-tests",
      "project": "proxy-from-env",
      "title": "Add test coverage to proxy-from-env",
      "description": "Generate comprehensive test suite",
      "implementation": "\nTask(\"tdd-london-swarm\", \"Create test suite with mocks\")\nTask(\"tester\", \"Add integration tests\")\nBash(\"npm test -- --coverage\")",
      "timeEstimate": "20 minutes",
      "priority": "high",
      "benefit": "Prevent regressions"
    },
    {
      "type": "add-tests",
      "project": "get-uri",
      "title": "Add test coverage to get-uri",
      "description": "Generate comprehensive test suite",
      "implementation": "\nTask(\"tdd-london-swarm\", \"Create test suite with mocks\")\nTask(\"tester\", \"Add integration tests\")\nBash(\"npm test -- --coverage\")",
      "timeEstimate": "20 minutes",
      "priority": "high",
      "benefit": "Prevent regressions"
    },
    {
      "type": "add-tests",
      "project": "tslib",
      "title": "Add test coverage to tslib",
      "description": "Generate comprehensive test suite",
      "implementation": "\nTask(\"tdd-london-swarm\", \"Create test suite with mocks\")\nTask(\"tester\", \"Add integration tests\")\nBash(\"npm test -- --coverage\")",
      "timeEstimate": "20 minutes",
      "priority": "high",
      "benefit": "Prevent regressions"
    },
    {
      "type": "add-tests",
      "project": "argparse",
      "title": "Add test coverage to argparse",
      "description": "Generate comprehensive test suite",
      "implementation": "\nTask(\"tdd-london-swarm\", \"Create test suite with mocks\")\nTask(\"tester\", \"Add integration tests\")\nBash(\"npm test -- --coverage\")",
      "timeEstimate": "20 minutes",
      "priority": "high",
      "benefit": "Prevent regressions"
    },
    {
      "type": "add-tests",
      "project": "socks-proxy-agent",
      "title": "Add test coverage to socks-proxy-agent",
      "description": "Generate comprehensive test suite",
      "implementation": "\nTask(\"tdd-london-swarm\", \"Create test suite with mocks\")\nTask(\"tester\", \"Add integration tests\")\nBash(\"npm test -- --coverage\")",
      "timeEstimate": "20 minutes",
      "priority": "high",
      "benefit": "Prevent regressions"
    },
    {
      "type": "add-tests",
      "project": "is-fullwidth-code-point",
      "title": "Add test coverage to is-fullwidth-code-point",
      "description": "Generate comprehensive test suite",
      "implementation": "\nTask(\"tdd-london-swarm\", \"Create test suite with mocks\")\nTask(\"tester\", \"Add integration tests\")\nBash(\"npm test -- --coverage\")",
      "timeEstimate": "20 minutes",
      "priority": "high",
      "benefit": "Prevent regressions"
    },
    {
      "type": "add-tests",
      "project": "env-paths",
      "title": "Add test coverage to env-paths",
      "description": "Generate comprehensive test suite",
      "implementation": "\nTask(\"tdd-london-swarm\", \"Create test suite with mocks\")\nTask(\"tester\", \"Add integration tests\")\nBash(\"npm test -- --coverage\")",
      "timeEstimate": "20 minutes",
      "priority": "high",
      "benefit": "Prevent regressions"
    },
    {
      "type": "add-tests",
      "project": "yargs-parser",
      "title": "Add test coverage to yargs-parser",
      "description": "Generate comprehensive test suite",
      "implementation": "\nTask(\"tdd-london-swarm\", \"Create test suite with mocks\")\nTask(\"tester\", \"Add integration tests\")\nBash(\"npm test -- --coverage\")",
      "timeEstimate": "20 minutes",
      "priority": "high",
      "benefit": "Prevent regressions"
    },
    {
      "type": "add-tests",
      "project": "color-name",
      "title": "Add test coverage to color-name",
      "description": "Generate comprehensive test suite",
      "implementation": "\nTask(\"tdd-london-swarm\", \"Create test suite with mocks\")\nTask(\"tester\", \"Add integration tests\")\nBash(\"npm test -- --coverage\")",
      "timeEstimate": "20 minutes",
      "priority": "high",
      "benefit": "Prevent regressions"
    },
    {
      "type": "add-tests",
      "project": "js-yaml",
      "title": "Add test coverage to js-yaml",
      "description": "Generate comprehensive test suite",
      "implementation": "\nTask(\"tdd-london-swarm\", \"Create test suite with mocks\")\nTask(\"tester\", \"Add integration tests\")\nBash(\"npm test -- --coverage\")",
      "timeEstimate": "20 minutes",
      "priority": "high",
      "benefit": "Prevent regressions"
    },
    {
      "type": "add-tests",
      "project": "smart-buffer",
      "title": "Add test coverage to smart-buffer",
      "description": "Generate comprehensive test suite",
      "implementation": "\nTask(\"tdd-london-swarm\", \"Create test suite with mocks\")\nTask(\"tester\", \"Add integration tests\")\nBash(\"npm test -- --coverage\")",
      "timeEstimate": "20 minutes",
      "priority": "high",
      "benefit": "Prevent regressions"
    },
    {
      "type": "add-tests",
      "project": "parent-module",
      "title": "Add test coverage to parent-module",
      "description": "Generate comprehensive test suite",
      "implementation": "\nTask(\"tdd-london-swarm\", \"Create test suite with mocks\")\nTask(\"tester\", \"Add integration tests\")\nBash(\"npm test -- --coverage\")",
      "timeEstimate": "20 minutes",
      "priority": "high",
      "benefit": "Prevent regressions"
    },
    {
      "type": "todo-completion",
      "project": "devtools-protocol",
      "title": "Complete 17 TODOs in devtools-protocol",
      "description": "Use parallel agents to clear technical debt",
      "implementation": "\n// Find all TODOs\nGrep(\"TODO|FIXME|HACK\", {output_mode: \"content\", -n: true})\n\n// Spawn agents to complete them\nTask(\"coder\", \"Complete all TODO items\")\nTask(\"tester\", \"Add tests for completed TODOs\")\nTask(\"reviewer\", \"Review TODO completions\")",
      "timeEstimate": "85 minutes with parallel agents",
      "priority": "high",
      "benefit": "Reduce technical debt"
    },
    {
      "type": "add-tests",
      "project": "devtools-protocol",
      "title": "Add test coverage to devtools-protocol",
      "description": "Generate comprehensive test suite",
      "implementation": "\nTask(\"tdd-london-swarm\", \"Create test suite with mocks\")\nTask(\"tester\", \"Add integration tests\")\nBash(\"npm test -- --coverage\")",
      "timeEstimate": "20 minutes",
      "priority": "high",
      "benefit": "Prevent regressions"
    },
    {
      "type": "add-tests",
      "project": "tar-stream",
      "title": "Add test coverage to tar-stream",
      "description": "Generate comprehensive test suite",
      "implementation": "\nTask(\"tdd-london-swarm\", \"Create test suite with mocks\")\nTask(\"tester\", \"Add integration tests\")\nBash(\"npm test -- --coverage\")",
      "timeEstimate": "20 minutes",
      "priority": "high",
      "benefit": "Prevent regressions"
    },
    {
      "type": "add-tests",
      "project": "bare-fs",
      "title": "Add test coverage to bare-fs",
      "description": "Generate comprehensive test suite",
      "implementation": "\nTask(\"tdd-london-swarm\", \"Create test suite with mocks\")\nTask(\"tester\", \"Add integration tests\")\nBash(\"npm test -- --coverage\")",
      "timeEstimate": "20 minutes",
      "priority": "high",
      "benefit": "Prevent regressions"
    },
    {
      "type": "add-tests",
      "project": "netmask",
      "title": "Add test coverage to netmask",
      "description": "Generate comprehensive test suite",
      "implementation": "\nTask(\"tdd-london-swarm\", \"Create test suite with mocks\")\nTask(\"tester\", \"Add integration tests\")\nBash(\"npm test -- --coverage\")",
      "timeEstimate": "20 minutes",
      "priority": "high",
      "benefit": "Prevent regressions"
    },
    {
      "type": "todo-completion",
      "project": "undici-types",
      "title": "Complete 17 TODOs in undici-types",
      "description": "Use parallel agents to clear technical debt",
      "implementation": "\n// Find all TODOs\nGrep(\"TODO|FIXME|HACK\", {output_mode: \"content\", -n: true})\n\n// Spawn agents to complete them\nTask(\"coder\", \"Complete all TODO items\")\nTask(\"tester\", \"Add tests for completed TODOs\")\nTask(\"reviewer\", \"Review TODO completions\")",
      "timeEstimate": "85 minutes with parallel agents",
      "priority": "high",
      "benefit": "Reduce technical debt"
    },
    {
      "type": "add-tests",
      "project": "undici-types",
      "title": "Add test coverage to undici-types",
      "description": "Generate comprehensive test suite",
      "implementation": "\nTask(\"tdd-london-swarm\", \"Create test suite with mocks\")\nTask(\"tester\", \"Add integration tests\")\nBash(\"npm test -- --coverage\")",
      "timeEstimate": "20 minutes",
      "priority": "high",
      "benefit": "Prevent regressions"
    },
    {
      "type": "add-tests",
      "project": "end-of-stream",
      "title": "Add test coverage to end-of-stream",
      "description": "Generate comprehensive test suite",
      "implementation": "\nTask(\"tdd-london-swarm\", \"Create test suite with mocks\")\nTask(\"tester\", \"Add integration tests\")\nBash(\"npm test -- --coverage\")",
      "timeEstimate": "20 minutes",
      "priority": "high",
      "benefit": "Prevent regressions"
    },
    {
      "type": "add-tests",
      "project": "bare-os",
      "title": "Add test coverage to bare-os",
      "description": "Generate comprehensive test suite",
      "implementation": "\nTask(\"tdd-london-swarm\", \"Create test suite with mocks\")\nTask(\"tester\", \"Add integration tests\")\nBash(\"npm test -- --coverage\")",
      "timeEstimate": "20 minutes",
      "priority": "high",
      "benefit": "Prevent regressions"
    },
    {
      "type": "add-tests",
      "project": "esutils",
      "title": "Add test coverage to esutils",
      "description": "Generate comprehensive test suite",
      "implementation": "\nTask(\"tdd-london-swarm\", \"Create test suite with mocks\")\nTask(\"tester\", \"Add integration tests\")\nBash(\"npm test -- --coverage\")",
      "timeEstimate": "20 minutes",
      "priority": "high",
      "benefit": "Prevent regressions"
    },
    {
      "type": "add-tests",
      "project": "bare-stream",
      "title": "Add test coverage to bare-stream",
      "description": "Generate comprehensive test suite",
      "implementation": "\nTask(\"tdd-london-swarm\", \"Create test suite with mocks\")\nTask(\"tester\", \"Add integration tests\")\nBash(\"npm test -- --coverage\")",
      "timeEstimate": "20 minutes",
      "priority": "high",
      "benefit": "Prevent regressions"
    },
    {
      "type": "add-tests",
      "project": "ansi-regex",
      "title": "Add test coverage to ansi-regex",
      "description": "Generate comprehensive test suite",
      "implementation": "\nTask(\"tdd-london-swarm\", \"Create test suite with mocks\")\nTask(\"tester\", \"Add integration tests\")\nBash(\"npm test -- --coverage\")",
      "timeEstimate": "20 minutes",
      "priority": "high",
      "benefit": "Prevent regressions"
    },
    {
      "type": "add-tests",
      "project": "esprima",
      "title": "Add test coverage to esprima",
      "description": "Generate comprehensive test suite",
      "implementation": "\nTask(\"tdd-london-swarm\", \"Create test suite with mocks\")\nTask(\"tester\", \"Add integration tests\")\nBash(\"npm test -- --coverage\")",
      "timeEstimate": "20 minutes",
      "priority": "high",
      "benefit": "Prevent regressions"
    },
    {
      "type": "add-tests",
      "project": "basic-ftp",
      "title": "Add test coverage to basic-ftp",
      "description": "Generate comprehensive test suite",
      "implementation": "\nTask(\"tdd-london-swarm\", \"Create test suite with mocks\")\nTask(\"tester\", \"Add integration tests\")\nBash(\"npm test -- --coverage\")",
      "timeEstimate": "20 minutes",
      "priority": "high",
      "benefit": "Prevent regressions"
    },
    {
      "type": "add-tests",
      "project": "color-convert",
      "title": "Add test coverage to color-convert",
      "description": "Generate comprehensive test suite",
      "implementation": "\nTask(\"tdd-london-swarm\", \"Create test suite with mocks\")\nTask(\"tester\", \"Add integration tests\")\nBash(\"npm test -- --coverage\")",
      "timeEstimate": "20 minutes",
      "priority": "high",
      "benefit": "Prevent regressions"
    },
    {
      "type": "add-tests",
      "project": "get-caller-file",
      "title": "Add test coverage to get-caller-file",
      "description": "Generate comprehensive test suite",
      "implementation": "\nTask(\"tdd-london-swarm\", \"Create test suite with mocks\")\nTask(\"tester\", \"Add integration tests\")\nBash(\"npm test -- --coverage\")",
      "timeEstimate": "20 minutes",
      "priority": "high",
      "benefit": "Prevent regressions"
    },
    {
      "type": "add-tests",
      "project": "picocolors",
      "title": "Add test coverage to picocolors",
      "description": "Generate comprehensive test suite",
      "implementation": "\nTask(\"tdd-london-swarm\", \"Create test suite with mocks\")\nTask(\"tester\", \"Add integration tests\")\nBash(\"npm test -- --coverage\")",
      "timeEstimate": "20 minutes",
      "priority": "high",
      "benefit": "Prevent regressions"
    },
    {
      "type": "add-tests",
      "project": "lines-and-columns",
      "title": "Add test coverage to lines-and-columns",
      "description": "Generate comprehensive test suite",
      "implementation": "\nTask(\"tdd-london-swarm\", \"Create test suite with mocks\")\nTask(\"tester\", \"Add integration tests\")\nBash(\"npm test -- --coverage\")",
      "timeEstimate": "20 minutes",
      "priority": "high",
      "benefit": "Prevent regressions"
    },
    {
      "type": "add-tests",
      "project": "semver",
      "title": "Add test coverage to semver",
      "description": "Generate comprehensive test suite",
      "implementation": "\nTask(\"tdd-london-swarm\", \"Create test suite with mocks\")\nTask(\"tester\", \"Add integration tests\")\nBash(\"npm test -- --coverage\")",
      "timeEstimate": "20 minutes",
      "priority": "high",
      "benefit": "Prevent regressions"
    },
    {
      "type": "add-tests",
      "project": "b4a",
      "title": "Add test coverage to b4a",
      "description": "Generate comprehensive test suite",
      "implementation": "\nTask(\"tdd-london-swarm\", \"Create test suite with mocks\")\nTask(\"tester\", \"Add integration tests\")\nBash(\"npm test -- --coverage\")",
      "timeEstimate": "20 minutes",
      "priority": "high",
      "benefit": "Prevent regressions"
    },
    {
      "type": "todo-completion",
      "project": "chromium-bidi",
      "title": "Complete 154 TODOs in chromium-bidi",
      "description": "Use parallel agents to clear technical debt",
      "implementation": "\n// Find all TODOs\nGrep(\"TODO|FIXME|HACK\", {output_mode: \"content\", -n: true})\n\n// Spawn agents to complete them\nTask(\"coder\", \"Complete all TODO items\")\nTask(\"tester\", \"Add tests for completed TODOs\")\nTask(\"reviewer\", \"Review TODO completions\")",
      "timeEstimate": "770 minutes with parallel agents",
      "priority": "high",
      "benefit": "Reduce technical debt"
    },
    {
      "type": "add-tests",
      "project": "chromium-bidi",
      "title": "Add test coverage to chromium-bidi",
      "description": "Generate comprehensive test suite",
      "implementation": "\nTask(\"tdd-london-swarm\", \"Create test suite with mocks\")\nTask(\"tester\", \"Add integration tests\")\nBash(\"npm test -- --coverage\")",
      "timeEstimate": "20 minutes",
      "priority": "high",
      "benefit": "Prevent regressions"
    },
    {
      "type": "add-tests",
      "project": "estraverse",
      "title": "Add test coverage to estraverse",
      "description": "Generate comprehensive test suite",
      "implementation": "\nTask(\"tdd-london-swarm\", \"Create test suite with mocks\")\nTask(\"tester\", \"Add integration tests\")\nBash(\"npm test -- --coverage\")",
      "timeEstimate": "20 minutes",
      "priority": "high",
      "benefit": "Prevent regressions"
    },
    {
      "type": "add-tests",
      "project": "ansi-styles",
      "title": "Add test coverage to ansi-styles",
      "description": "Generate comprehensive test suite",
      "implementation": "\nTask(\"tdd-london-swarm\", \"Create test suite with mocks\")\nTask(\"tester\", \"Add integration tests\")\nBash(\"npm test -- --coverage\")",
      "timeEstimate": "20 minutes",
      "priority": "high",
      "benefit": "Prevent regressions"
    },
    {
      "type": "add-tests",
      "project": "js-tokens",
      "title": "Add test coverage to js-tokens",
      "description": "Generate comprehensive test suite",
      "implementation": "\nTask(\"tdd-london-swarm\", \"Create test suite with mocks\")\nTask(\"tester\", \"Add integration tests\")\nBash(\"npm test -- --coverage\")",
      "timeEstimate": "20 minutes",
      "priority": "high",
      "benefit": "Prevent regressions"
    },
    {
      "type": "add-tests",
      "project": "fast-fifo",
      "title": "Add test coverage to fast-fifo",
      "description": "Generate comprehensive test suite",
      "implementation": "\nTask(\"tdd-london-swarm\", \"Create test suite with mocks\")\nTask(\"tester\", \"Add integration tests\")\nBash(\"npm test -- --coverage\")",
      "timeEstimate": "20 minutes",
      "priority": "high",
      "benefit": "Prevent regressions"
    },
    {
      "type": "add-tests",
      "project": "pump",
      "title": "Add test coverage to pump",
      "description": "Generate comprehensive test suite",
      "implementation": "\nTask(\"tdd-london-swarm\", \"Create test suite with mocks\")\nTask(\"tester\", \"Add integration tests\")\nBash(\"npm test -- --coverage\")",
      "timeEstimate": "20 minutes",
      "priority": "high",
      "benefit": "Prevent regressions"
    },
    {
      "type": "add-tests",
      "project": "get-stream",
      "title": "Add test coverage to get-stream",
      "description": "Generate comprehensive test suite",
      "implementation": "\nTask(\"tdd-london-swarm\", \"Create test suite with mocks\")\nTask(\"tester\", \"Add integration tests\")\nBash(\"npm test -- --coverage\")",
      "timeEstimate": "20 minutes",
      "priority": "high",
      "benefit": "Prevent regressions"
    },
    {
      "type": "add-tests",
      "project": "is-arrayish",
      "title": "Add test coverage to is-arrayish",
      "description": "Generate comprehensive test suite",
      "implementation": "\nTask(\"tdd-london-swarm\", \"Create test suite with mocks\")\nTask(\"tester\", \"Add integration tests\")\nBash(\"npm test -- --coverage\")",
      "timeEstimate": "20 minutes",
      "priority": "high",
      "benefit": "Prevent regressions"
    },
    {
      "type": "add-tests",
      "project": "cliui",
      "title": "Add test coverage to cliui",
      "description": "Generate comprehensive test suite",
      "implementation": "\nTask(\"tdd-london-swarm\", \"Create test suite with mocks\")\nTask(\"tester\", \"Add integration tests\")\nBash(\"npm test -- --coverage\")",
      "timeEstimate": "20 minutes",
      "priority": "high",
      "benefit": "Prevent regressions"
    },
    {
      "type": "add-tests",
      "project": "yargs",
      "title": "Add test coverage to yargs",
      "description": "Generate comprehensive test suite",
      "implementation": "\nTask(\"tdd-london-swarm\", \"Create test suite with mocks\")\nTask(\"tester\", \"Add integration tests\")\nBash(\"npm test -- --coverage\")",
      "timeEstimate": "20 minutes",
      "priority": "high",
      "benefit": "Prevent regressions"
    },
    {
      "type": "add-tests",
      "project": "pac-proxy-agent",
      "title": "Add test coverage to pac-proxy-agent",
      "description": "Generate comprehensive test suite",
      "implementation": "\nTask(\"tdd-london-swarm\", \"Create test suite with mocks\")\nTask(\"tester\", \"Add integration tests\")\nBash(\"npm test -- --coverage\")",
      "timeEstimate": "20 minutes",
      "priority": "high",
      "benefit": "Prevent regressions"
    },
    {
      "type": "add-tests",
      "project": "tar-fs",
      "title": "Add test coverage to tar-fs",
      "description": "Generate comprehensive test suite",
      "implementation": "\nTask(\"tdd-london-swarm\", \"Create test suite with mocks\")\nTask(\"tester\", \"Add integration tests\")\nBash(\"npm test -- --coverage\")",
      "timeEstimate": "20 minutes",
      "priority": "high",
      "benefit": "Prevent regressions"
    },
    {
      "type": "add-tests",
      "project": "socks",
      "title": "Add test coverage to socks",
      "description": "Generate comprehensive test suite",
      "implementation": "\nTask(\"tdd-london-swarm\", \"Create test suite with mocks\")\nTask(\"tester\", \"Add integration tests\")\nBash(\"npm test -- --coverage\")",
      "timeEstimate": "20 minutes",
      "priority": "high",
      "benefit": "Prevent regressions"
    },
    {
      "type": "add-tests",
      "project": "import-fresh",
      "title": "Add test coverage to import-fresh",
      "description": "Generate comprehensive test suite",
      "implementation": "\nTask(\"tdd-london-swarm\", \"Create test suite with mocks\")\nTask(\"tester\", \"Add integration tests\")\nBash(\"npm test -- --coverage\")",
      "timeEstimate": "20 minutes",
      "priority": "high",
      "benefit": "Prevent regressions"
    },
    {
      "type": "add-tests",
      "project": "source-map",
      "title": "Add test coverage to source-map",
      "description": "Generate comprehensive test suite",
      "implementation": "\nTask(\"tdd-london-swarm\", \"Create test suite with mocks\")\nTask(\"tester\", \"Add integration tests\")\nBash(\"npm test -- --coverage\")",
      "timeEstimate": "20 minutes",
      "priority": "high",
      "benefit": "Prevent regressions"
    },
    {
      "type": "add-tests",
      "project": "degenerator",
      "title": "Add test coverage to degenerator",
      "description": "Generate comprehensive test suite",
      "implementation": "\nTask(\"tdd-london-swarm\", \"Create test suite with mocks\")\nTask(\"tester\", \"Add integration tests\")\nBash(\"npm test -- --coverage\")",
      "timeEstimate": "20 minutes",
      "priority": "high",
      "benefit": "Prevent regressions"
    },
    {
      "type": "todo-completion",
      "project": "puppeteer-core",
      "title": "Complete 79 TODOs in puppeteer-core",
      "description": "Use parallel agents to clear technical debt",
      "implementation": "\n// Find all TODOs\nGrep(\"TODO|FIXME|HACK\", {output_mode: \"content\", -n: true})\n\n// Spawn agents to complete them\nTask(\"coder\", \"Complete all TODO items\")\nTask(\"tester\", \"Add tests for completed TODOs\")\nTask(\"reviewer\", \"Review TODO completions\")",
      "timeEstimate": "395 minutes with parallel agents",
      "priority": "high",
      "benefit": "Reduce technical debt"
    },
    {
      "type": "add-tests",
      "project": "puppeteer-core",
      "title": "Add test coverage to puppeteer-core",
      "description": "Generate comprehensive test suite",
      "implementation": "\nTask(\"tdd-london-swarm\", \"Create test suite with mocks\")\nTask(\"tester\", \"Add integration tests\")\nBash(\"npm test -- --coverage\")",
      "timeEstimate": "20 minutes",
      "priority": "high",
      "benefit": "Prevent regressions"
    },
    {
      "type": "add-tests",
      "project": "escodegen",
      "title": "Add test coverage to escodegen",
      "description": "Generate comprehensive test suite",
      "implementation": "\nTask(\"tdd-london-swarm\", \"Create test suite with mocks\")\nTask(\"tester\", \"Add integration tests\")\nBash(\"npm test -- --coverage\")",
      "timeEstimate": "20 minutes",
      "priority": "high",
      "benefit": "Prevent regressions"
    },
    {
      "type": "add-tests",
      "project": "cosmiconfig",
      "title": "Add test coverage to cosmiconfig",
      "description": "Generate comprehensive test suite",
      "implementation": "\nTask(\"tdd-london-swarm\", \"Create test suite with mocks\")\nTask(\"tester\", \"Add integration tests\")\nBash(\"npm test -- --coverage\")",
      "timeEstimate": "20 minutes",
      "priority": "high",
      "benefit": "Prevent regressions"
    },
    {
      "type": "add-tests",
      "project": "https-proxy-agent",
      "title": "Add test coverage to https-proxy-agent",
      "description": "Generate comprehensive test suite",
      "implementation": "\nTask(\"tdd-london-swarm\", \"Create test suite with mocks\")\nTask(\"tester\", \"Add integration tests\")\nBash(\"npm test -- --coverage\")",
      "timeEstimate": "20 minutes",
      "priority": "high",
      "benefit": "Prevent regressions"
    },
    {
      "type": "add-tests",
      "project": "string-width",
      "title": "Add test coverage to string-width",
      "description": "Generate comprehensive test suite",
      "implementation": "\nTask(\"tdd-london-swarm\", \"Create test suite with mocks\")\nTask(\"tester\", \"Add integration tests\")\nBash(\"npm test -- --coverage\")",
      "timeEstimate": "20 minutes",
      "priority": "high",
      "benefit": "Prevent regressions"
    },
    {
      "type": "add-tests",
      "project": "streamx",
      "title": "Add test coverage to streamx",
      "description": "Generate comprehensive test suite",
      "implementation": "\nTask(\"tdd-london-swarm\", \"Create test suite with mocks\")\nTask(\"tester\", \"Add integration tests\")\nBash(\"npm test -- --coverage\")",
      "timeEstimate": "20 minutes",
      "priority": "high",
      "benefit": "Prevent regressions"
    },
    {
      "type": "add-tests",
      "project": "yauzl",
      "title": "Add test coverage to yauzl",
      "description": "Generate comprehensive test suite",
      "implementation": "\nTask(\"tdd-london-swarm\", \"Create test suite with mocks\")\nTask(\"tester\", \"Add integration tests\")\nBash(\"npm test -- --coverage\")",
      "timeEstimate": "20 minutes",
      "priority": "high",
      "benefit": "Prevent regressions"
    },
    {
      "type": "add-tests",
      "project": "wrappy",
      "title": "Add test coverage to wrappy",
      "description": "Generate comprehensive test suite",
      "implementation": "\nTask(\"tdd-london-swarm\", \"Create test suite with mocks\")\nTask(\"tester\", \"Add integration tests\")\nBash(\"npm test -- --coverage\")",
      "timeEstimate": "20 minutes",
      "priority": "high",
      "benefit": "Prevent regressions"
    },
    {
      "type": "add-tests",
      "project": "http-proxy-agent",
      "title": "Add test coverage to http-proxy-agent",
      "description": "Generate comprehensive test suite",
      "implementation": "\nTask(\"tdd-london-swarm\", \"Create test suite with mocks\")\nTask(\"tester\", \"Add integration tests\")\nBash(\"npm test -- --coverage\")",
      "timeEstimate": "20 minutes",
      "priority": "high",
      "benefit": "Prevent regressions"
    },
    {
      "type": "add-tests",
      "project": "resolve-from",
      "title": "Add test coverage to resolve-from",
      "description": "Generate comprehensive test suite",
      "implementation": "\nTask(\"tdd-london-swarm\", \"Create test suite with mocks\")\nTask(\"tester\", \"Add integration tests\")\nBash(\"npm test -- --coverage\")",
      "timeEstimate": "20 minutes",
      "priority": "high",
      "benefit": "Prevent regressions"
    },
    {
      "type": "add-tests",
      "project": "data-uri-to-buffer",
      "title": "Add test coverage to data-uri-to-buffer",
      "description": "Generate comprehensive test suite",
      "implementation": "\nTask(\"tdd-london-swarm\", \"Create test suite with mocks\")\nTask(\"tester\", \"Add integration tests\")\nBash(\"npm test -- --coverage\")",
      "timeEstimate": "20 minutes",
      "priority": "high",
      "benefit": "Prevent regressions"
    },
    {
      "type": "add-tests",
      "project": "emoji-regex",
      "title": "Add test coverage to emoji-regex",
      "description": "Generate comprehensive test suite",
      "implementation": "\nTask(\"tdd-london-swarm\", \"Create test suite with mocks\")\nTask(\"tester\", \"Add integration tests\")\nBash(\"npm test -- --coverage\")",
      "timeEstimate": "20 minutes",
      "priority": "high",
      "benefit": "Prevent regressions"
    },
    {
      "type": "add-tests",
      "project": "ws",
      "title": "Add test coverage to ws",
      "description": "Generate comprehensive test suite",
      "implementation": "\nTask(\"tdd-london-swarm\", \"Create test suite with mocks\")\nTask(\"tester\", \"Add integration tests\")\nBash(\"npm test -- --coverage\")",
      "timeEstimate": "20 minutes",
      "priority": "high",
      "benefit": "Prevent regressions"
    },
    {
      "type": "add-tests",
      "project": "pac-resolver",
      "title": "Add test coverage to pac-resolver",
      "description": "Generate comprehensive test suite",
      "implementation": "\nTask(\"tdd-london-swarm\", \"Create test suite with mocks\")\nTask(\"tester\", \"Add integration tests\")\nBash(\"npm test -- --coverage\")",
      "timeEstimate": "20 minutes",
      "priority": "high",
      "benefit": "Prevent regressions"
    },
    {
      "type": "add-tests",
      "project": "bare-events",
      "title": "Add test coverage to bare-events",
      "description": "Generate comprehensive test suite",
      "implementation": "\nTask(\"tdd-london-swarm\", \"Create test suite with mocks\")\nTask(\"tester\", \"Add integration tests\")\nBash(\"npm test -- --coverage\")",
      "timeEstimate": "20 minutes",
      "priority": "high",
      "benefit": "Prevent regressions"
    },
    {
      "type": "add-tests",
      "project": "debug",
      "title": "Add test coverage to debug",
      "description": "Generate comprehensive test suite",
      "implementation": "\nTask(\"tdd-london-swarm\", \"Create test suite with mocks\")\nTask(\"tester\", \"Add integration tests\")\nBash(\"npm test -- --coverage\")",
      "timeEstimate": "20 minutes",
      "priority": "high",
      "benefit": "Prevent regressions"
    },
    {
      "type": "add-tests",
      "project": "mitt",
      "title": "Add test coverage to mitt",
      "description": "Generate comprehensive test suite",
      "implementation": "\nTask(\"tdd-london-swarm\", \"Create test suite with mocks\")\nTask(\"tester\", \"Add integration tests\")\nBash(\"npm test -- --coverage\")",
      "timeEstimate": "20 minutes",
      "priority": "high",
      "benefit": "Prevent regressions"
    },
    {
      "type": "todo-completion",
      "project": "tests",
      "title": "Complete 367 TODOs in tests",
      "description": "Use parallel agents to clear technical debt",
      "implementation": "\n// Find all TODOs\nGrep(\"TODO|FIXME|HACK\", {output_mode: \"content\", -n: true})\n\n// Spawn agents to complete them\nTask(\"coder\", \"Complete all TODO items\")\nTask(\"tester\", \"Add tests for completed TODOs\")\nTask(\"reviewer\", \"Review TODO completions\")",
      "timeEstimate": "1835 minutes with parallel agents",
      "priority": "high",
      "benefit": "Reduce technical debt"
    },
    {
      "type": "todo-completion",
      "project": "pachacuti-slack-integration",
      "title": "Complete 351 TODOs in pachacuti-slack-integration",
      "description": "Use parallel agents to clear technical debt",
      "implementation": "\n// Find all TODOs\nGrep(\"TODO|FIXME|HACK\", {output_mode: \"content\", -n: true})\n\n// Spawn agents to complete them\nTask(\"coder\", \"Complete all TODO items\")\nTask(\"tester\", \"Add tests for completed TODOs\")\nTask(\"reviewer\", \"Review TODO completions\")",
      "timeEstimate": "1755 minutes with parallel agents",
      "priority": "high",
      "benefit": "Reduce technical debt"
    },
    {
      "type": "add-tests",
      "project": "pachacuti-slack-integration",
      "title": "Add test coverage to pachacuti-slack-integration",
      "description": "Generate comprehensive test suite",
      "implementation": "\nTask(\"tdd-london-swarm\", \"Create test suite with mocks\")\nTask(\"tester\", \"Add integration tests\")\nBash(\"npm test -- --coverage\")",
      "timeEstimate": "20 minutes",
      "priority": "high",
      "benefit": "Prevent regressions"
    },
    {
      "type": "todo-completion",
      "project": "crypto-campaign-unified",
      "title": "Complete 1138 TODOs in crypto-campaign-unified",
      "description": "Use parallel agents to clear technical debt",
      "implementation": "\n// Find all TODOs\nGrep(\"TODO|FIXME|HACK\", {output_mode: \"content\", -n: true})\n\n// Spawn agents to complete them\nTask(\"coder\", \"Complete all TODO items\")\nTask(\"tester\", \"Add tests for completed TODOs\")\nTask(\"reviewer\", \"Review TODO completions\")",
      "timeEstimate": "5690 minutes with parallel agents",
      "priority": "high",
      "benefit": "Reduce technical debt"
    },
    {
      "type": "batch-optimization",
      "title": "Optimize file operations with batching",
      "description": "Use MultiEdit and batch Read for large codebases",
      "implementation": "\n// Batch read multiple files\nconst files = await Glob(\"**/*.js\");\nfiles.forEach(f => Read(f)); // All in one message\n\n// Batch edit multiple files\nMultiEdit(file, [edit1, edit2, edit3])",
      "timeEstimate": "Saves 70% on file operations",
      "priority": "high",
      "benefit": "Dramatic speed improvement"
    },
    {
      "type": "refactor",
      "project": "pachacuti",
      "title": "Refactor 912 complex files",
      "description": "Break down files over 500 lines",
      "implementation": "\n// Analyze complexity\nTask(\"code-analyzer\", \"Analyze shell-viewer/frontend/node_modules/workbox-strategies/src/StrategyHandler.ts, shell-viewer/frontend/node_modules/idb/build/entry.d.ts, shell-viewer/frontend/node_modules/@types/node-forge/index.d.ts, shell-viewer/frontend/node_modules/@types/d3-shape/index.d.ts, shell-viewer/frontend/node_modules/@types/express-serve-static-core/index.d.ts, shell-viewer/frontend/node_modules/@types/d3-array/index.d.ts, shell-viewer/frontend/node_modules/@types/express/node_modules/@types/express-serve-static-core/index.d.ts, shell-viewer/frontend/node_modules/@types/d3-scale/index.d.ts, shell-viewer/frontend/node_modules/@types/prettier/index.d.ts, shell-viewer/frontend/node_modules/@types/d3-color/index.d.ts, shell-viewer/frontend/node_modules/@types/d3-time/index.d.ts, shell-viewer/frontend/node_modules/@types/babel__traverse/index.d.ts, shell-viewer/frontend/node_modules/@types/yargs/index.d.ts, shell-viewer/frontend/node_modules/@types/eslint/rules/best-practices.d.ts, shell-viewer/frontend/node_modules/@types/eslint/rules/stylistic-issues.d.ts, shell-viewer/frontend/node_modules/@types/eslint/rules/ecmascript-6.d.ts, shell-viewer/frontend/node_modules/@types/eslint/rules/possible-errors.d.ts, shell-viewer/frontend/node_modules/@types/eslint/index.d.ts, shell-viewer/frontend/node_modules/@types/estree/index.d.ts, shell-viewer/frontend/node_modules/@types/node/diagnostics_channel.d.ts, shell-viewer/frontend/node_modules/@types/node/tls.d.ts, shell-viewer/frontend/node_modules/@types/node/readline.d.ts, shell-viewer/frontend/node_modules/@types/node/crypto.d.ts, shell-viewer/frontend/node_modules/@types/node/events.d.ts, shell-viewer/frontend/node_modules/@types/node/buffer.d.ts, shell-viewer/frontend/node_modules/@types/node/worker_threads.d.ts, shell-viewer/frontend/node_modules/@types/node/async_hooks.d.ts, shell-viewer/frontend/node_modules/@types/node/stream/web.d.ts, shell-viewer/frontend/node_modules/@types/node/dns.d.ts, shell-viewer/frontend/node_modules/@types/node/vm.d.ts, shell-viewer/frontend/node_modules/@types/node/test.d.ts, shell-viewer/frontend/node_modules/@types/node/http.d.ts, shell-viewer/frontend/node_modules/@types/node/http2.d.ts, shell-viewer/frontend/node_modules/@types/node/stream.d.ts, shell-viewer/frontend/node_modules/@types/node/inspector.d.ts, shell-viewer/frontend/node_modules/@types/node/v8.d.ts, shell-viewer/frontend/node_modules/@types/node/perf_hooks.d.ts, shell-viewer/frontend/node_modules/@types/node/url.d.ts, shell-viewer/frontend/node_modules/@types/node/cluster.d.ts, shell-viewer/frontend/node_modules/@types/node/https.d.ts, shell-viewer/frontend/node_modules/@types/node/assert.d.ts, shell-viewer/frontend/node_modules/@types/node/fs.d.ts, shell-viewer/frontend/node_modules/@types/node/dgram.d.ts, shell-viewer/frontend/node_modules/@types/node/child_process.d.ts, shell-viewer/frontend/node_modules/@types/node/zlib.d.ts, shell-viewer/frontend/node_modules/@types/node/module.d.ts, shell-viewer/frontend/node_modules/@types/node/sqlite.d.ts, shell-viewer/frontend/node_modules/@types/node/process.d.ts, shell-viewer/frontend/node_modules/@types/node/util.d.ts, shell-viewer/frontend/node_modules/@types/node/dns/promises.d.ts, shell-viewer/frontend/node_modules/@types/node/fs/promises.d.ts, shell-viewer/frontend/node_modules/@types/node/net.d.ts, shell-viewer/frontend/node_modules/@types/babel__core/index.d.ts, shell-viewer/frontend/node_modules/@types/react/ts5.0/index.d.ts, shell-viewer/frontend/node_modules/@types/react/index.d.ts, shell-viewer/frontend/node_modules/@types/q/index.d.ts, shell-viewer/frontend/node_modules/@types/json-schema/index.d.ts, shell-viewer/frontend/node_modules/csstype/index.d.ts, shell-viewer/frontend/node_modules/tempy/node_modules/type-fest/source/package-json.d.ts, shell-viewer/frontend/node_modules/tempy/node_modules/type-fest/source/tsconfig-json.d.ts, shell-viewer/frontend/node_modules/type-fest/source/package-json.d.ts, shell-viewer/frontend/node_modules/type-fest/source/tsconfig-json.d.ts, shell-viewer/frontend/node_modules/commander/typings/index.d.ts, shell-viewer/frontend/node_modules/xterm/typings/xterm.d.ts, shell-viewer/frontend/node_modules/xterm/src/browser/renderer/shared/TextureAtlas.ts, shell-viewer/frontend/node_modules/xterm/src/browser/renderer/shared/CustomGlyphs.ts, shell-viewer/frontend/node_modules/xterm/src/browser/renderer/dom/DomRendererRowFactory.ts, shell-viewer/frontend/node_modules/xterm/src/browser/renderer/dom/DomRenderer.ts, shell-viewer/frontend/node_modules/xterm/src/browser/Terminal.ts, shell-viewer/frontend/node_modules/xterm/src/browser/services/SelectionService.ts, shell-viewer/frontend/node_modules/xterm/src/common/InputHandler.ts, shell-viewer/frontend/node_modules/xterm/src/common/Types.d.ts, shell-viewer/frontend/node_modules/xterm/src/common/parser/EscapeSequenceParser.ts, shell-viewer/frontend/node_modules/xterm/src/common/buffer/Buffer.ts, shell-viewer/frontend/node_modules/xterm/src/common/buffer/BufferLine.ts, shell-viewer/frontend/node_modules/decimal.js-light/decimal.d.ts, shell-viewer/frontend/node_modules/acorn/dist/acorn.d.ts, shell-viewer/frontend/node_modules/axe-core/axe.d.ts, shell-viewer/frontend/node_modules/typescript/lib/lib.es2015.core.d.ts, shell-viewer/frontend/node_modules/typescript/lib/lib.es5.d.ts, shell-viewer/frontend/node_modules/typescript/lib/typescriptServices.d.ts, shell-viewer/frontend/node_modules/typescript/lib/lib.dom.d.ts, shell-viewer/frontend/node_modules/typescript/lib/lib.es2020.bigint.d.ts, shell-viewer/frontend/node_modules/typescript/lib/protocol.d.ts, shell-viewer/frontend/node_modules/typescript/lib/lib.webworker.d.ts, shell-viewer/frontend/node_modules/typescript/lib/tsserverlibrary.d.ts, shell-viewer/frontend/node_modules/typescript/lib/typescript.d.ts, shell-viewer/frontend/node_modules/socket.io-client/build/esm-debug/socket.d.ts, shell-viewer/frontend/node_modules/socket.io-client/build/esm/socket.d.ts, shell-viewer/frontend/node_modules/socket.io-client/build/cjs/socket.d.ts, shell-viewer/frontend/node_modules/date-fns/typings.d.ts, shell-viewer/frontend/node_modules/postcss/lib/node.d.ts, shell-viewer/frontend/node_modules/@rollup/pluginutils/node_modules/@types/estree/index.d.ts, shell-viewer/frontend/node_modules/@typescript-eslint/types/dist/generated/ast-spec.d.ts, shell-viewer/frontend/node_modules/@typescript-eslint/types/_ts3.4/dist/generated/ast-spec.d.ts, shell-viewer/frontend/node_modules/@typescript-eslint/utils/dist/ast-utils/helpers.d.ts, shell-viewer/frontend/node_modules/@typescript-eslint/utils/_ts3.4/dist/ast-utils/helpers.d.ts, shell-viewer/frontend/node_modules/@remix-run/router/history.ts, shell-viewer/frontend/node_modules/@remix-run/router/router.ts, shell-viewer/frontend/node_modules/@remix-run/router/dist/utils.d.ts, shell-viewer/frontend/node_modules/@remix-run/router/dist/router.d.ts, shell-viewer/frontend/node_modules/@remix-run/router/utils.ts, shell-viewer/frontend/node_modules/big-integer/BigInteger.d.ts, shell-viewer/frontend/node_modules/xterm-addon-search/src/SearchAddon.ts, shell-viewer/frontend/node_modules/enhanced-resolve/types.d.ts, shell-viewer/frontend/node_modules/postcss-modules-local-by-default/node_modules/postcss-selector-parser/postcss-selector-parser.d.ts, shell-viewer/frontend/node_modules/saxes/saxes.d.ts, shell-viewer/frontend/node_modules/postcss-svgo/node_modules/commander/typings/index.d.ts, total, shell-viewer/frontend/node_modules/@mui/icons-material/index.d.ts, total, shell-viewer/frontend/node_modules/@mui/material/styles/components.d.ts, shell-viewer/frontend/node_modules/webpack/types.d.ts, shell-viewer/frontend/node_modules/resolve-url-loader/node_modules/postcss/lib/postcss.d.ts, shell-viewer/frontend/node_modules/workbox-build/build/types.d.ts, shell-viewer/frontend/node_modules/workbox-build/src/types.ts, shell-viewer/frontend/node_modules/webpack-dev-server/types/bin/cli-flags.d.ts, shell-viewer/frontend/node_modules/webpack-dev-server/types/lib/Server.d.ts, shell-viewer/frontend/node_modules/postcss-modules-scope/node_modules/postcss-selector-parser/postcss-selector-parser.d.ts, shell-viewer/frontend/node_modules/@babel/types/lib/index-legacy.d.ts, shell-viewer/frontend/node_modules/@babel/types/lib/index.d.ts, shell-viewer/frontend/node_modules/postcss-selector-parser/postcss-selector-parser.d.ts, shell-viewer/frontend/node_modules/rollup/dist/rollup.d.ts, shell-viewer/frontend/node_modules/ansi-escapes/node_modules/type-fest/source/package-json.d.ts, shell-viewer/frontend/node_modules/ansi-escapes/node_modules/type-fest/source/tsconfig-json.d.ts, shell-viewer/frontend/node_modules/minipass/dist/esm/index.d.ts, shell-viewer/frontend/node_modules/minipass/dist/commonjs/index.d.ts, shell-viewer/frontend/node_modules/execa/index.d.ts, shell-viewer/frontend/node_modules/@jridgewell/trace-mapping/src/trace-mapping.ts, shell-viewer/frontend/node_modules/@jridgewell/gen-mapping/src/gen-mapping.ts, shell-viewer/frontend/node_modules/workbox-window/src/Workbox.ts, shell-viewer/frontend/node_modules/recharts/types/util/types.d.ts, shell-viewer/frontend/node_modules/axios/index.d.ts, shell-viewer/frontend/node_modules/monaco-editor/monaco.d.ts, shell-viewer/frontend/node_modules/monaco-editor/esm/vs/editor/editor.api.d.ts, shell-viewer/frontend/node_modules/ajv/lib/core.ts, shell-viewer/frontend/node_modules/ajv/lib/compile/validate/index.ts, shell-viewer/frontend/node_modules/ajv/lib/compile/codegen/index.ts, shell-viewer/frontend/node_modules/@eslint-community/regexpp/index.d.ts, shell-viewer/frontend/node_modules/jest-watch-typeahead/node_modules/@types/yargs/index.d.ts, shell-viewer/frontend/node_modules/jest-watch-typeahead/node_modules/@jest/types/build/index.d.ts, shell-viewer/frontend/node_modules/jest-watch-typeahead/node_modules/emittery/index.d.ts, shell-viewer/frontend/node_modules/path-scurry/dist/esm/index.d.ts, shell-viewer/frontend/node_modules/path-scurry/dist/commonjs/index.d.ts, shell-viewer/frontend/node_modules/path-scurry/node_modules/lru-cache/dist/esm/index.d.ts, shell-viewer/frontend/node_modules/path-scurry/node_modules/lru-cache/dist/commonjs/index.d.ts, shell-viewer/backend/node_modules/@types/babel__traverse/index.d.ts, shell-viewer/backend/node_modules/@types/yargs/index.d.ts, shell-viewer/backend/node_modules/@types/node/diagnostics_channel.d.ts, shell-viewer/backend/node_modules/@types/node/tls.d.ts, shell-viewer/backend/node_modules/@types/node/readline.d.ts, shell-viewer/backend/node_modules/@types/node/crypto.d.ts, shell-viewer/backend/node_modules/@types/node/events.d.ts, shell-viewer/backend/node_modules/@types/node/buffer.d.ts, shell-viewer/backend/node_modules/@types/node/worker_threads.d.ts, shell-viewer/backend/node_modules/@types/node/async_hooks.d.ts, shell-viewer/backend/node_modules/@types/node/stream/web.d.ts, shell-viewer/backend/node_modules/@types/node/dns.d.ts, shell-viewer/backend/node_modules/@types/node/vm.d.ts, shell-viewer/backend/node_modules/@types/node/test.d.ts, shell-viewer/backend/node_modules/@types/node/http.d.ts, shell-viewer/backend/node_modules/@types/node/http2.d.ts, shell-viewer/backend/node_modules/@types/node/stream.d.ts, shell-viewer/backend/node_modules/@types/node/inspector.d.ts, shell-viewer/backend/node_modules/@types/node/v8.d.ts, shell-viewer/backend/node_modules/@types/node/perf_hooks.d.ts, shell-viewer/backend/node_modules/@types/node/url.d.ts, shell-viewer/backend/node_modules/@types/node/cluster.d.ts, shell-viewer/backend/node_modules/@types/node/https.d.ts, shell-viewer/backend/node_modules/@types/node/assert.d.ts, shell-viewer/backend/node_modules/@types/node/fs.d.ts, shell-viewer/backend/node_modules/@types/node/dgram.d.ts, shell-viewer/backend/node_modules/@types/node/child_process.d.ts, shell-viewer/backend/node_modules/@types/node/zlib.d.ts, shell-viewer/backend/node_modules/@types/node/module.d.ts, shell-viewer/backend/node_modules/@types/node/sqlite.d.ts, shell-viewer/backend/node_modules/@types/node/process.d.ts, shell-viewer/backend/node_modules/@types/node/util.d.ts, shell-viewer/backend/node_modules/@types/node/dns/promises.d.ts, shell-viewer/backend/node_modules/@types/node/fs/promises.d.ts, shell-viewer/backend/node_modules/@types/node/net.d.ts, shell-viewer/backend/node_modules/@types/babel__core/index.d.ts, shell-viewer/backend/node_modules/web-streams-polyfill/types/ponyfill.d.ts, shell-viewer/backend/node_modules/@jest/types/build/index.d.ts, shell-viewer/backend/node_modules/type-fest/source/package-json.d.ts, shell-viewer/backend/node_modules/type-fest/source/tsconfig-json.d.ts, shell-viewer/backend/node_modules/ip-address/src/ipv6.ts, shell-viewer/backend/node_modules/moment/moment.d.ts, shell-viewer/backend/node_modules/moment/ts3.1-typings/moment.d.ts, shell-viewer/backend/node_modules/emittery/index.d.ts, shell-viewer/backend/node_modules/smart-buffer/typings/smartbuffer.d.ts, shell-viewer/backend/node_modules/fecha/src/fecha.ts, shell-viewer/backend/node_modules/socket.io/dist/socket.d.ts, shell-viewer/backend/node_modules/socket.io/dist/index.d.ts, shell-viewer/backend/node_modules/@sinclair/typebox/typebox.d.ts, shell-viewer/backend/node_modules/@babel/types/lib/index-legacy.d.ts, shell-viewer/backend/node_modules/@babel/types/lib/index.d.ts, shell-viewer/backend/node_modules/@supabase/auth-js/dist/module/GoTrueClient.d.ts, shell-viewer/backend/node_modules/@supabase/auth-js/dist/module/lib/types.d.ts, shell-viewer/backend/node_modules/@supabase/auth-js/dist/main/GoTrueClient.d.ts, shell-viewer/backend/node_modules/@supabase/auth-js/dist/main/lib/types.d.ts, shell-viewer/backend/node_modules/@supabase/auth-js/src/lib/types.ts, shell-viewer/backend/node_modules/@supabase/auth-js/src/GoTrueClient.ts, shell-viewer/backend/node_modules/@supabase/realtime-js/src/RealtimeClient.ts, shell-viewer/backend/node_modules/@supabase/realtime-js/src/RealtimeChannel.ts, shell-viewer/backend/node_modules/@supabase/storage-js/src/packages/StorageFileApi.ts, shell-viewer/backend/node_modules/@supabase/postgrest-js/src/PostgrestFilterBuilder.ts, shell-viewer/backend/node_modules/@supabase/postgrest-js/src/select-query-parser/utils.ts, shell-viewer/backend/node_modules/@supabase/postgrest-js/src/select-query-parser/result.ts, shell-viewer/backend/node_modules/execa/index.d.ts, shell-viewer/backend/node_modules/@jridgewell/trace-mapping/src/trace-mapping.ts, shell-viewer/backend/node_modules/@jridgewell/gen-mapping/src/gen-mapping.ts, shell-viewer/backend/node_modules/openai/resources/beta/realtime/realtime.d.ts, shell-viewer/backend/node_modules/openai/resources/beta/realtime/sessions.d.ts, shell-viewer/backend/node_modules/openai/resources/beta/threads/messages.d.ts, shell-viewer/backend/node_modules/openai/resources/beta/threads/threads.d.ts, shell-viewer/backend/node_modules/openai/resources/beta/threads/runs/steps.d.ts, shell-viewer/backend/node_modules/openai/resources/beta/threads/runs/runs.d.ts, shell-viewer/backend/node_modules/openai/resources/beta/assistants.d.ts, shell-viewer/backend/node_modules/openai/resources/evals/evals.d.ts, shell-viewer/backend/node_modules/openai/resources/evals/runs/runs.d.ts, total, shell-viewer/backend/node_modules/openai/resources/chat/completions/completions.d.ts, shell-viewer/backend/node_modules/openai/resources/responses/responses.d.ts, shell-viewer/backend/node_modules/openai/resources/fine-tuning/jobs/jobs.d.ts, shell-viewer/backend/node_modules/openai/node_modules/@types/node/diagnostics_channel.d.ts, shell-viewer/backend/node_modules/openai/node_modules/@types/node/tls.d.ts, shell-viewer/backend/node_modules/openai/node_modules/@types/node/readline.d.ts, shell-viewer/backend/node_modules/openai/node_modules/@types/node/crypto.d.ts, shell-viewer/backend/node_modules/openai/node_modules/@types/node/events.d.ts, shell-viewer/backend/node_modules/openai/node_modules/@types/node/buffer.d.ts, shell-viewer/backend/node_modules/openai/node_modules/@types/node/worker_threads.d.ts, shell-viewer/backend/node_modules/openai/node_modules/@types/node/async_hooks.d.ts, shell-viewer/backend/node_modules/openai/node_modules/@types/node/stream/web.d.ts, shell-viewer/backend/node_modules/openai/node_modules/@types/node/dns.d.ts, shell-viewer/backend/node_modules/openai/node_modules/@types/node/vm.d.ts, shell-viewer/backend/node_modules/openai/node_modules/@types/node/test.d.ts, shell-viewer/backend/node_modules/openai/node_modules/@types/node/http.d.ts, shell-viewer/backend/node_modules/openai/node_modules/@types/node/http2.d.ts, shell-viewer/backend/node_modules/openai/node_modules/@types/node/stream.d.ts, shell-viewer/backend/node_modules/openai/node_modules/@types/node/inspector.d.ts, shell-viewer/backend/node_modules/openai/node_modules/@types/node/v8.d.ts, shell-viewer/backend/node_modules/openai/node_modules/@types/node/perf_hooks.d.ts, shell-viewer/backend/node_modules/openai/node_modules/@types/node/url.d.ts, shell-viewer/backend/node_modules/openai/node_modules/@types/node/cluster.d.ts, shell-viewer/backend/node_modules/openai/node_modules/@types/node/https.d.ts, shell-viewer/backend/node_modules/openai/node_modules/@types/node/assert.d.ts, shell-viewer/backend/node_modules/openai/node_modules/@types/node/fs.d.ts, shell-viewer/backend/node_modules/openai/node_modules/@types/node/dgram.d.ts, shell-viewer/backend/node_modules/openai/node_modules/@types/node/child_process.d.ts, shell-viewer/backend/node_modules/openai/node_modules/@types/node/zlib.d.ts, shell-viewer/backend/node_modules/openai/node_modules/@types/node/module.d.ts, shell-viewer/backend/node_modules/openai/node_modules/@types/node/process.d.ts, shell-viewer/backend/node_modules/openai/node_modules/@types/node/util.d.ts, shell-viewer/backend/node_modules/openai/node_modules/@types/node/fs/promises.d.ts, shell-viewer/backend/node_modules/openai/node_modules/@types/node/net.d.ts, shell-viewer/backend/node_modules/openai/src/resources/beta/realtime/realtime.ts, shell-viewer/backend/node_modules/openai/src/resources/beta/realtime/sessions.ts, shell-viewer/backend/node_modules/openai/src/resources/beta/threads/messages.ts, shell-viewer/backend/node_modules/openai/src/resources/beta/threads/threads.ts, shell-viewer/backend/node_modules/openai/src/resources/beta/threads/runs/runs.ts, shell-viewer/backend/node_modules/openai/src/resources/beta/threads/runs/steps.ts, shell-viewer/backend/node_modules/openai/src/resources/beta/assistants.ts, shell-viewer/backend/node_modules/openai/src/resources/evals/evals.ts, shell-viewer/backend/node_modules/openai/src/resources/evals/runs/runs.ts, shell-viewer/backend/node_modules/openai/src/resources/chat/completions/completions.ts, shell-viewer/backend/node_modules/openai/src/resources/responses/responses.ts, shell-viewer/backend/node_modules/openai/src/resources/fine-tuning/jobs/jobs.ts, shell-viewer/backend/node_modules/openai/src/resources/vector-stores/vector-stores.ts, shell-viewer/backend/node_modules/openai/src/core.ts, shell-viewer/backend/node_modules/openai/src/lib/AbstractChatCompletionRunner.ts, shell-viewer/backend/node_modules/openai/src/lib/AssistantStream.ts, shell-viewer/backend/node_modules/openai/src/lib/ChatCompletionStream.ts, shell-viewer/backend/node_modules/openai/src/index.ts, node_modules/zod/v4/core/schemas.d.ts, node_modules/zod/v4/classic/schemas.d.ts, node_modules/zod/v3/types.d.ts, node_modules/zod/src/v4/core/schemas.ts, node_modules/zod/src/v4/core/api.ts, node_modules/zod/src/v4/core/to-json-schema.ts, node_modules/zod/src/v4/core/checks.ts, node_modules/zod/src/v4/core/util.ts, node_modules/zod/src/v4/mini/tests/index.test.ts, node_modules/zod/src/v4/mini/schemas.ts, node_modules/zod/src/v4/classic/tests/template-literal.test.ts, node_modules/zod/src/v4/classic/tests/index.test.ts, node_modules/zod/src/v4/classic/tests/error-utils.test.ts, node_modules/zod/src/v4/classic/tests/string.test.ts, node_modules/zod/src/v4/classic/tests/discriminated-unions.test.ts, node_modules/zod/src/v4/classic/tests/to-json-schema.test.ts, node_modules/zod/src/v4/classic/tests/refine.test.ts, node_modules/zod/src/v4/classic/tests/error.test.ts, node_modules/zod/src/v4/classic/tests/object.test.ts, node_modules/zod/src/v4/classic/schemas.ts, node_modules/zod/src/v3/tests/string.test.ts, node_modules/zod/src/v3/tests/error.test.ts, node_modules/zod/src/v3/types.ts, node_modules/@types/node/diagnostics_channel.d.ts, node_modules/@types/node/tls.d.ts, node_modules/@types/node/readline.d.ts, node_modules/@types/node/crypto.d.ts, node_modules/@types/node/events.d.ts, node_modules/@types/node/buffer.d.ts, node_modules/@types/node/worker_threads.d.ts, node_modules/@types/node/async_hooks.d.ts, node_modules/@types/node/stream/web.d.ts, node_modules/@types/node/dns.d.ts, node_modules/@types/node/vm.d.ts, node_modules/@types/node/test.d.ts, node_modules/@types/node/http.d.ts, node_modules/@types/node/http2.d.ts, node_modules/@types/node/stream.d.ts, node_modules/@types/node/inspector.d.ts, node_modules/@types/node/v8.d.ts, node_modules/@types/node/perf_hooks.d.ts, node_modules/@types/node/url.d.ts, node_modules/@types/node/cluster.d.ts, node_modules/@types/node/https.d.ts, node_modules/@types/node/assert.d.ts, node_modules/@types/node/fs.d.ts, node_modules/@types/node/dgram.d.ts, node_modules/@types/node/child_process.d.ts, node_modules/@types/node/zlib.d.ts, node_modules/@types/node/module.d.ts, node_modules/@types/node/sqlite.d.ts, node_modules/@types/node/process.d.ts, node_modules/@types/node/util.d.ts, node_modules/@types/node/dns/promises.d.ts, node_modules/@types/node/fs/promises.d.ts, node_modules/@types/node/net.d.ts, node_modules/lru-cache/index.d.ts, node_modules/ip-address/src/ipv6.ts, node_modules/puppeteer/lib/types.d.ts, node_modules/ast-types/gen/builders.d.ts, node_modules/ast-types/gen/namedTypes.d.ts, node_modules/smart-buffer/typings/smartbuffer.d.ts, node_modules/devtools-protocol/types/protocol-mapping.d.ts, node_modules/devtools-protocol/types/protocol-tests-proxy-api.d.ts, node_modules/devtools-protocol/types/protocol.d.ts, node_modules/devtools-protocol/types/protocol-proxy-api.d.ts, node_modules/bare-fs/index.d.ts, node_modules/chromium-bidi/lib/esm/protocol/generated/webdriver-bidi.d.ts, node_modules/chromium-bidi/lib/esm/protocol-parser/generated/webdriver-bidi.d.ts, node_modules/chromium-bidi/lib/esm/protocol-parser/generated/webdriver-bidi-bluetooth.d.ts, node_modules/chromium-bidi/lib/cjs/protocol/generated/webdriver-bidi.d.ts, node_modules/chromium-bidi/lib/cjs/protocol-parser/generated/webdriver-bidi.d.ts, node_modules/chromium-bidi/lib/cjs/protocol-parser/generated/webdriver-bidi-bluetooth.d.ts, node_modules/puppeteer-core/lib/esm/puppeteer/api/ElementHandle.d.ts, node_modules/puppeteer-core/lib/esm/puppeteer/api/Frame.d.ts, node_modules/puppeteer-core/lib/esm/puppeteer/api/Page.d.ts, node_modules/puppeteer-core/lib/types.d.ts, node_modules/puppeteer-core/lib/es5-iife/puppeteer-core-browser.d.ts, node_modules/puppeteer-core/lib/cjs/puppeteer/api/ElementHandle.d.ts, node_modules/puppeteer-core/lib/cjs/puppeteer/api/Frame.d.ts, node_modules/puppeteer-core/lib/cjs/puppeteer/api/Page.d.ts, node_modules/puppeteer-core/src/cdp/EmulationManager.ts, node_modules/puppeteer-core/src/cdp/ExecutionContext.ts, node_modules/puppeteer-core/src/cdp/FrameManager.ts, node_modules/puppeteer-core/src/cdp/Accessibility.ts, node_modules/puppeteer-core/src/cdp/NetworkManager.ts, node_modules/puppeteer-core/src/cdp/Input.ts, node_modules/puppeteer-core/src/cdp/Page.ts, node_modules/puppeteer-core/src/cdp/Coverage.ts, node_modules/puppeteer-core/src/bidi/core/BrowsingContext.ts, node_modules/puppeteer-core/src/bidi/Frame.ts, node_modules/puppeteer-core/src/bidi/Input.ts, node_modules/puppeteer-core/src/bidi/Page.ts, node_modules/puppeteer-core/src/common/USKeyboardLayout.ts, node_modules/puppeteer-core/src/common/Device.ts, node_modules/puppeteer-core/src/api/HTTPRequest.ts, node_modules/puppeteer-core/src/api/Frame.ts, node_modules/puppeteer-core/src/api/Input.ts, node_modules/puppeteer-core/src/api/locators/locators.ts, node_modules/puppeteer-core/src/api/Browser.ts, node_modules/puppeteer-core/src/api/Page.ts, node_modules/puppeteer-core/src/api/ElementHandle.ts, node_modules/puppeteer-core/src/node/BrowserLauncher.ts, node_modules/@puppeteer/browsers/src/install.ts, node_modules/@puppeteer/browsers/src/CLI.ts, node_modules/@puppeteer/browsers/src/launch.ts, tests/node_modules/zod/v4/core/schemas.d.ts, tests/node_modules/zod/v4/classic/schemas.d.ts, tests/node_modules/zod/v3/types.d.ts, tests/node_modules/zod/src/v4/core/schemas.ts, tests/node_modules/zod/src/v4/core/api.ts, tests/node_modules/zod/src/v4/core/to-json-schema.ts, tests/node_modules/zod/src/v4/core/checks.ts, tests/node_modules/zod/src/v4/core/util.ts, tests/node_modules/zod/src/v4/mini/tests/index.test.ts, tests/node_modules/zod/src/v4/mini/schemas.ts, tests/node_modules/zod/src/v4/classic/tests/template-literal.test.ts, tests/node_modules/zod/src/v4/classic/tests/index.test.ts, tests/node_modules/zod/src/v4/classic/tests/error-utils.test.ts, tests/node_modules/zod/src/v4/classic/tests/string.test.ts, tests/node_modules/zod/src/v4/classic/tests/discriminated-unions.test.ts, tests/node_modules/zod/src/v4/classic/tests/to-json-schema.test.ts, tests/node_modules/zod/src/v4/classic/tests/refine.test.ts, tests/node_modules/zod/src/v4/classic/tests/error.test.ts, tests/node_modules/zod/src/v4/classic/tests/object.test.ts, tests/node_modules/zod/src/v4/classic/schemas.ts, tests/node_modules/zod/src/v3/tests/string.test.ts, tests/node_modules/zod/src/v3/tests/error.test.ts, tests/node_modules/zod/src/v3/types.ts, tests/node_modules/@types/node/diagnostics_channel.d.ts, tests/node_modules/@types/node/tls.d.ts, tests/node_modules/@types/node/readline.d.ts, tests/node_modules/@types/node/crypto.d.ts, tests/node_modules/@types/node/events.d.ts, tests/node_modules/@types/node/buffer.d.ts, tests/node_modules/@types/node/worker_threads.d.ts, tests/node_modules/@types/node/async_hooks.d.ts, tests/node_modules/@types/node/stream/web.d.ts, tests/node_modules/@types/node/dns.d.ts, tests/node_modules/@types/node/vm.d.ts, tests/node_modules/@types/node/test.d.ts, tests/node_modules/@types/node/http.d.ts, tests/node_modules/@types/node/http2.d.ts, tests/node_modules/@types/node/stream.d.ts, tests/node_modules/@types/node/inspector.d.ts, tests/node_modules/@types/node/v8.d.ts, tests/node_modules/@types/node/perf_hooks.d.ts, tests/node_modules/@types/node/url.d.ts, tests/node_modules/@types/node/cluster.d.ts, tests/node_modules/@types/node/https.d.ts, tests/node_modules/@types/node/assert.d.ts, tests/node_modules/@types/node/fs.d.ts, tests/node_modules/@types/node/dgram.d.ts, tests/node_modules/@types/node/child_process.d.ts, tests/node_modules/@types/node/zlib.d.ts, tests/node_modules/@types/node/module.d.ts, tests/node_modules/@types/node/sqlite.d.ts, tests/node_modules/@types/node/process.d.ts, tests/node_modules/@types/node/util.d.ts, tests/node_modules/@types/node/dns/promises.d.ts, tests/node_modules/@types/node/fs/promises.d.ts, tests/node_modules/@types/node/net.d.ts, tests/node_modules/lru-cache/index.d.ts, tests/node_modules/ip-address/src/ipv6.ts, tests/node_modules/puppeteer/lib/types.d.ts, tests/node_modules/ast-types/gen/builders.d.ts, tests/node_modules/ast-types/gen/namedTypes.d.ts, tests/node_modules/smart-buffer/typings/smartbuffer.d.ts, tests/node_modules/devtools-protocol/types/protocol-mapping.d.ts, tests/node_modules/devtools-protocol/types/protocol-tests-proxy-api.d.ts, tests/node_modules/devtools-protocol/types/protocol.d.ts, tests/node_modules/devtools-protocol/types/protocol-proxy-api.d.ts, tests/node_modules/bare-fs/index.d.ts, tests/node_modules/chromium-bidi/lib/esm/protocol/generated/webdriver-bidi.d.ts, tests/node_modules/chromium-bidi/lib/esm/protocol-parser/generated/webdriver-bidi.d.ts, tests/node_modules/chromium-bidi/lib/esm/protocol-parser/generated/webdriver-bidi-bluetooth.d.ts, tests/node_modules/chromium-bidi/lib/cjs/protocol/generated/webdriver-bidi.d.ts, tests/node_modules/chromium-bidi/lib/cjs/protocol-parser/generated/webdriver-bidi.d.ts, tests/node_modules/chromium-bidi/lib/cjs/protocol-parser/generated/webdriver-bidi-bluetooth.d.ts, tests/node_modules/puppeteer-core/lib/esm/puppeteer/api/ElementHandle.d.ts, tests/node_modules/puppeteer-core/lib/esm/puppeteer/api/Frame.d.ts, tests/node_modules/puppeteer-core/lib/esm/puppeteer/api/Page.d.ts, tests/node_modules/puppeteer-core/lib/types.d.ts, tests/node_modules/puppeteer-core/lib/es5-iife/puppeteer-core-browser.d.ts, tests/node_modules/puppeteer-core/lib/cjs/puppeteer/api/ElementHandle.d.ts, tests/node_modules/puppeteer-core/lib/cjs/puppeteer/api/Frame.d.ts, tests/node_modules/puppeteer-core/lib/cjs/puppeteer/api/Page.d.ts, tests/node_modules/puppeteer-core/src/cdp/EmulationManager.ts, tests/node_modules/puppeteer-core/src/cdp/ExecutionContext.ts, tests/node_modules/puppeteer-core/src/cdp/FrameManager.ts, tests/node_modules/puppeteer-core/src/cdp/Accessibility.ts, tests/node_modules/puppeteer-core/src/cdp/NetworkManager.ts, tests/node_modules/puppeteer-core/src/cdp/Input.ts, tests/node_modules/puppeteer-core/src/cdp/Page.ts, tests/node_modules/puppeteer-core/src/cdp/Coverage.ts, tests/node_modules/puppeteer-core/src/bidi/core/BrowsingContext.ts, tests/node_modules/puppeteer-core/src/bidi/Frame.ts, tests/node_modules/puppeteer-core/src/bidi/Input.ts, tests/node_modules/puppeteer-core/src/bidi/Page.ts, tests/node_modules/puppeteer-core/src/common/USKeyboardLayout.ts, tests/node_modules/puppeteer-core/src/common/Device.ts, tests/node_modules/puppeteer-core/src/api/HTTPRequest.ts, tests/node_modules/puppeteer-core/src/api/Frame.ts, tests/node_modules/puppeteer-core/src/api/Input.ts, tests/node_modules/puppeteer-core/src/api/locators/locators.ts, tests/node_modules/puppeteer-core/src/api/Browser.ts, tests/node_modules/puppeteer-core/src/api/Page.ts, tests/node_modules/puppeteer-core/src/api/ElementHandle.ts, tests/node_modules/puppeteer-core/src/node/BrowserLauncher.ts, tests/node_modules/@puppeteer/browsers/src/install.ts, tests/node_modules/@puppeteer/browsers/src/CLI.ts, tests/node_modules/@puppeteer/browsers/src/launch.ts, lib/slack-integration/node_modules/@types/lodash/fp.d.ts, lib/slack-integration/node_modules/@types/lodash/common/function.d.ts, lib/slack-integration/node_modules/@types/lodash/common/array.d.ts, lib/slack-integration/node_modules/@types/lodash/common/string.d.ts, lib/slack-integration/node_modules/@types/lodash/common/object.d.ts, lib/slack-integration/node_modules/@types/lodash/common/lang.d.ts, lib/slack-integration/node_modules/@types/lodash/common/collection.d.ts, lib/slack-integration/node_modules/@types/lodash/common/util.d.ts, lib/slack-integration/node_modules/@types/express-serve-static-core/index.d.ts, lib/slack-integration/node_modules/@types/yargs/index.d.ts, lib/slack-integration/node_modules/@types/node/globals.d.ts, lib/slack-integration/node_modules/@types/node/tls.d.ts, lib/slack-integration/node_modules/@types/node/crypto.d.ts, lib/slack-integration/node_modules/@types/node/http2.d.ts, lib/slack-integration/node_modules/@types/node/inspector.d.ts, lib/slack-integration/node_modules/@types/node/fs.d.ts, lib/slack-integration/node_modules/@types/node/child_process.d.ts, lib/slack-integration/node_modules/fecha/src/fecha.ts, lib/slack-integration/node_modules/axios/index.d.ts, lib/slack-integration/node_modules/@slack/types/dist/block-kit/block-elements.d.ts, lib/slack-integration/node_modules/@slack/logger/node_modules/@types/node/diagnostics_channel.d.ts, lib/slack-integration/node_modules/@slack/logger/node_modules/@types/node/tls.d.ts, lib/slack-integration/node_modules/@slack/logger/node_modules/@types/node/readline.d.ts, lib/slack-integration/node_modules/@slack/logger/node_modules/@types/node/crypto.d.ts, lib/slack-integration/node_modules/@slack/logger/node_modules/@types/node/events.d.ts, lib/slack-integration/node_modules/@slack/logger/node_modules/@types/node/buffer.d.ts, lib/slack-integration/node_modules/@slack/logger/node_modules/@types/node/worker_threads.d.ts, lib/slack-integration/node_modules/@slack/logger/node_modules/@types/node/async_hooks.d.ts, lib/slack-integration/node_modules/@slack/logger/node_modules/@types/node/stream/web.d.ts, lib/slack-integration/node_modules/@slack/logger/node_modules/@types/node/dns.d.ts, lib/slack-integration/node_modules/@slack/logger/node_modules/@types/node/vm.d.ts, lib/slack-integration/node_modules/@slack/logger/node_modules/@types/node/test.d.ts, lib/slack-integration/node_modules/@slack/logger/node_modules/@types/node/http.d.ts, lib/slack-integration/node_modules/@slack/logger/node_modules/@types/node/http2.d.ts, lib/slack-integration/node_modules/@slack/logger/node_modules/@types/node/stream.d.ts, lib/slack-integration/node_modules/@slack/logger/node_modules/@types/node/inspector.d.ts, lib/slack-integration/node_modules/@slack/logger/node_modules/@types/node/v8.d.ts, lib/slack-integration/node_modules/@slack/logger/node_modules/@types/node/perf_hooks.d.ts, lib/slack-integration/node_modules/@slack/logger/node_modules/@types/node/url.d.ts, lib/slack-integration/node_modules/@slack/logger/node_modules/@types/node/cluster.d.ts, lib/slack-integration/node_modules/@slack/logger/node_modules/@types/node/https.d.ts, lib/slack-integration/node_modules/@slack/logger/node_modules/@types/node/assert.d.ts, lib/slack-integration/node_modules/@slack/logger/node_modules/@types/node/fs.d.ts, lib/slack-integration/node_modules/@slack/logger/node_modules/@types/node/dgram.d.ts, lib/slack-integration/node_modules/@slack/logger/node_modules/@types/node/child_process.d.ts, lib/slack-integration/node_modules/@slack/logger/node_modules/@types/node/zlib.d.ts, lib/slack-integration/node_modules/@slack/logger/node_modules/@types/node/module.d.ts, lib/slack-integration/node_modules/@slack/logger/node_modules/@types/node/sqlite.d.ts, lib/slack-integration/node_modules/@slack/logger/node_modules/@types/node/process.d.ts, lib/slack-integration/node_modules/@slack/logger/node_modules/@types/node/util.d.ts, lib/slack-integration/node_modules/@slack/logger/node_modules/@types/node/dns/promises.d.ts, lib/slack-integration/node_modules/@slack/logger/node_modules/@types/node/fs/promises.d.ts, lib/slack-integration/node_modules/@slack/logger/node_modules/@types/node/net.d.ts, lib/slack-integration/node_modules/@slack/web-api/dist/types/response/SearchAllResponse.d.ts, lib/slack-integration/node_modules/@slack/web-api/dist/types/response/FilesSharedPublicURLResponse.d.ts, lib/slack-integration/node_modules/@slack/web-api/dist/types/response/FilesInfoResponse.d.ts, lib/slack-integration/node_modules/@slack/web-api/dist/types/response/PinsListResponse.d.ts, lib/slack-integration/node_modules/@slack/web-api/dist/types/response/FilesRemoteInfoResponse.d.ts, lib/slack-integration/node_modules/@slack/web-api/dist/types/response/FilesRemoteShareResponse.d.ts, lib/slack-integration/node_modules/@slack/web-api/dist/types/response/FilesListResponse.d.ts, lib/slack-integration/node_modules/@slack/web-api/dist/types/response/FilesRemoteListResponse.d.ts, lib/slack-integration/node_modules/@slack/web-api/dist/types/response/ReactionsListResponse.d.ts, lib/slack-integration/node_modules/@slack/web-api/dist/types/response/ReactionsGetResponse.d.ts, lib/slack-integration/node_modules/@slack/web-api/dist/types/response/FilesRevokePublicURLResponse.d.ts, lib/slack-integration/node_modules/@slack/web-api/dist/types/response/SearchMessagesResponse.d.ts, lib/slack-integration/node_modules/@slack/web-api/dist/types/response/FilesRemoteAddResponse.d.ts, lib/slack-integration/node_modules/@slack/web-api/dist/types/response/SearchFilesResponse.d.ts, lib/slack-integration/node_modules/@slack/web-api/dist/types/response/ChatPostMessageResponse.d.ts, lib/slack-integration/node_modules/@slack/web-api/dist/types/response/ChatScheduleMessageResponse.d.ts, lib/slack-integration/node_modules/@slack/web-api/dist/types/response/ConversationsRepliesResponse.d.ts, lib/slack-integration/node_modules/@slack/web-api/dist/types/response/ConversationsOpenResponse.d.ts, lib/slack-integration/node_modules/@slack/web-api/dist/types/response/ChatUpdateResponse.d.ts, lib/slack-integration/node_modules/@slack/web-api/dist/types/response/RtmStartResponse.d.ts, lib/slack-integration/node_modules/@slack/web-api/dist/types/response/ConversationsHistoryResponse.d.ts, lib/slack-integration/node_modules/@slack/web-api/dist/types/response/StarsListResponse.d.ts, lib/slack-integration/node_modules/@slack/web-api/dist/types/response/FilesRemoteUpdateResponse.d.ts, lib/slack-integration/node_modules/@slack/web-api/dist/types/response/FilesUploadResponse.d.ts, lib/slack-integration/node_modules/@slack/web-api/dist/methods.d.ts, lib/slack-integration/node_modules/@slack/web-api/node_modules/@types/node/diagnostics_channel.d.ts, lib/slack-integration/node_modules/@slack/web-api/node_modules/@types/node/tls.d.ts, lib/slack-integration/node_modules/@slack/web-api/node_modules/@types/node/readline.d.ts, lib/slack-integration/node_modules/@slack/web-api/node_modules/@types/node/crypto.d.ts, lib/slack-integration/node_modules/@slack/web-api/node_modules/@types/node/events.d.ts, lib/slack-integration/node_modules/@slack/web-api/node_modules/@types/node/buffer.d.ts, lib/slack-integration/node_modules/@slack/web-api/node_modules/@types/node/worker_threads.d.ts, lib/slack-integration/node_modules/@slack/web-api/node_modules/@types/node/async_hooks.d.ts, lib/slack-integration/node_modules/@slack/web-api/node_modules/@types/node/stream/web.d.ts, lib/slack-integration/node_modules/@slack/web-api/node_modules/@types/node/dns.d.ts, lib/slack-integration/node_modules/@slack/web-api/node_modules/@types/node/vm.d.ts, lib/slack-integration/node_modules/@slack/web-api/node_modules/@types/node/test.d.ts, lib/slack-integration/node_modules/@slack/web-api/node_modules/@types/node/http.d.ts, lib/slack-integration/node_modules/@slack/web-api/node_modules/@types/node/http2.d.ts, lib/slack-integration/node_modules/@slack/web-api/node_modules/@types/node/stream.d.ts, lib/slack-integration/node_modules/@slack/web-api/node_modules/@types/node/inspector.d.ts, lib/slack-integration/node_modules/@slack/web-api/node_modules/@types/node/v8.d.ts, lib/slack-integration/node_modules/@slack/web-api/node_modules/@types/node/perf_hooks.d.ts, lib/slack-integration/node_modules/@slack/web-api/node_modules/@types/node/url.d.ts, lib/slack-integration/node_modules/@slack/web-api/node_modules/@types/node/cluster.d.ts, lib/slack-integration/node_modules/@slack/web-api/node_modules/@types/node/https.d.ts, lib/slack-integration/node_modules/@slack/web-api/node_modules/@types/node/assert.d.ts, lib/slack-integration/node_modules/@slack/web-api/node_modules/@types/node/fs.d.ts, lib/slack-integration/node_modules/@slack/web-api/node_modules/@types/node/dgram.d.ts, lib/slack-integration/node_modules/@slack/web-api/node_modules/@types/node/child_process.d.ts, lib/slack-integration/node_modules/@slack/web-api/node_modules/@types/node/zlib.d.ts, lib/slack-integration/node_modules/@slack/web-api/node_modules/@types/node/module.d.ts, lib/slack-integration/node_modules/@slack/web-api/node_modules/@types/node/sqlite.d.ts, lib/slack-integration/node_modules/@slack/web-api/node_modules/@types/node/process.d.ts, lib/slack-integration/node_modules/@slack/web-api/node_modules/@types/node/util.d.ts, lib/slack-integration/node_modules/@slack/web-api/node_modules/@types/node/dns/promises.d.ts, lib/slack-integration/node_modules/@slack/web-api/node_modules/@types/node/fs/promises.d.ts, lib/slack-integration/node_modules/@slack/web-api/node_modules/@types/node/net.d.ts, crypto-campaign-unified/node_modules/@types/chai/index.d.ts, crypto-campaign-unified/node_modules/@types/estree/index.d.ts, crypto-campaign-unified/node_modules/@types/node/diagnostics_channel.d.ts, crypto-campaign-unified/node_modules/@types/node/tls.d.ts, crypto-campaign-unified/node_modules/@types/node/readline.d.ts, crypto-campaign-unified/node_modules/@types/node/crypto.d.ts, crypto-campaign-unified/node_modules/@types/node/events.d.ts, crypto-campaign-unified/node_modules/@types/node/buffer.d.ts, crypto-campaign-unified/node_modules/@types/node/worker_threads.d.ts, crypto-campaign-unified/node_modules/@types/node/async_hooks.d.ts, crypto-campaign-unified/node_modules/@types/node/stream/web.d.ts, crypto-campaign-unified/node_modules/@types/node/dns.d.ts, crypto-campaign-unified/node_modules/@types/node/vm.d.ts, crypto-campaign-unified/node_modules/@types/node/test.d.ts, crypto-campaign-unified/node_modules/@types/node/http.d.ts, crypto-campaign-unified/node_modules/@types/node/http2.d.ts, crypto-campaign-unified/node_modules/@types/node/stream.d.ts, crypto-campaign-unified/node_modules/@types/node/inspector.d.ts, crypto-campaign-unified/node_modules/@types/node/v8.d.ts, crypto-campaign-unified/node_modules/@types/node/perf_hooks.d.ts, crypto-campaign-unified/node_modules/@types/node/url.d.ts, crypto-campaign-unified/node_modules/@types/node/cluster.d.ts, crypto-campaign-unified/node_modules/@types/node/https.d.ts, crypto-campaign-unified/node_modules/@types/node/assert.d.ts, crypto-campaign-unified/node_modules/@types/node/fs.d.ts, crypto-campaign-unified/node_modules/@types/node/dgram.d.ts, crypto-campaign-unified/node_modules/@types/node/child_process.d.ts, crypto-campaign-unified/node_modules/@types/node/zlib.d.ts, crypto-campaign-unified/node_modules/@types/node/module.d.ts, crypto-campaign-unified/node_modules/@types/node/process.d.ts, crypto-campaign-unified/node_modules/@types/node/util.d.ts, crypto-campaign-unified/node_modules/@types/node/fs/promises.d.ts, crypto-campaign-unified/node_modules/@types/node/net.d.ts, crypto-campaign-unified/node_modules/@noble/curves/src/abstract/weierstrass.ts, crypto-campaign-unified/node_modules/@noble/curves/src/abstract/edwards.ts, crypto-campaign-unified/node_modules/@noble/curves/src/bls12-381.ts, crypto-campaign-unified/node_modules/happy-dom/lib/css/declaration/property-manager/CSSStyleDeclarationPropertySetParser.d.ts, crypto-campaign-unified/node_modules/happy-dom/lib/css/declaration/CSSStyleDeclaration.d.ts, crypto-campaign-unified/node_modules/happy-dom/lib/nodes/element/Element.d.ts, crypto-campaign-unified/node_modules/happy-dom/lib/nodes/document/Document.d.ts, crypto-campaign-unified/node_modules/happy-dom/lib/nodes/html-input-element/HTMLInputElement.d.ts, total, crypto-campaign-unified/node_modules/happy-dom/lib/window/BrowserWindow.d.ts, crypto-campaign-unified/node_modules/happy-dom/src/svg/SVGTransformList.ts, crypto-campaign-unified/node_modules/happy-dom/src/svg/SVGNumberList.ts, crypto-campaign-unified/node_modules/happy-dom/src/svg/SVGPointList.ts, crypto-campaign-unified/node_modules/happy-dom/src/css/declaration/property-manager/CSSStyleDeclarationPropertyManager.ts, crypto-campaign-unified/node_modules/happy-dom/src/css/declaration/property-manager/CSSStyleDeclarationPropertySetParser.ts, crypto-campaign-unified/node_modules/happy-dom/src/css/declaration/property-manager/CSSStyleDeclarationPropertyGetParser.ts, crypto-campaign-unified/node_modules/happy-dom/src/css/declaration/CSSStyleDeclaration.ts, crypto-campaign-unified/node_modules/happy-dom/src/config/HTMLElementConfig.ts, crypto-campaign-unified/node_modules/happy-dom/src/nodes/html-element/HTMLElement.ts, crypto-campaign-unified/node_modules/happy-dom/src/nodes/html-form-element/HTMLFormElement.ts, crypto-campaign-unified/node_modules/happy-dom/src/nodes/svg-element/SVGElement.ts, crypto-campaign-unified/node_modules/happy-dom/src/nodes/html-text-area-element/HTMLTextAreaElement.ts, crypto-campaign-unified/node_modules/happy-dom/src/nodes/element/Element.ts, crypto-campaign-unified/node_modules/happy-dom/src/nodes/document/Document.ts, crypto-campaign-unified/node_modules/happy-dom/src/nodes/html-input-element/HTMLInputElement.ts, crypto-campaign-unified/node_modules/happy-dom/src/nodes/html-select-element/HTMLSelectElement.ts, crypto-campaign-unified/node_modules/happy-dom/src/nodes/node/Node.ts, crypto-campaign-unified/node_modules/happy-dom/src/nodes/html-script-element/HTMLScriptElement.ts, crypto-campaign-unified/node_modules/happy-dom/src/nodes/svg-svg-element/SVGSVGElement.ts, crypto-campaign-unified/node_modules/happy-dom/src/nodes/html-media-element/HTMLMediaElement.ts, crypto-campaign-unified/node_modules/happy-dom/src/module/ECMAScriptModuleCompiler.ts, crypto-campaign-unified/node_modules/happy-dom/src/xml-http-request/XMLHttpRequest.ts, crypto-campaign-unified/node_modules/happy-dom/src/fetch/SyncFetch.ts, crypto-campaign-unified/node_modules/happy-dom/src/fetch/Fetch.ts, crypto-campaign-unified/node_modules/happy-dom/src/xml-parser/XMLParser.ts, crypto-campaign-unified/node_modules/happy-dom/src/window/BrowserWindow.ts, crypto-campaign-unified/node_modules/happy-dom/src/html-parser/HTMLParser.ts, crypto-campaign-unified/node_modules/happy-dom/src/dom/dom-matrix/DOMMatrixReadOnly.ts, crypto-campaign-unified/node_modules/happy-dom/src/selection/Selection.ts, crypto-campaign-unified/node_modules/happy-dom/src/range/Range.ts, crypto-campaign-unified/node_modules/happy-dom/src/query-selector/QuerySelector.ts, crypto-campaign-unified/node_modules/happy-dom/cjs/css/declaration/property-manager/CSSStyleDeclarationPropertySetParser.d.ts, crypto-campaign-unified/node_modules/happy-dom/cjs/css/declaration/CSSStyleDeclaration.d.ts, crypto-campaign-unified/node_modules/happy-dom/cjs/nodes/element/Element.d.ts, crypto-campaign-unified/node_modules/happy-dom/cjs/nodes/document/Document.d.ts, crypto-campaign-unified/node_modules/happy-dom/cjs/nodes/html-input-element/HTMLInputElement.d.ts, crypto-campaign-unified/node_modules/happy-dom/cjs/window/BrowserWindow.d.ts, crypto-campaign-unified/node_modules/lru-cache/dist/esm/index.d.ts, crypto-campaign-unified/node_modules/lru-cache/dist/commonjs/index.d.ts, crypto-campaign-unified/node_modules/ethers/lib.commonjs/providers/provider.d.ts, crypto-campaign-unified/node_modules/ethers/lib.commonjs/utils/errors.d.ts, crypto-campaign-unified/node_modules/ethers/lib.commonjs/abi/typed.d.ts, crypto-campaign-unified/node_modules/ethers/src.ts/transaction/transaction.ts, crypto-campaign-unified/node_modules/ethers/src.ts/contract/contract.ts, crypto-campaign-unified/node_modules/ethers/src.ts/hash/typed-data.ts, crypto-campaign-unified/node_modules/ethers/src.ts/providers/provider-etherscan.ts, crypto-campaign-unified/node_modules/ethers/src.ts/providers/abstract-provider.ts, crypto-campaign-unified/node_modules/ethers/src.ts/providers/provider-fallback.ts, crypto-campaign-unified/node_modules/ethers/src.ts/providers/ens-resolver.ts, crypto-campaign-unified/node_modules/ethers/src.ts/providers/provider-jsonrpc.ts, crypto-campaign-unified/node_modules/ethers/src.ts/providers/provider.ts, crypto-campaign-unified/node_modules/ethers/src.ts/utils/errors.ts, crypto-campaign-unified/node_modules/ethers/src.ts/utils/fixednumber.ts, crypto-campaign-unified/node_modules/ethers/src.ts/utils/fetch.ts, crypto-campaign-unified/node_modules/ethers/src.ts/abi/coders/abstract-coder.ts, crypto-campaign-unified/node_modules/ethers/src.ts/abi/fragments.ts, crypto-campaign-unified/node_modules/ethers/src.ts/abi/interface.ts, crypto-campaign-unified/node_modules/ethers/src.ts/abi/typed.ts, crypto-campaign-unified/node_modules/ethers/src.ts/wallet/hdwallet.ts, crypto-campaign-unified/node_modules/ethers/node_modules/@types/node/diagnostics_channel.d.ts, crypto-campaign-unified/node_modules/ethers/node_modules/@types/node/globals.d.ts, crypto-campaign-unified/node_modules/ethers/node_modules/@types/node/tls.d.ts, crypto-campaign-unified/node_modules/ethers/node_modules/@types/node/readline.d.ts, crypto-campaign-unified/node_modules/ethers/node_modules/@types/node/crypto.d.ts, crypto-campaign-unified/node_modules/ethers/node_modules/@types/node/events.d.ts, crypto-campaign-unified/node_modules/ethers/node_modules/@types/node/buffer.d.ts, crypto-campaign-unified/node_modules/ethers/node_modules/@types/node/worker_threads.d.ts, crypto-campaign-unified/node_modules/ethers/node_modules/@types/node/async_hooks.d.ts, crypto-campaign-unified/node_modules/ethers/node_modules/@types/node/stream/web.d.ts, crypto-campaign-unified/node_modules/ethers/node_modules/@types/node/dns.d.ts, crypto-campaign-unified/node_modules/ethers/node_modules/@types/node/vm.d.ts, crypto-campaign-unified/node_modules/ethers/node_modules/@types/node/test.d.ts, crypto-campaign-unified/node_modules/ethers/node_modules/@types/node/http.d.ts, crypto-campaign-unified/node_modules/ethers/node_modules/@types/node/http2.d.ts, crypto-campaign-unified/node_modules/ethers/node_modules/@types/node/stream.d.ts, crypto-campaign-unified/node_modules/ethers/node_modules/@types/node/inspector.d.ts, crypto-campaign-unified/node_modules/ethers/node_modules/@types/node/v8.d.ts, crypto-campaign-unified/node_modules/ethers/node_modules/@types/node/perf_hooks.d.ts, crypto-campaign-unified/node_modules/ethers/node_modules/@types/node/url.d.ts, crypto-campaign-unified/node_modules/ethers/node_modules/@types/node/cluster.d.ts, crypto-campaign-unified/node_modules/ethers/node_modules/@types/node/https.d.ts, crypto-campaign-unified/node_modules/ethers/node_modules/@types/node/assert.d.ts, crypto-campaign-unified/node_modules/ethers/node_modules/@types/node/fs.d.ts, crypto-campaign-unified/node_modules/ethers/node_modules/@types/node/dgram.d.ts, crypto-campaign-unified/node_modules/ethers/node_modules/@types/node/child_process.d.ts, crypto-campaign-unified/node_modules/ethers/node_modules/@types/node/zlib.d.ts, crypto-campaign-unified/node_modules/ethers/node_modules/@types/node/process.d.ts, crypto-campaign-unified/node_modules/ethers/node_modules/@types/node/util.d.ts, crypto-campaign-unified/node_modules/ethers/node_modules/@types/node/fs/promises.d.ts, crypto-campaign-unified/node_modules/ethers/node_modules/@types/node/net.d.ts, crypto-campaign-unified/node_modules/ethers/lib.esm/providers/provider.d.ts, crypto-campaign-unified/node_modules/ethers/lib.esm/utils/errors.d.ts, crypto-campaign-unified/node_modules/ethers/lib.esm/abi/typed.d.ts, crypto-campaign-unified/node_modules/type-fest/source/package-json.d.ts, crypto-campaign-unified/node_modules/type-fest/source/tsconfig-json.d.ts, crypto-campaign-unified/node_modules/vitest/dist/chunks/reporters.d.BFLkQcL6.d.ts, crypto-campaign-unified/node_modules/vitest/dist/index.d.ts, crypto-campaign-unified/node_modules/postcss/lib/node.d.ts, crypto-campaign-unified/node_modules/@asamuzakjp/css-color/dist/esm/js/color.d.ts, crypto-campaign-unified/node_modules/@asamuzakjp/css-color/src/js/css-calc.ts, crypto-campaign-unified/node_modules/@asamuzakjp/css-color/src/js/color.ts, crypto-campaign-unified/node_modules/@asamuzakjp/css-color/src/js/relative-color.ts, crypto-campaign-unified/node_modules/@csstools/css-parser-algorithms/dist/index.d.ts, crypto-campaign-unified/node_modules/@csstools/css-tokenizer/dist/index.d.ts, crypto-campaign-unified/node_modules/@mswjs/interceptors/src/interceptors/ClientRequest/MockHttpSocket.ts, crypto-campaign-unified/node_modules/@mswjs/interceptors/src/interceptors/XMLHttpRequest/XMLHttpRequestController.ts, crypto-campaign-unified/node_modules/saxes/saxes.d.ts, crypto-campaign-unified/node_modules/vite/dist/node/index.d.ts, crypto-campaign-unified/node_modules/graphql/language/parser.d.ts, crypto-campaign-unified/node_modules/graphql/language/ast.d.ts, crypto-campaign-unified/node_modules/graphql/type/definition.d.ts, crypto-campaign-unified/node_modules/@babel/types/lib/index-legacy.d.ts, crypto-campaign-unified/node_modules/@babel/types/lib/index.d.ts, crypto-campaign-unified/node_modules/msw/src/core/handlers/GraphQLHandler.test.ts, crypto-campaign-unified/node_modules/rollup/dist/rollup.d.ts, crypto-campaign-unified/node_modules/@supabase/auth-js/dist/module/GoTrueClient.d.ts, crypto-campaign-unified/node_modules/@supabase/auth-js/dist/module/lib/types.d.ts, crypto-campaign-unified/node_modules/@supabase/auth-js/dist/main/GoTrueClient.d.ts, crypto-campaign-unified/node_modules/@supabase/auth-js/dist/main/lib/types.d.ts, crypto-campaign-unified/node_modules/@supabase/auth-js/src/lib/types.ts, crypto-campaign-unified/node_modules/@supabase/auth-js/src/GoTrueClient.ts, crypto-campaign-unified/node_modules/@supabase/realtime-js/src/RealtimeClient.ts, crypto-campaign-unified/node_modules/@supabase/realtime-js/src/RealtimeChannel.ts, crypto-campaign-unified/node_modules/@supabase/storage-js/src/packages/StorageFileApi.ts, crypto-campaign-unified/node_modules/@supabase/postgrest-js/src/PostgrestFilterBuilder.ts, crypto-campaign-unified/node_modules/@supabase/postgrest-js/src/select-query-parser/utils.ts, crypto-campaign-unified/node_modules/@supabase/postgrest-js/src/select-query-parser/result.ts, crypto-campaign-unified/node_modules/expect-type/dist/index.d.ts, crypto-campaign-unified/node_modules/ansi-escapes/node_modules/type-fest/source/package-json.d.ts, crypto-campaign-unified/node_modules/ansi-escapes/node_modules/type-fest/source/tsconfig-json.d.ts, crypto-campaign-unified/node_modules/@vitest/runner/dist/tasks.d-CkscK4of.d.ts, crypto-campaign-unified/node_modules/@vitest/mocker/dist/node.d.ts, crypto-campaign-unified/node_modules/@vitest/expect/dist/index.d.ts, crypto-campaign-unified/node_modules/esbuild/lib/main.d.ts, crypto-campaign-unified/node_modules/minipass/dist/esm/index.d.ts, crypto-campaign-unified/node_modules/minipass/dist/commonjs/index.d.ts, crypto-campaign-unified/node_modules/@testing-library/jest-dom/types/matchers.d.ts, crypto-campaign-unified/node_modules/@jridgewell/trace-mapping/src/trace-mapping.ts, crypto-campaign-unified/node_modules/@jridgewell/gen-mapping/src/gen-mapping.ts, crypto-campaign-unified/node_modules/tough-cookie/dist/cookie/cookieJar.d.ts, crypto-campaign-unified/node_modules/entities/src/decode.ts, crypto-campaign-unified/node_modules/path-scurry/dist/esm/index.d.ts, crypto-campaign-unified/node_modules/path-scurry/dist/commonjs/index.d.ts, session-recorder/node_modules/zod/v4/core/schemas.d.ts, session-recorder/node_modules/zod/v4/classic/schemas.d.ts, session-recorder/node_modules/zod/v3/types.d.ts, session-recorder/node_modules/zod/src/v4/core/schemas.ts, session-recorder/node_modules/zod/src/v4/core/api.ts, session-recorder/node_modules/zod/src/v4/core/to-json-schema.ts, session-recorder/node_modules/zod/src/v4/core/checks.ts, session-recorder/node_modules/zod/src/v4/core/util.ts, session-recorder/node_modules/zod/src/v4/mini/tests/index.test.ts, session-recorder/node_modules/zod/src/v4/mini/schemas.ts, session-recorder/node_modules/zod/src/v4/classic/tests/template-literal.test.ts, session-recorder/node_modules/zod/src/v4/classic/tests/index.test.ts, session-recorder/node_modules/zod/src/v4/classic/tests/error-utils.test.ts, session-recorder/node_modules/zod/src/v4/classic/tests/string.test.ts, session-recorder/node_modules/zod/src/v4/classic/tests/discriminated-unions.test.ts, session-recorder/node_modules/zod/src/v4/classic/tests/to-json-schema.test.ts, session-recorder/node_modules/zod/src/v4/classic/tests/refine.test.ts, session-recorder/node_modules/zod/src/v4/classic/tests/error.test.ts, session-recorder/node_modules/zod/src/v4/classic/tests/object.test.ts, session-recorder/node_modules/zod/src/v4/classic/schemas.ts, session-recorder/node_modules/zod/src/v3/tests/string.test.ts, session-recorder/node_modules/zod/src/v3/tests/error.test.ts, session-recorder/node_modules/zod/src/v3/types.ts, session-recorder/node_modules/@types/node/diagnostics_channel.d.ts, session-recorder/node_modules/@types/node/tls.d.ts, session-recorder/node_modules/@types/node/readline.d.ts, session-recorder/node_modules/@types/node/crypto.d.ts, session-recorder/node_modules/@types/node/events.d.ts, session-recorder/node_modules/@types/node/buffer.d.ts, session-recorder/node_modules/@types/node/worker_threads.d.ts, session-recorder/node_modules/@types/node/async_hooks.d.ts, session-recorder/node_modules/@types/node/stream/web.d.ts, session-recorder/node_modules/@types/node/dns.d.ts, session-recorder/node_modules/@types/node/vm.d.ts, session-recorder/node_modules/@types/node/test.d.ts, session-recorder/node_modules/@types/node/http.d.ts, session-recorder/node_modules/@types/node/http2.d.ts, session-recorder/node_modules/@types/node/stream.d.ts, session-recorder/node_modules/@types/node/inspector.d.ts, session-recorder/node_modules/@types/node/v8.d.ts, session-recorder/node_modules/@types/node/perf_hooks.d.ts, session-recorder/node_modules/@types/node/url.d.ts, session-recorder/node_modules/@types/node/cluster.d.ts, session-recorder/node_modules/@types/node/https.d.ts, session-recorder/node_modules/@types/node/assert.d.ts, session-recorder/node_modules/@types/node/fs.d.ts, session-recorder/node_modules/@types/node/dgram.d.ts, session-recorder/node_modules/@types/node/child_process.d.ts, session-recorder/node_modules/@types/node/zlib.d.ts, session-recorder/node_modules/@types/node/module.d.ts, session-recorder/node_modules/@types/node/sqlite.d.ts, session-recorder/node_modules/@types/node/process.d.ts, session-recorder/node_modules/@types/node/util.d.ts, session-recorder/node_modules/@types/node/dns/promises.d.ts, session-recorder/node_modules/@types/node/fs/promises.d.ts, session-recorder/node_modules/@types/node/net.d.ts, session-recorder/node_modules/proxy-agent/node_modules/lru-cache/index.d.ts, session-recorder/node_modules/type-fest/source/package-json.d.ts, session-recorder/node_modules/type-fest/source/tsconfig-json.d.ts, session-recorder/node_modules/ip-address/src/ipv6.ts, session-recorder/node_modules/moment/moment.d.ts, session-recorder/node_modules/moment/ts3.1-typings/moment.d.ts, session-recorder/node_modules/puppeteer/lib/types.d.ts, session-recorder/node_modules/ast-types/gen/builders.d.ts, session-recorder/node_modules/ast-types/gen/namedTypes.d.ts, session-recorder/node_modules/smart-buffer/typings/smartbuffer.d.ts, session-recorder/node_modules/devtools-protocol/types/protocol-mapping.d.ts, session-recorder/node_modules/devtools-protocol/types/protocol-tests-proxy-api.d.ts, session-recorder/node_modules/devtools-protocol/types/protocol.d.ts, session-recorder/node_modules/devtools-protocol/types/protocol-proxy-api.d.ts, session-recorder/node_modules/bare-fs/index.d.ts, session-recorder/node_modules/fecha/src/fecha.ts, session-recorder/node_modules/chromium-bidi/lib/esm/protocol/generated/webdriver-bidi.d.ts, session-recorder/node_modules/chromium-bidi/lib/esm/protocol-parser/generated/webdriver-bidi.d.ts, session-recorder/node_modules/chromium-bidi/lib/esm/protocol-parser/generated/webdriver-bidi-bluetooth.d.ts, session-recorder/node_modules/chromium-bidi/lib/cjs/protocol/generated/webdriver-bidi.d.ts, session-recorder/node_modules/chromium-bidi/lib/cjs/protocol-parser/generated/webdriver-bidi.d.ts, session-recorder/node_modules/chromium-bidi/lib/cjs/protocol-parser/generated/webdriver-bidi-bluetooth.d.ts, session-recorder/node_modules/@supabase/auth-js/dist/module/GoTrueClient.d.ts, session-recorder/node_modules/@supabase/auth-js/dist/module/lib/types.d.ts, session-recorder/node_modules/@supabase/auth-js/dist/main/GoTrueClient.d.ts, session-recorder/node_modules/@supabase/auth-js/dist/main/lib/types.d.ts, session-recorder/node_modules/@supabase/auth-js/src/lib/types.ts, session-recorder/node_modules/@supabase/auth-js/src/GoTrueClient.ts, session-recorder/node_modules/@supabase/realtime-js/src/RealtimeClient.ts, session-recorder/node_modules/@supabase/realtime-js/src/RealtimeChannel.ts, session-recorder/node_modules/@supabase/storage-js/src/packages/StorageFileApi.ts, session-recorder/node_modules/@supabase/postgrest-js/src/PostgrestFilterBuilder.ts, session-recorder/node_modules/@supabase/postgrest-js/src/select-query-parser/utils.ts, session-recorder/node_modules/@supabase/postgrest-js/src/select-query-parser/result.ts, total, session-recorder/node_modules/rxjs/src/internal/testing/TestScheduler.ts, session-recorder/node_modules/rxjs/src/internal/ajax/ajax.ts, session-recorder/node_modules/puppeteer-core/lib/esm/puppeteer/api/ElementHandle.d.ts, session-recorder/node_modules/puppeteer-core/lib/esm/puppeteer/api/Frame.d.ts, session-recorder/node_modules/puppeteer-core/lib/esm/puppeteer/api/Page.d.ts, session-recorder/node_modules/puppeteer-core/lib/types.d.ts, session-recorder/node_modules/puppeteer-core/lib/es5-iife/puppeteer-core-browser.d.ts, session-recorder/node_modules/puppeteer-core/lib/cjs/puppeteer/api/ElementHandle.d.ts, session-recorder/node_modules/puppeteer-core/lib/cjs/puppeteer/api/Frame.d.ts, session-recorder/node_modules/puppeteer-core/lib/cjs/puppeteer/api/Page.d.ts, session-recorder/node_modules/puppeteer-core/src/cdp/EmulationManager.ts, session-recorder/node_modules/puppeteer-core/src/cdp/ExecutionContext.ts, session-recorder/node_modules/puppeteer-core/src/cdp/FrameManager.ts, session-recorder/node_modules/puppeteer-core/src/cdp/Accessibility.ts, session-recorder/node_modules/puppeteer-core/src/cdp/NetworkManager.ts, session-recorder/node_modules/puppeteer-core/src/cdp/Input.ts, session-recorder/node_modules/puppeteer-core/src/cdp/Page.ts, session-recorder/node_modules/puppeteer-core/src/cdp/Coverage.ts, session-recorder/node_modules/puppeteer-core/src/bidi/core/BrowsingContext.ts, session-recorder/node_modules/puppeteer-core/src/bidi/Frame.ts, session-recorder/node_modules/puppeteer-core/src/bidi/Input.ts, session-recorder/node_modules/puppeteer-core/src/bidi/Page.ts, session-recorder/node_modules/puppeteer-core/src/common/USKeyboardLayout.ts, session-recorder/node_modules/puppeteer-core/src/common/Device.ts, session-recorder/node_modules/puppeteer-core/src/api/HTTPRequest.ts, session-recorder/node_modules/puppeteer-core/src/api/Frame.ts, session-recorder/node_modules/puppeteer-core/src/api/Input.ts, session-recorder/node_modules/puppeteer-core/src/api/locators/locators.ts, session-recorder/node_modules/puppeteer-core/src/api/Browser.ts, session-recorder/node_modules/puppeteer-core/src/api/Page.ts, session-recorder/node_modules/puppeteer-core/src/api/ElementHandle.ts, session-recorder/node_modules/puppeteer-core/src/node/BrowserLauncher.ts, session-recorder/node_modules/@puppeteer/browsers/src/install.ts, session-recorder/node_modules/@puppeteer/browsers/src/CLI.ts, session-recorder/node_modules/@puppeteer/browsers/src/launch.ts, session-recorder/node_modules/simple-git/dist/typings/response.d.ts, session-recorder/node_modules/simple-git/dist/typings/simple-git.d.ts, total\")\n\n// Refactor with multiple agents\nTask(\"system-architect\", \"Design modular structure\")\nTask(\"coder\", \"Implement refactoring\")\nTask(\"tester\", \"Ensure behavior unchanged\")",
      "timeEstimate": "45 minutes",
      "priority": "medium",
      "benefit": "Improve maintainability"
    },
    {
      "type": "refactor",
      "project": "pachacuti-session-recorder",
      "title": "Refactor 128 complex files",
      "description": "Break down files over 500 lines",
      "implementation": "\n// Analyze complexity\nTask(\"code-analyzer\", \"Analyze node_modules/zod/v4/core/schemas.d.ts, node_modules/zod/v4/classic/schemas.d.ts, node_modules/zod/v3/types.d.ts, node_modules/zod/src/v4/core/schemas.ts, node_modules/zod/src/v4/core/api.ts, node_modules/zod/src/v4/core/to-json-schema.ts, node_modules/zod/src/v4/core/checks.ts, node_modules/zod/src/v4/core/util.ts, node_modules/zod/src/v4/mini/tests/index.test.ts, node_modules/zod/src/v4/mini/schemas.ts, node_modules/zod/src/v4/classic/tests/template-literal.test.ts, node_modules/zod/src/v4/classic/tests/index.test.ts, node_modules/zod/src/v4/classic/tests/error-utils.test.ts, node_modules/zod/src/v4/classic/tests/string.test.ts, node_modules/zod/src/v4/classic/tests/discriminated-unions.test.ts, node_modules/zod/src/v4/classic/tests/to-json-schema.test.ts, node_modules/zod/src/v4/classic/tests/refine.test.ts, node_modules/zod/src/v4/classic/tests/error.test.ts, node_modules/zod/src/v4/classic/tests/object.test.ts, node_modules/zod/src/v4/classic/schemas.ts, node_modules/zod/src/v3/tests/string.test.ts, node_modules/zod/src/v3/tests/error.test.ts, node_modules/zod/src/v3/types.ts, node_modules/@types/node/diagnostics_channel.d.ts, node_modules/@types/node/tls.d.ts, node_modules/@types/node/readline.d.ts, node_modules/@types/node/crypto.d.ts, node_modules/@types/node/events.d.ts, node_modules/@types/node/buffer.d.ts, node_modules/@types/node/worker_threads.d.ts, node_modules/@types/node/async_hooks.d.ts, node_modules/@types/node/stream/web.d.ts, node_modules/@types/node/dns.d.ts, node_modules/@types/node/vm.d.ts, node_modules/@types/node/test.d.ts, node_modules/@types/node/http.d.ts, node_modules/@types/node/http2.d.ts, node_modules/@types/node/stream.d.ts, node_modules/@types/node/inspector.d.ts, node_modules/@types/node/v8.d.ts, node_modules/@types/node/perf_hooks.d.ts, node_modules/@types/node/url.d.ts, node_modules/@types/node/cluster.d.ts, node_modules/@types/node/https.d.ts, node_modules/@types/node/assert.d.ts, node_modules/@types/node/fs.d.ts, node_modules/@types/node/dgram.d.ts, node_modules/@types/node/child_process.d.ts, node_modules/@types/node/zlib.d.ts, node_modules/@types/node/module.d.ts, node_modules/@types/node/sqlite.d.ts, node_modules/@types/node/process.d.ts, node_modules/@types/node/util.d.ts, node_modules/@types/node/dns/promises.d.ts, node_modules/@types/node/fs/promises.d.ts, node_modules/@types/node/net.d.ts, node_modules/proxy-agent/node_modules/lru-cache/index.d.ts, node_modules/type-fest/source/package-json.d.ts, node_modules/type-fest/source/tsconfig-json.d.ts, node_modules/ip-address/src/ipv6.ts, node_modules/moment/moment.d.ts, node_modules/moment/ts3.1-typings/moment.d.ts, node_modules/puppeteer/lib/types.d.ts, node_modules/ast-types/gen/builders.d.ts, node_modules/ast-types/gen/namedTypes.d.ts, node_modules/smart-buffer/typings/smartbuffer.d.ts, node_modules/devtools-protocol/types/protocol-mapping.d.ts, node_modules/devtools-protocol/types/protocol-tests-proxy-api.d.ts, node_modules/devtools-protocol/types/protocol.d.ts, node_modules/devtools-protocol/types/protocol-proxy-api.d.ts, node_modules/bare-fs/index.d.ts, node_modules/fecha/src/fecha.ts, node_modules/chromium-bidi/lib/esm/protocol/generated/webdriver-bidi.d.ts, node_modules/chromium-bidi/lib/esm/protocol-parser/generated/webdriver-bidi.d.ts, node_modules/chromium-bidi/lib/esm/protocol-parser/generated/webdriver-bidi-bluetooth.d.ts, node_modules/chromium-bidi/lib/cjs/protocol/generated/webdriver-bidi.d.ts, node_modules/chromium-bidi/lib/cjs/protocol-parser/generated/webdriver-bidi.d.ts, node_modules/chromium-bidi/lib/cjs/protocol-parser/generated/webdriver-bidi-bluetooth.d.ts, node_modules/@supabase/auth-js/dist/module/GoTrueClient.d.ts, node_modules/@supabase/auth-js/dist/module/lib/types.d.ts, node_modules/@supabase/auth-js/dist/main/GoTrueClient.d.ts, node_modules/@supabase/auth-js/dist/main/lib/types.d.ts, node_modules/@supabase/auth-js/src/lib/types.ts, node_modules/@supabase/auth-js/src/GoTrueClient.ts, node_modules/@supabase/realtime-js/src/RealtimeClient.ts, node_modules/@supabase/realtime-js/src/RealtimeChannel.ts, node_modules/@supabase/storage-js/src/packages/StorageFileApi.ts, node_modules/@supabase/postgrest-js/src/PostgrestFilterBuilder.ts, node_modules/@supabase/postgrest-js/src/select-query-parser/utils.ts, node_modules/@supabase/postgrest-js/src/select-query-parser/result.ts, node_modules/rxjs/src/internal/testing/TestScheduler.ts, node_modules/rxjs/src/internal/ajax/ajax.ts, node_modules/puppeteer-core/lib/esm/puppeteer/api/ElementHandle.d.ts, node_modules/puppeteer-core/lib/esm/puppeteer/api/Frame.d.ts, node_modules/puppeteer-core/lib/esm/puppeteer/api/Page.d.ts, node_modules/puppeteer-core/lib/types.d.ts, node_modules/puppeteer-core/lib/es5-iife/puppeteer-core-browser.d.ts, node_modules/puppeteer-core/lib/cjs/puppeteer/api/ElementHandle.d.ts, node_modules/puppeteer-core/lib/cjs/puppeteer/api/Frame.d.ts, node_modules/puppeteer-core/lib/cjs/puppeteer/api/Page.d.ts, node_modules/puppeteer-core/src/cdp/EmulationManager.ts, node_modules/puppeteer-core/src/cdp/ExecutionContext.ts, node_modules/puppeteer-core/src/cdp/FrameManager.ts, node_modules/puppeteer-core/src/cdp/Accessibility.ts, node_modules/puppeteer-core/src/cdp/NetworkManager.ts, node_modules/puppeteer-core/src/cdp/Input.ts, node_modules/puppeteer-core/src/cdp/Page.ts, node_modules/puppeteer-core/src/cdp/Coverage.ts, node_modules/puppeteer-core/src/bidi/core/BrowsingContext.ts, node_modules/puppeteer-core/src/bidi/Frame.ts, node_modules/puppeteer-core/src/bidi/Input.ts, node_modules/puppeteer-core/src/bidi/Page.ts, node_modules/puppeteer-core/src/common/USKeyboardLayout.ts, node_modules/puppeteer-core/src/common/Device.ts, node_modules/puppeteer-core/src/api/HTTPRequest.ts, node_modules/puppeteer-core/src/api/Frame.ts, node_modules/puppeteer-core/src/api/Input.ts, node_modules/puppeteer-core/src/api/locators/locators.ts, node_modules/puppeteer-core/src/api/Browser.ts, node_modules/puppeteer-core/src/api/Page.ts, node_modules/puppeteer-core/src/api/ElementHandle.ts, node_modules/puppeteer-core/src/node/BrowserLauncher.ts, node_modules/@puppeteer/browsers/src/install.ts, node_modules/@puppeteer/browsers/src/CLI.ts, node_modules/@puppeteer/browsers/src/launch.ts, node_modules/simple-git/dist/typings/response.d.ts, node_modules/simple-git/dist/typings/simple-git.d.ts, ../total\")\n\n// Refactor with multiple agents\nTask(\"system-architect\", \"Design modular structure\")\nTask(\"coder\", \"Implement refactoring\")\nTask(\"tester\", \"Ensure behavior unchanged\")",
      "timeEstimate": "45 minutes",
      "priority": "medium",
      "benefit": "Improve maintainability"
    },
    {
      "type": "refactor",
      "project": "pachacuti-shell-viewer-frontend",
      "title": "Refactor 147 complex files",
      "description": "Break down files over 500 lines",
      "implementation": "\n// Analyze complexity\nTask(\"code-analyzer\", \"Analyze node_modules/workbox-strategies/src/StrategyHandler.ts, node_modules/idb/build/entry.d.ts, node_modules/@types/node-forge/index.d.ts, node_modules/@types/d3-shape/index.d.ts, node_modules/@types/express-serve-static-core/index.d.ts, node_modules/@types/d3-array/index.d.ts, node_modules/@types/express/node_modules/@types/express-serve-static-core/index.d.ts, node_modules/@types/d3-scale/index.d.ts, node_modules/@types/prettier/index.d.ts, node_modules/@types/d3-color/index.d.ts, node_modules/@types/d3-time/index.d.ts, node_modules/@types/babel__traverse/index.d.ts, node_modules/@types/yargs/index.d.ts, node_modules/@types/eslint/rules/best-practices.d.ts, node_modules/@types/eslint/rules/stylistic-issues.d.ts, node_modules/@types/eslint/rules/ecmascript-6.d.ts, node_modules/@types/eslint/rules/possible-errors.d.ts, node_modules/@types/eslint/index.d.ts, node_modules/@types/estree/index.d.ts, node_modules/@types/node/diagnostics_channel.d.ts, node_modules/@types/node/tls.d.ts, node_modules/@types/node/readline.d.ts, node_modules/@types/node/crypto.d.ts, node_modules/@types/node/events.d.ts, node_modules/@types/node/buffer.d.ts, node_modules/@types/node/worker_threads.d.ts, node_modules/@types/node/async_hooks.d.ts, node_modules/@types/node/stream/web.d.ts, node_modules/@types/node/dns.d.ts, node_modules/@types/node/vm.d.ts, node_modules/@types/node/test.d.ts, node_modules/@types/node/http.d.ts, node_modules/@types/node/http2.d.ts, node_modules/@types/node/stream.d.ts, node_modules/@types/node/inspector.d.ts, node_modules/@types/node/v8.d.ts, node_modules/@types/node/perf_hooks.d.ts, node_modules/@types/node/url.d.ts, node_modules/@types/node/cluster.d.ts, node_modules/@types/node/https.d.ts, node_modules/@types/node/assert.d.ts, node_modules/@types/node/fs.d.ts, node_modules/@types/node/dgram.d.ts, node_modules/@types/node/child_process.d.ts, node_modules/@types/node/zlib.d.ts, node_modules/@types/node/module.d.ts, node_modules/@types/node/sqlite.d.ts, node_modules/@types/node/process.d.ts, node_modules/@types/node/util.d.ts, node_modules/@types/node/dns/promises.d.ts, node_modules/@types/node/fs/promises.d.ts, node_modules/@types/node/net.d.ts, node_modules/@types/babel__core/index.d.ts, node_modules/@types/react/ts5.0/index.d.ts, node_modules/@types/react/index.d.ts, node_modules/@types/q/index.d.ts, node_modules/@types/json-schema/index.d.ts, node_modules/csstype/index.d.ts, node_modules/tempy/node_modules/type-fest/source/package-json.d.ts, node_modules/tempy/node_modules/type-fest/source/tsconfig-json.d.ts, node_modules/type-fest/source/package-json.d.ts, node_modules/type-fest/source/tsconfig-json.d.ts, node_modules/commander/typings/index.d.ts, node_modules/xterm/typings/xterm.d.ts, node_modules/xterm/src/browser/renderer/shared/TextureAtlas.ts, node_modules/xterm/src/browser/renderer/shared/CustomGlyphs.ts, node_modules/xterm/src/browser/renderer/dom/DomRendererRowFactory.ts, node_modules/xterm/src/browser/renderer/dom/DomRenderer.ts, node_modules/xterm/src/browser/Terminal.ts, node_modules/xterm/src/browser/services/SelectionService.ts, node_modules/xterm/src/common/InputHandler.ts, node_modules/xterm/src/common/Types.d.ts, node_modules/xterm/src/common/parser/EscapeSequenceParser.ts, node_modules/xterm/src/common/buffer/Buffer.ts, node_modules/xterm/src/common/buffer/BufferLine.ts, node_modules/decimal.js-light/decimal.d.ts, node_modules/acorn/dist/acorn.d.ts, node_modules/axe-core/axe.d.ts, node_modules/typescript/lib/lib.es2015.core.d.ts, node_modules/typescript/lib/lib.es5.d.ts, node_modules/typescript/lib/typescriptServices.d.ts, node_modules/typescript/lib/lib.dom.d.ts, node_modules/typescript/lib/lib.es2020.bigint.d.ts, node_modules/typescript/lib/protocol.d.ts, node_modules/typescript/lib/lib.webworker.d.ts, node_modules/typescript/lib/tsserverlibrary.d.ts, node_modules/typescript/lib/typescript.d.ts, node_modules/socket.io-client/build/esm-debug/socket.d.ts, node_modules/socket.io-client/build/esm/socket.d.ts, node_modules/socket.io-client/build/cjs/socket.d.ts, node_modules/date-fns/typings.d.ts, node_modules/postcss/lib/node.d.ts, node_modules/@rollup/pluginutils/node_modules/@types/estree/index.d.ts, node_modules/@typescript-eslint/types/dist/generated/ast-spec.d.ts, node_modules/@typescript-eslint/types/_ts3.4/dist/generated/ast-spec.d.ts, node_modules/@typescript-eslint/utils/dist/ast-utils/helpers.d.ts, node_modules/@typescript-eslint/utils/_ts3.4/dist/ast-utils/helpers.d.ts, node_modules/@remix-run/router/history.ts, node_modules/@remix-run/router/router.ts, node_modules/@remix-run/router/dist/utils.d.ts, node_modules/@remix-run/router/dist/router.d.ts, node_modules/@remix-run/router/utils.ts, node_modules/big-integer/BigInteger.d.ts, node_modules/xterm-addon-search/src/SearchAddon.ts, node_modules/enhanced-resolve/types.d.ts, node_modules/postcss-modules-local-by-default/node_modules/postcss-selector-parser/postcss-selector-parser.d.ts, node_modules/saxes/saxes.d.ts, node_modules/postcss-svgo/node_modules/commander/typings/index.d.ts, ../../total, node_modules/@mui/icons-material/index.d.ts, ../../total, node_modules/@mui/material/styles/components.d.ts, node_modules/webpack/types.d.ts, node_modules/resolve-url-loader/node_modules/postcss/lib/postcss.d.ts, node_modules/workbox-build/build/types.d.ts, node_modules/workbox-build/src/types.ts, node_modules/webpack-dev-server/types/bin/cli-flags.d.ts, node_modules/webpack-dev-server/types/lib/Server.d.ts, node_modules/postcss-modules-scope/node_modules/postcss-selector-parser/postcss-selector-parser.d.ts, node_modules/@babel/types/lib/index-legacy.d.ts, node_modules/@babel/types/lib/index.d.ts, node_modules/postcss-selector-parser/postcss-selector-parser.d.ts, node_modules/rollup/dist/rollup.d.ts, node_modules/ansi-escapes/node_modules/type-fest/source/package-json.d.ts, node_modules/ansi-escapes/node_modules/type-fest/source/tsconfig-json.d.ts, node_modules/minipass/dist/esm/index.d.ts, node_modules/minipass/dist/commonjs/index.d.ts, node_modules/execa/index.d.ts, node_modules/@jridgewell/trace-mapping/src/trace-mapping.ts, node_modules/@jridgewell/gen-mapping/src/gen-mapping.ts, node_modules/workbox-window/src/Workbox.ts, node_modules/recharts/types/util/types.d.ts, node_modules/axios/index.d.ts, node_modules/monaco-editor/monaco.d.ts, node_modules/monaco-editor/esm/vs/editor/editor.api.d.ts, node_modules/ajv/lib/core.ts, node_modules/ajv/lib/compile/validate/index.ts, node_modules/ajv/lib/compile/codegen/index.ts, node_modules/@eslint-community/regexpp/index.d.ts, node_modules/jest-watch-typeahead/node_modules/@types/yargs/index.d.ts, node_modules/jest-watch-typeahead/node_modules/@jest/types/build/index.d.ts, node_modules/jest-watch-typeahead/node_modules/emittery/index.d.ts, node_modules/path-scurry/dist/esm/index.d.ts, node_modules/path-scurry/dist/commonjs/index.d.ts, node_modules/path-scurry/node_modules/lru-cache/dist/esm/index.d.ts, node_modules/path-scurry/node_modules/lru-cache/dist/commonjs/index.d.ts, ../../total\")\n\n// Refactor with multiple agents\nTask(\"system-architect\", \"Design modular structure\")\nTask(\"coder\", \"Implement refactoring\")\nTask(\"tester\", \"Ensure behavior unchanged\")",
      "timeEstimate": "45 minutes",
      "priority": "medium",
      "benefit": "Improve maintainability"
    },
    {
      "type": "refactor",
      "project": "pachacuti-shell-viewer-backend",
      "title": "Refactor 128 complex files",
      "description": "Break down files over 500 lines",
      "implementation": "\n// Analyze complexity\nTask(\"code-analyzer\", \"Analyze node_modules/@types/babel__traverse/index.d.ts, node_modules/@types/yargs/index.d.ts, node_modules/@types/node/diagnostics_channel.d.ts, node_modules/@types/node/tls.d.ts, node_modules/@types/node/readline.d.ts, node_modules/@types/node/crypto.d.ts, node_modules/@types/node/events.d.ts, node_modules/@types/node/buffer.d.ts, node_modules/@types/node/worker_threads.d.ts, node_modules/@types/node/async_hooks.d.ts, node_modules/@types/node/stream/web.d.ts, node_modules/@types/node/dns.d.ts, node_modules/@types/node/vm.d.ts, node_modules/@types/node/test.d.ts, node_modules/@types/node/http.d.ts, node_modules/@types/node/http2.d.ts, node_modules/@types/node/stream.d.ts, node_modules/@types/node/inspector.d.ts, node_modules/@types/node/v8.d.ts, node_modules/@types/node/perf_hooks.d.ts, node_modules/@types/node/url.d.ts, node_modules/@types/node/cluster.d.ts, node_modules/@types/node/https.d.ts, node_modules/@types/node/assert.d.ts, node_modules/@types/node/fs.d.ts, node_modules/@types/node/dgram.d.ts, node_modules/@types/node/child_process.d.ts, node_modules/@types/node/zlib.d.ts, node_modules/@types/node/module.d.ts, node_modules/@types/node/sqlite.d.ts, node_modules/@types/node/process.d.ts, node_modules/@types/node/util.d.ts, node_modules/@types/node/dns/promises.d.ts, node_modules/@types/node/fs/promises.d.ts, node_modules/@types/node/net.d.ts, node_modules/@types/babel__core/index.d.ts, node_modules/web-streams-polyfill/types/ponyfill.d.ts, node_modules/@jest/types/build/index.d.ts, node_modules/type-fest/source/package-json.d.ts, node_modules/type-fest/source/tsconfig-json.d.ts, node_modules/ip-address/src/ipv6.ts, node_modules/moment/moment.d.ts, node_modules/moment/ts3.1-typings/moment.d.ts, node_modules/emittery/index.d.ts, node_modules/smart-buffer/typings/smartbuffer.d.ts, node_modules/fecha/src/fecha.ts, node_modules/socket.io/dist/socket.d.ts, node_modules/socket.io/dist/index.d.ts, node_modules/@sinclair/typebox/typebox.d.ts, node_modules/@babel/types/lib/index-legacy.d.ts, node_modules/@babel/types/lib/index.d.ts, node_modules/@supabase/auth-js/dist/module/GoTrueClient.d.ts, node_modules/@supabase/auth-js/dist/module/lib/types.d.ts, node_modules/@supabase/auth-js/dist/main/GoTrueClient.d.ts, node_modules/@supabase/auth-js/dist/main/lib/types.d.ts, node_modules/@supabase/auth-js/src/lib/types.ts, node_modules/@supabase/auth-js/src/GoTrueClient.ts, node_modules/@supabase/realtime-js/src/RealtimeClient.ts, node_modules/@supabase/realtime-js/src/RealtimeChannel.ts, node_modules/@supabase/storage-js/src/packages/StorageFileApi.ts, node_modules/@supabase/postgrest-js/src/PostgrestFilterBuilder.ts, node_modules/@supabase/postgrest-js/src/select-query-parser/utils.ts, node_modules/@supabase/postgrest-js/src/select-query-parser/result.ts, node_modules/execa/index.d.ts, node_modules/@jridgewell/trace-mapping/src/trace-mapping.ts, node_modules/@jridgewell/gen-mapping/src/gen-mapping.ts, node_modules/openai/resources/beta/realtime/realtime.d.ts, node_modules/openai/resources/beta/realtime/sessions.d.ts, node_modules/openai/resources/beta/threads/messages.d.ts, node_modules/openai/resources/beta/threads/threads.d.ts, node_modules/openai/resources/beta/threads/runs/steps.d.ts, node_modules/openai/resources/beta/threads/runs/runs.d.ts, node_modules/openai/resources/beta/assistants.d.ts, node_modules/openai/resources/evals/evals.d.ts, node_modules/openai/resources/evals/runs/runs.d.ts, node_modules/openai/resources/chat/completions/completions.d.ts, node_modules/openai/resources/responses/responses.d.ts, node_modules/openai/resources/fine-tuning/jobs/jobs.d.ts, node_modules/openai/node_modules/@types/node/diagnostics_channel.d.ts, node_modules/openai/node_modules/@types/node/tls.d.ts, node_modules/openai/node_modules/@types/node/readline.d.ts, node_modules/openai/node_modules/@types/node/crypto.d.ts, node_modules/openai/node_modules/@types/node/events.d.ts, node_modules/openai/node_modules/@types/node/buffer.d.ts, node_modules/openai/node_modules/@types/node/worker_threads.d.ts, node_modules/openai/node_modules/@types/node/async_hooks.d.ts, node_modules/openai/node_modules/@types/node/stream/web.d.ts, node_modules/openai/node_modules/@types/node/dns.d.ts, node_modules/openai/node_modules/@types/node/vm.d.ts, node_modules/openai/node_modules/@types/node/test.d.ts, node_modules/openai/node_modules/@types/node/http.d.ts, node_modules/openai/node_modules/@types/node/http2.d.ts, node_modules/openai/node_modules/@types/node/stream.d.ts, node_modules/openai/node_modules/@types/node/inspector.d.ts, node_modules/openai/node_modules/@types/node/v8.d.ts, node_modules/openai/node_modules/@types/node/perf_hooks.d.ts, node_modules/openai/node_modules/@types/node/url.d.ts, node_modules/openai/node_modules/@types/node/cluster.d.ts, node_modules/openai/node_modules/@types/node/https.d.ts, node_modules/openai/node_modules/@types/node/assert.d.ts, node_modules/openai/node_modules/@types/node/fs.d.ts, node_modules/openai/node_modules/@types/node/dgram.d.ts, node_modules/openai/node_modules/@types/node/child_process.d.ts, node_modules/openai/node_modules/@types/node/zlib.d.ts, node_modules/openai/node_modules/@types/node/module.d.ts, node_modules/openai/node_modules/@types/node/process.d.ts, node_modules/openai/node_modules/@types/node/util.d.ts, node_modules/openai/node_modules/@types/node/fs/promises.d.ts, node_modules/openai/node_modules/@types/node/net.d.ts, node_modules/openai/src/resources/beta/realtime/realtime.ts, node_modules/openai/src/resources/beta/realtime/sessions.ts, node_modules/openai/src/resources/beta/threads/messages.ts, node_modules/openai/src/resources/beta/threads/threads.ts, node_modules/openai/src/resources/beta/threads/runs/runs.ts, node_modules/openai/src/resources/beta/threads/runs/steps.ts, node_modules/openai/src/resources/beta/assistants.ts, node_modules/openai/src/resources/evals/evals.ts, node_modules/openai/src/resources/evals/runs/runs.ts, node_modules/openai/src/resources/chat/completions/completions.ts, node_modules/openai/src/resources/responses/responses.ts, node_modules/openai/src/resources/fine-tuning/jobs/jobs.ts, node_modules/openai/src/resources/vector-stores/vector-stores.ts, node_modules/openai/src/core.ts, node_modules/openai/src/lib/AbstractChatCompletionRunner.ts, node_modules/openai/src/lib/AssistantStream.ts, node_modules/openai/src/lib/ChatCompletionStream.ts, node_modules/openai/src/index.ts, ../../total\")\n\n// Refactor with multiple agents\nTask(\"system-architect\", \"Design modular structure\")\nTask(\"coder\", \"Implement refactoring\")\nTask(\"tester\", \"Ensure behavior unchanged\")",
      "timeEstimate": "45 minutes",
      "priority": "medium",
      "benefit": "Improve maintainability"
    },
    {
      "type": "refactor",
      "project": "zod",
      "title": "Refactor 24 complex files",
      "description": "Break down files over 500 lines",
      "implementation": "\n// Analyze complexity\nTask(\"code-analyzer\", \"Analyze v4/core/schemas.d.ts, v4/classic/schemas.d.ts, v3/types.d.ts, src/v4/core/schemas.ts, src/v4/core/api.ts, src/v4/core/to-json-schema.ts, src/v4/core/checks.ts, src/v4/core/util.ts, src/v4/mini/tests/index.test.ts, src/v4/mini/schemas.ts, src/v4/classic/tests/template-literal.test.ts, src/v4/classic/tests/index.test.ts, src/v4/classic/tests/error-utils.test.ts, src/v4/classic/tests/string.test.ts, src/v4/classic/tests/discriminated-unions.test.ts, src/v4/classic/tests/to-json-schema.test.ts, src/v4/classic/tests/refine.test.ts, src/v4/classic/tests/error.test.ts, src/v4/classic/tests/object.test.ts, src/v4/classic/schemas.ts, src/v3/tests/string.test.ts, src/v3/tests/error.test.ts, src/v3/types.ts, ../../total\")\n\n// Refactor with multiple agents\nTask(\"system-architect\", \"Design modular structure\")\nTask(\"coder\", \"Implement refactoring\")\nTask(\"tester\", \"Ensure behavior unchanged\")",
      "timeEstimate": "45 minutes",
      "priority": "medium",
      "benefit": "Improve maintainability"
    },
    {
      "type": "refactor",
      "project": "lru-cache",
      "title": "Refactor 1 complex files",
      "description": "Break down files over 500 lines",
      "implementation": "\n// Analyze complexity\nTask(\"code-analyzer\", \"Analyze index.d.ts\")\n\n// Refactor with multiple agents\nTask(\"system-architect\", \"Design modular structure\")\nTask(\"coder\", \"Implement refactoring\")\nTask(\"tester\", \"Ensure behavior unchanged\")",
      "timeEstimate": "45 minutes",
      "priority": "medium",
      "benefit": "Improve maintainability"
    },
    {
      "type": "todo-completion",
      "project": "ip-address",
      "title": "Complete 8 TODOs in ip-address",
      "description": "Use parallel agents to clear technical debt",
      "implementation": "\n// Find all TODOs\nGrep(\"TODO|FIXME|HACK\", {output_mode: \"content\", -n: true})\n\n// Spawn agents to complete them\nTask(\"coder\", \"Complete all TODO items\")\nTask(\"tester\", \"Add tests for completed TODOs\")\nTask(\"reviewer\", \"Review TODO completions\")",
      "timeEstimate": "40 minutes with parallel agents",
      "priority": "medium",
      "benefit": "Reduce technical debt"
    },
    {
      "type": "refactor",
      "project": "ip-address",
      "title": "Refactor 2 complex files",
      "description": "Break down files over 500 lines",
      "implementation": "\n// Analyze complexity\nTask(\"code-analyzer\", \"Analyze src/ipv6.ts, ../../total\")\n\n// Refactor with multiple agents\nTask(\"system-architect\", \"Design modular structure\")\nTask(\"coder\", \"Implement refactoring\")\nTask(\"tester\", \"Ensure behavior unchanged\")",
      "timeEstimate": "45 minutes",
      "priority": "medium",
      "benefit": "Improve maintainability"
    },
    {
      "type": "refactor",
      "project": "puppeteer",
      "title": "Refactor 2 complex files",
      "description": "Break down files over 500 lines",
      "implementation": "\n// Analyze complexity\nTask(\"code-analyzer\", \"Analyze lib/types.d.ts, ../../total\")\n\n// Refactor with multiple agents\nTask(\"system-architect\", \"Design modular structure\")\nTask(\"coder\", \"Implement refactoring\")\nTask(\"tester\", \"Ensure behavior unchanged\")",
      "timeEstimate": "45 minutes",
      "priority": "medium",
      "benefit": "Improve maintainability"
    },
    {
      "type": "refactor",
      "project": "ast-types",
      "title": "Refactor 3 complex files",
      "description": "Break down files over 500 lines",
      "implementation": "\n// Analyze complexity\nTask(\"code-analyzer\", \"Analyze gen/builders.d.ts, gen/namedTypes.d.ts, ../../total\")\n\n// Refactor with multiple agents\nTask(\"system-architect\", \"Design modular structure\")\nTask(\"coder\", \"Implement refactoring\")\nTask(\"tester\", \"Ensure behavior unchanged\")",
      "timeEstimate": "45 minutes",
      "priority": "medium",
      "benefit": "Improve maintainability"
    },
    {
      "type": "todo-completion",
      "project": "yargs-parser",
      "title": "Complete 6 TODOs in yargs-parser",
      "description": "Use parallel agents to clear technical debt",
      "implementation": "\n// Find all TODOs\nGrep(\"TODO|FIXME|HACK\", {output_mode: \"content\", -n: true})\n\n// Spawn agents to complete them\nTask(\"coder\", \"Complete all TODO items\")\nTask(\"tester\", \"Add tests for completed TODOs\")\nTask(\"reviewer\", \"Review TODO completions\")",
      "timeEstimate": "30 minutes with parallel agents",
      "priority": "medium",
      "benefit": "Reduce technical debt"
    },
    {
      "type": "refactor",
      "project": "smart-buffer",
      "title": "Refactor 2 complex files",
      "description": "Break down files over 500 lines",
      "implementation": "\n// Analyze complexity\nTask(\"code-analyzer\", \"Analyze typings/smartbuffer.d.ts, ../../total\")\n\n// Refactor with multiple agents\nTask(\"system-architect\", \"Design modular structure\")\nTask(\"coder\", \"Implement refactoring\")\nTask(\"tester\", \"Ensure behavior unchanged\")",
      "timeEstimate": "45 minutes",
      "priority": "medium",
      "benefit": "Improve maintainability"
    },
    {
      "type": "refactor",
      "project": "devtools-protocol",
      "title": "Refactor 5 complex files",
      "description": "Break down files over 500 lines",
      "implementation": "\n// Analyze complexity\nTask(\"code-analyzer\", \"Analyze types/protocol-mapping.d.ts, types/protocol-tests-proxy-api.d.ts, types/protocol.d.ts, types/protocol-proxy-api.d.ts, ../../total\")\n\n// Refactor with multiple agents\nTask(\"system-architect\", \"Design modular structure\")\nTask(\"coder\", \"Implement refactoring\")\nTask(\"tester\", \"Ensure behavior unchanged\")",
      "timeEstimate": "45 minutes",
      "priority": "medium",
      "benefit": "Improve maintainability"
    },
    {
      "type": "refactor",
      "project": "bare-fs",
      "title": "Refactor 2 complex files",
      "description": "Break down files over 500 lines",
      "implementation": "\n// Analyze complexity\nTask(\"code-analyzer\", \"Analyze index.d.ts, ../../total\")\n\n// Refactor with multiple agents\nTask(\"system-architect\", \"Design modular structure\")\nTask(\"coder\", \"Implement refactoring\")\nTask(\"tester\", \"Ensure behavior unchanged\")",
      "timeEstimate": "45 minutes",
      "priority": "medium",
      "benefit": "Improve maintainability"
    },
    {
      "type": "refactor",
      "project": "undici-types",
      "title": "Refactor 1 complex files",
      "description": "Break down files over 500 lines",
      "implementation": "\n// Analyze complexity\nTask(\"code-analyzer\", \"Analyze ../../total\")\n\n// Refactor with multiple agents\nTask(\"system-architect\", \"Design modular structure\")\nTask(\"coder\", \"Implement refactoring\")\nTask(\"tester\", \"Ensure behavior unchanged\")",
      "timeEstimate": "45 minutes",
      "priority": "medium",
      "benefit": "Improve maintainability"
    },
    {
      "type": "refactor",
      "project": "basic-ftp",
      "title": "Refactor 1 complex files",
      "description": "Break down files over 500 lines",
      "implementation": "\n// Analyze complexity\nTask(\"code-analyzer\", \"Analyze ../../total\")\n\n// Refactor with multiple agents\nTask(\"system-architect\", \"Design modular structure\")\nTask(\"coder\", \"Implement refactoring\")\nTask(\"tester\", \"Ensure behavior unchanged\")",
      "timeEstimate": "45 minutes",
      "priority": "medium",
      "benefit": "Improve maintainability"
    },
    {
      "type": "refactor",
      "project": "chromium-bidi",
      "title": "Refactor 7 complex files",
      "description": "Break down files over 500 lines",
      "implementation": "\n// Analyze complexity\nTask(\"code-analyzer\", \"Analyze lib/esm/protocol/generated/webdriver-bidi.d.ts, lib/esm/protocol-parser/generated/webdriver-bidi.d.ts, lib/esm/protocol-parser/generated/webdriver-bidi-bluetooth.d.ts, lib/cjs/protocol/generated/webdriver-bidi.d.ts, lib/cjs/protocol-parser/generated/webdriver-bidi.d.ts, lib/cjs/protocol-parser/generated/webdriver-bidi-bluetooth.d.ts, ../../total\")\n\n// Refactor with multiple agents\nTask(\"system-architect\", \"Design modular structure\")\nTask(\"coder\", \"Implement refactoring\")\nTask(\"tester\", \"Ensure behavior unchanged\")",
      "timeEstimate": "45 minutes",
      "priority": "medium",
      "benefit": "Improve maintainability"
    },
    {
      "type": "refactor",
      "project": "puppeteer-core",
      "title": "Refactor 31 complex files",
      "description": "Break down files over 500 lines",
      "implementation": "\n// Analyze complexity\nTask(\"code-analyzer\", \"Analyze lib/esm/puppeteer/api/ElementHandle.d.ts, lib/esm/puppeteer/api/Frame.d.ts, lib/esm/puppeteer/api/Page.d.ts, lib/types.d.ts, lib/es5-iife/puppeteer-core-browser.d.ts, lib/cjs/puppeteer/api/ElementHandle.d.ts, lib/cjs/puppeteer/api/Frame.d.ts, lib/cjs/puppeteer/api/Page.d.ts, src/cdp/EmulationManager.ts, src/cdp/ExecutionContext.ts, src/cdp/FrameManager.ts, src/cdp/Accessibility.ts, src/cdp/NetworkManager.ts, src/cdp/Input.ts, src/cdp/Page.ts, src/cdp/Coverage.ts, src/bidi/core/BrowsingContext.ts, src/bidi/Frame.ts, src/bidi/Input.ts, src/bidi/Page.ts, src/common/USKeyboardLayout.ts, src/common/Device.ts, src/api/HTTPRequest.ts, src/api/Frame.ts, src/api/Input.ts, src/api/locators/locators.ts, src/api/Browser.ts, src/api/Page.ts, src/api/ElementHandle.ts, src/node/BrowserLauncher.ts, ../../total\")\n\n// Refactor with multiple agents\nTask(\"system-architect\", \"Design modular structure\")\nTask(\"coder\", \"Implement refactoring\")\nTask(\"tester\", \"Ensure behavior unchanged\")",
      "timeEstimate": "45 minutes",
      "priority": "medium",
      "benefit": "Improve maintainability"
    },
    {
      "type": "refactor",
      "project": "tests",
      "title": "Refactor 107 complex files",
      "description": "Break down files over 500 lines",
      "implementation": "\n// Analyze complexity\nTask(\"code-analyzer\", \"Analyze node_modules/zod/v4/core/schemas.d.ts, node_modules/zod/v4/classic/schemas.d.ts, node_modules/zod/v3/types.d.ts, node_modules/zod/src/v4/core/schemas.ts, node_modules/zod/src/v4/core/api.ts, node_modules/zod/src/v4/core/to-json-schema.ts, node_modules/zod/src/v4/core/checks.ts, node_modules/zod/src/v4/core/util.ts, node_modules/zod/src/v4/mini/tests/index.test.ts, node_modules/zod/src/v4/mini/schemas.ts, node_modules/zod/src/v4/classic/tests/template-literal.test.ts, node_modules/zod/src/v4/classic/tests/index.test.ts, node_modules/zod/src/v4/classic/tests/error-utils.test.ts, node_modules/zod/src/v4/classic/tests/string.test.ts, node_modules/zod/src/v4/classic/tests/discriminated-unions.test.ts, node_modules/zod/src/v4/classic/tests/to-json-schema.test.ts, node_modules/zod/src/v4/classic/tests/refine.test.ts, node_modules/zod/src/v4/classic/tests/error.test.ts, node_modules/zod/src/v4/classic/tests/object.test.ts, node_modules/zod/src/v4/classic/schemas.ts, node_modules/zod/src/v3/tests/string.test.ts, node_modules/zod/src/v3/tests/error.test.ts, node_modules/zod/src/v3/types.ts, node_modules/@types/node/diagnostics_channel.d.ts, node_modules/@types/node/tls.d.ts, node_modules/@types/node/readline.d.ts, node_modules/@types/node/crypto.d.ts, node_modules/@types/node/events.d.ts, node_modules/@types/node/buffer.d.ts, node_modules/@types/node/worker_threads.d.ts, node_modules/@types/node/async_hooks.d.ts, node_modules/@types/node/stream/web.d.ts, node_modules/@types/node/dns.d.ts, node_modules/@types/node/vm.d.ts, node_modules/@types/node/test.d.ts, node_modules/@types/node/http.d.ts, node_modules/@types/node/http2.d.ts, node_modules/@types/node/stream.d.ts, node_modules/@types/node/inspector.d.ts, node_modules/@types/node/v8.d.ts, node_modules/@types/node/perf_hooks.d.ts, node_modules/@types/node/url.d.ts, node_modules/@types/node/cluster.d.ts, node_modules/@types/node/https.d.ts, node_modules/@types/node/assert.d.ts, node_modules/@types/node/fs.d.ts, node_modules/@types/node/dgram.d.ts, node_modules/@types/node/child_process.d.ts, node_modules/@types/node/zlib.d.ts, node_modules/@types/node/module.d.ts, node_modules/@types/node/sqlite.d.ts, node_modules/@types/node/process.d.ts, node_modules/@types/node/util.d.ts, node_modules/@types/node/dns/promises.d.ts, node_modules/@types/node/fs/promises.d.ts, node_modules/@types/node/net.d.ts, node_modules/lru-cache/index.d.ts, node_modules/ip-address/src/ipv6.ts, node_modules/puppeteer/lib/types.d.ts, node_modules/ast-types/gen/builders.d.ts, node_modules/ast-types/gen/namedTypes.d.ts, node_modules/smart-buffer/typings/smartbuffer.d.ts, node_modules/devtools-protocol/types/protocol-mapping.d.ts, node_modules/devtools-protocol/types/protocol-tests-proxy-api.d.ts, node_modules/devtools-protocol/types/protocol.d.ts, node_modules/devtools-protocol/types/protocol-proxy-api.d.ts, node_modules/bare-fs/index.d.ts, node_modules/chromium-bidi/lib/esm/protocol/generated/webdriver-bidi.d.ts, node_modules/chromium-bidi/lib/esm/protocol-parser/generated/webdriver-bidi.d.ts, node_modules/chromium-bidi/lib/esm/protocol-parser/generated/webdriver-bidi-bluetooth.d.ts, node_modules/chromium-bidi/lib/cjs/protocol/generated/webdriver-bidi.d.ts, node_modules/chromium-bidi/lib/cjs/protocol-parser/generated/webdriver-bidi.d.ts, node_modules/chromium-bidi/lib/cjs/protocol-parser/generated/webdriver-bidi-bluetooth.d.ts, node_modules/puppeteer-core/lib/esm/puppeteer/api/ElementHandle.d.ts, node_modules/puppeteer-core/lib/esm/puppeteer/api/Frame.d.ts, node_modules/puppeteer-core/lib/esm/puppeteer/api/Page.d.ts, node_modules/puppeteer-core/lib/types.d.ts, node_modules/puppeteer-core/lib/es5-iife/puppeteer-core-browser.d.ts, node_modules/puppeteer-core/lib/cjs/puppeteer/api/ElementHandle.d.ts, node_modules/puppeteer-core/lib/cjs/puppeteer/api/Frame.d.ts, node_modules/puppeteer-core/lib/cjs/puppeteer/api/Page.d.ts, node_modules/puppeteer-core/src/cdp/EmulationManager.ts, node_modules/puppeteer-core/src/cdp/ExecutionContext.ts, node_modules/puppeteer-core/src/cdp/FrameManager.ts, node_modules/puppeteer-core/src/cdp/Accessibility.ts, node_modules/puppeteer-core/src/cdp/NetworkManager.ts, node_modules/puppeteer-core/src/cdp/Input.ts, node_modules/puppeteer-core/src/cdp/Page.ts, node_modules/puppeteer-core/src/cdp/Coverage.ts, node_modules/puppeteer-core/src/bidi/core/BrowsingContext.ts, node_modules/puppeteer-core/src/bidi/Frame.ts, node_modules/puppeteer-core/src/bidi/Input.ts, node_modules/puppeteer-core/src/bidi/Page.ts, node_modules/puppeteer-core/src/common/USKeyboardLayout.ts, node_modules/puppeteer-core/src/common/Device.ts, node_modules/puppeteer-core/src/api/HTTPRequest.ts, node_modules/puppeteer-core/src/api/Frame.ts, node_modules/puppeteer-core/src/api/Input.ts, node_modules/puppeteer-core/src/api/locators/locators.ts, node_modules/puppeteer-core/src/api/Browser.ts, node_modules/puppeteer-core/src/api/Page.ts, node_modules/puppeteer-core/src/api/ElementHandle.ts, node_modules/puppeteer-core/src/node/BrowserLauncher.ts, node_modules/@puppeteer/browsers/src/install.ts, node_modules/@puppeteer/browsers/src/CLI.ts, node_modules/@puppeteer/browsers/src/launch.ts, ../total\")\n\n// Refactor with multiple agents\nTask(\"system-architect\", \"Design modular structure\")\nTask(\"coder\", \"Implement refactoring\")\nTask(\"tester\", \"Ensure behavior unchanged\")",
      "timeEstimate": "45 minutes",
      "priority": "medium",
      "benefit": "Improve maintainability"
    },
    {
      "type": "refactor",
      "project": "pachacuti-slack-integration",
      "title": "Refactor 112 complex files",
      "description": "Break down files over 500 lines",
      "implementation": "\n// Analyze complexity\nTask(\"code-analyzer\", \"Analyze node_modules/@types/lodash/fp.d.ts, node_modules/@types/lodash/common/function.d.ts, node_modules/@types/lodash/common/array.d.ts, node_modules/@types/lodash/common/string.d.ts, node_modules/@types/lodash/common/object.d.ts, node_modules/@types/lodash/common/lang.d.ts, node_modules/@types/lodash/common/collection.d.ts, node_modules/@types/lodash/common/util.d.ts, node_modules/@types/express-serve-static-core/index.d.ts, node_modules/@types/yargs/index.d.ts, node_modules/@types/node/globals.d.ts, node_modules/@types/node/tls.d.ts, node_modules/@types/node/crypto.d.ts, node_modules/@types/node/http2.d.ts, node_modules/@types/node/inspector.d.ts, node_modules/@types/node/fs.d.ts, node_modules/@types/node/child_process.d.ts, node_modules/fecha/src/fecha.ts, node_modules/axios/index.d.ts, node_modules/@slack/types/dist/block-kit/block-elements.d.ts, node_modules/@slack/logger/node_modules/@types/node/diagnostics_channel.d.ts, node_modules/@slack/logger/node_modules/@types/node/tls.d.ts, node_modules/@slack/logger/node_modules/@types/node/readline.d.ts, node_modules/@slack/logger/node_modules/@types/node/crypto.d.ts, node_modules/@slack/logger/node_modules/@types/node/events.d.ts, node_modules/@slack/logger/node_modules/@types/node/buffer.d.ts, node_modules/@slack/logger/node_modules/@types/node/worker_threads.d.ts, node_modules/@slack/logger/node_modules/@types/node/async_hooks.d.ts, node_modules/@slack/logger/node_modules/@types/node/stream/web.d.ts, node_modules/@slack/logger/node_modules/@types/node/dns.d.ts, node_modules/@slack/logger/node_modules/@types/node/vm.d.ts, node_modules/@slack/logger/node_modules/@types/node/test.d.ts, node_modules/@slack/logger/node_modules/@types/node/http.d.ts, node_modules/@slack/logger/node_modules/@types/node/http2.d.ts, node_modules/@slack/logger/node_modules/@types/node/stream.d.ts, node_modules/@slack/logger/node_modules/@types/node/inspector.d.ts, node_modules/@slack/logger/node_modules/@types/node/v8.d.ts, node_modules/@slack/logger/node_modules/@types/node/perf_hooks.d.ts, node_modules/@slack/logger/node_modules/@types/node/url.d.ts, node_modules/@slack/logger/node_modules/@types/node/cluster.d.ts, node_modules/@slack/logger/node_modules/@types/node/https.d.ts, node_modules/@slack/logger/node_modules/@types/node/assert.d.ts, node_modules/@slack/logger/node_modules/@types/node/fs.d.ts, node_modules/@slack/logger/node_modules/@types/node/dgram.d.ts, node_modules/@slack/logger/node_modules/@types/node/child_process.d.ts, node_modules/@slack/logger/node_modules/@types/node/zlib.d.ts, node_modules/@slack/logger/node_modules/@types/node/module.d.ts, node_modules/@slack/logger/node_modules/@types/node/sqlite.d.ts, node_modules/@slack/logger/node_modules/@types/node/process.d.ts, node_modules/@slack/logger/node_modules/@types/node/util.d.ts, node_modules/@slack/logger/node_modules/@types/node/dns/promises.d.ts, node_modules/@slack/logger/node_modules/@types/node/fs/promises.d.ts, node_modules/@slack/logger/node_modules/@types/node/net.d.ts, node_modules/@slack/web-api/dist/types/response/SearchAllResponse.d.ts, node_modules/@slack/web-api/dist/types/response/FilesSharedPublicURLResponse.d.ts, node_modules/@slack/web-api/dist/types/response/FilesInfoResponse.d.ts, node_modules/@slack/web-api/dist/types/response/PinsListResponse.d.ts, node_modules/@slack/web-api/dist/types/response/FilesRemoteInfoResponse.d.ts, node_modules/@slack/web-api/dist/types/response/FilesRemoteShareResponse.d.ts, node_modules/@slack/web-api/dist/types/response/FilesListResponse.d.ts, node_modules/@slack/web-api/dist/types/response/FilesRemoteListResponse.d.ts, node_modules/@slack/web-api/dist/types/response/ReactionsListResponse.d.ts, node_modules/@slack/web-api/dist/types/response/ReactionsGetResponse.d.ts, node_modules/@slack/web-api/dist/types/response/FilesRevokePublicURLResponse.d.ts, node_modules/@slack/web-api/dist/types/response/SearchMessagesResponse.d.ts, node_modules/@slack/web-api/dist/types/response/FilesRemoteAddResponse.d.ts, node_modules/@slack/web-api/dist/types/response/SearchFilesResponse.d.ts, node_modules/@slack/web-api/dist/types/response/ChatPostMessageResponse.d.ts, node_modules/@slack/web-api/dist/types/response/ChatScheduleMessageResponse.d.ts, node_modules/@slack/web-api/dist/types/response/ConversationsRepliesResponse.d.ts, node_modules/@slack/web-api/dist/types/response/ConversationsOpenResponse.d.ts, node_modules/@slack/web-api/dist/types/response/ChatUpdateResponse.d.ts, node_modules/@slack/web-api/dist/types/response/RtmStartResponse.d.ts, node_modules/@slack/web-api/dist/types/response/ConversationsHistoryResponse.d.ts, node_modules/@slack/web-api/dist/types/response/StarsListResponse.d.ts, node_modules/@slack/web-api/dist/types/response/FilesRemoteUpdateResponse.d.ts, node_modules/@slack/web-api/dist/types/response/FilesUploadResponse.d.ts, node_modules/@slack/web-api/dist/methods.d.ts, node_modules/@slack/web-api/node_modules/@types/node/diagnostics_channel.d.ts, node_modules/@slack/web-api/node_modules/@types/node/tls.d.ts, node_modules/@slack/web-api/node_modules/@types/node/readline.d.ts, node_modules/@slack/web-api/node_modules/@types/node/crypto.d.ts, node_modules/@slack/web-api/node_modules/@types/node/events.d.ts, node_modules/@slack/web-api/node_modules/@types/node/buffer.d.ts, node_modules/@slack/web-api/node_modules/@types/node/worker_threads.d.ts, node_modules/@slack/web-api/node_modules/@types/node/async_hooks.d.ts, node_modules/@slack/web-api/node_modules/@types/node/stream/web.d.ts, node_modules/@slack/web-api/node_modules/@types/node/dns.d.ts, node_modules/@slack/web-api/node_modules/@types/node/vm.d.ts, node_modules/@slack/web-api/node_modules/@types/node/test.d.ts, node_modules/@slack/web-api/node_modules/@types/node/http.d.ts, node_modules/@slack/web-api/node_modules/@types/node/http2.d.ts, node_modules/@slack/web-api/node_modules/@types/node/stream.d.ts, node_modules/@slack/web-api/node_modules/@types/node/inspector.d.ts, node_modules/@slack/web-api/node_modules/@types/node/v8.d.ts, node_modules/@slack/web-api/node_modules/@types/node/perf_hooks.d.ts, node_modules/@slack/web-api/node_modules/@types/node/url.d.ts, node_modules/@slack/web-api/node_modules/@types/node/cluster.d.ts, node_modules/@slack/web-api/node_modules/@types/node/https.d.ts, node_modules/@slack/web-api/node_modules/@types/node/assert.d.ts, node_modules/@slack/web-api/node_modules/@types/node/fs.d.ts, node_modules/@slack/web-api/node_modules/@types/node/dgram.d.ts, node_modules/@slack/web-api/node_modules/@types/node/child_process.d.ts, node_modules/@slack/web-api/node_modules/@types/node/zlib.d.ts, node_modules/@slack/web-api/node_modules/@types/node/module.d.ts, node_modules/@slack/web-api/node_modules/@types/node/sqlite.d.ts, node_modules/@slack/web-api/node_modules/@types/node/process.d.ts, node_modules/@slack/web-api/node_modules/@types/node/util.d.ts, node_modules/@slack/web-api/node_modules/@types/node/dns/promises.d.ts, node_modules/@slack/web-api/node_modules/@types/node/fs/promises.d.ts, node_modules/@slack/web-api/node_modules/@types/node/net.d.ts, ../../total\")\n\n// Refactor with multiple agents\nTask(\"system-architect\", \"Design modular structure\")\nTask(\"coder\", \"Implement refactoring\")\nTask(\"tester\", \"Ensure behavior unchanged\")",
      "timeEstimate": "45 minutes",
      "priority": "medium",
      "benefit": "Improve maintainability"
    },
    {
      "type": "refactor",
      "project": "crypto-campaign-unified",
      "title": "Refactor 186 complex files",
      "description": "Break down files over 500 lines",
      "implementation": "\n// Analyze complexity\nTask(\"code-analyzer\", \"Analyze node_modules/@types/chai/index.d.ts, node_modules/@types/estree/index.d.ts, node_modules/@types/node/diagnostics_channel.d.ts, node_modules/@types/node/tls.d.ts, node_modules/@types/node/readline.d.ts, node_modules/@types/node/crypto.d.ts, node_modules/@types/node/events.d.ts, node_modules/@types/node/buffer.d.ts, node_modules/@types/node/worker_threads.d.ts, node_modules/@types/node/async_hooks.d.ts, node_modules/@types/node/stream/web.d.ts, node_modules/@types/node/dns.d.ts, node_modules/@types/node/vm.d.ts, node_modules/@types/node/test.d.ts, node_modules/@types/node/http.d.ts, node_modules/@types/node/http2.d.ts, node_modules/@types/node/stream.d.ts, node_modules/@types/node/inspector.d.ts, node_modules/@types/node/v8.d.ts, node_modules/@types/node/perf_hooks.d.ts, node_modules/@types/node/url.d.ts, node_modules/@types/node/cluster.d.ts, node_modules/@types/node/https.d.ts, node_modules/@types/node/assert.d.ts, node_modules/@types/node/fs.d.ts, node_modules/@types/node/dgram.d.ts, node_modules/@types/node/child_process.d.ts, node_modules/@types/node/zlib.d.ts, node_modules/@types/node/module.d.ts, node_modules/@types/node/process.d.ts, node_modules/@types/node/util.d.ts, node_modules/@types/node/fs/promises.d.ts, node_modules/@types/node/net.d.ts, node_modules/@noble/curves/src/abstract/weierstrass.ts, node_modules/@noble/curves/src/abstract/edwards.ts, node_modules/@noble/curves/src/bls12-381.ts, node_modules/happy-dom/lib/css/declaration/property-manager/CSSStyleDeclarationPropertySetParser.d.ts, node_modules/happy-dom/lib/css/declaration/CSSStyleDeclaration.d.ts, node_modules/happy-dom/lib/nodes/element/Element.d.ts, node_modules/happy-dom/lib/nodes/document/Document.d.ts, node_modules/happy-dom/lib/nodes/html-input-element/HTMLInputElement.d.ts, node_modules/happy-dom/lib/window/BrowserWindow.d.ts, node_modules/happy-dom/src/svg/SVGTransformList.ts, node_modules/happy-dom/src/svg/SVGNumberList.ts, node_modules/happy-dom/src/svg/SVGPointList.ts, node_modules/happy-dom/src/css/declaration/property-manager/CSSStyleDeclarationPropertyManager.ts, node_modules/happy-dom/src/css/declaration/property-manager/CSSStyleDeclarationPropertySetParser.ts, node_modules/happy-dom/src/css/declaration/property-manager/CSSStyleDeclarationPropertyGetParser.ts, node_modules/happy-dom/src/css/declaration/CSSStyleDeclaration.ts, node_modules/happy-dom/src/config/HTMLElementConfig.ts, node_modules/happy-dom/src/nodes/html-element/HTMLElement.ts, node_modules/happy-dom/src/nodes/html-form-element/HTMLFormElement.ts, node_modules/happy-dom/src/nodes/svg-element/SVGElement.ts, node_modules/happy-dom/src/nodes/html-text-area-element/HTMLTextAreaElement.ts, node_modules/happy-dom/src/nodes/element/Element.ts, node_modules/happy-dom/src/nodes/document/Document.ts, node_modules/happy-dom/src/nodes/html-input-element/HTMLInputElement.ts, node_modules/happy-dom/src/nodes/html-select-element/HTMLSelectElement.ts, node_modules/happy-dom/src/nodes/node/Node.ts, node_modules/happy-dom/src/nodes/html-script-element/HTMLScriptElement.ts, node_modules/happy-dom/src/nodes/svg-svg-element/SVGSVGElement.ts, node_modules/happy-dom/src/nodes/html-media-element/HTMLMediaElement.ts, node_modules/happy-dom/src/module/ECMAScriptModuleCompiler.ts, node_modules/happy-dom/src/xml-http-request/XMLHttpRequest.ts, node_modules/happy-dom/src/fetch/SyncFetch.ts, node_modules/happy-dom/src/fetch/Fetch.ts, node_modules/happy-dom/src/xml-parser/XMLParser.ts, node_modules/happy-dom/src/window/BrowserWindow.ts, node_modules/happy-dom/src/html-parser/HTMLParser.ts, node_modules/happy-dom/src/dom/dom-matrix/DOMMatrixReadOnly.ts, node_modules/happy-dom/src/selection/Selection.ts, node_modules/happy-dom/src/range/Range.ts, node_modules/happy-dom/src/query-selector/QuerySelector.ts, node_modules/happy-dom/cjs/css/declaration/property-manager/CSSStyleDeclarationPropertySetParser.d.ts, node_modules/happy-dom/cjs/css/declaration/CSSStyleDeclaration.d.ts, node_modules/happy-dom/cjs/nodes/element/Element.d.ts, node_modules/happy-dom/cjs/nodes/document/Document.d.ts, node_modules/happy-dom/cjs/nodes/html-input-element/HTMLInputElement.d.ts, node_modules/happy-dom/cjs/window/BrowserWindow.d.ts, node_modules/lru-cache/dist/esm/index.d.ts, node_modules/lru-cache/dist/commonjs/index.d.ts, node_modules/ethers/lib.commonjs/providers/provider.d.ts, node_modules/ethers/lib.commonjs/utils/errors.d.ts, node_modules/ethers/lib.commonjs/abi/typed.d.ts, node_modules/ethers/src.ts/transaction/transaction.ts, node_modules/ethers/src.ts/contract/contract.ts, node_modules/ethers/src.ts/hash/typed-data.ts, node_modules/ethers/src.ts/providers/provider-etherscan.ts, node_modules/ethers/src.ts/providers/abstract-provider.ts, node_modules/ethers/src.ts/providers/provider-fallback.ts, node_modules/ethers/src.ts/providers/ens-resolver.ts, node_modules/ethers/src.ts/providers/provider-jsonrpc.ts, node_modules/ethers/src.ts/providers/provider.ts, node_modules/ethers/src.ts/utils/errors.ts, node_modules/ethers/src.ts/utils/fixednumber.ts, node_modules/ethers/src.ts/utils/fetch.ts, node_modules/ethers/src.ts/abi/coders/abstract-coder.ts, node_modules/ethers/src.ts/abi/fragments.ts, node_modules/ethers/src.ts/abi/interface.ts, node_modules/ethers/src.ts/abi/typed.ts, node_modules/ethers/src.ts/wallet/hdwallet.ts, node_modules/ethers/node_modules/@types/node/diagnostics_channel.d.ts, node_modules/ethers/node_modules/@types/node/globals.d.ts, node_modules/ethers/node_modules/@types/node/tls.d.ts, node_modules/ethers/node_modules/@types/node/readline.d.ts, node_modules/ethers/node_modules/@types/node/crypto.d.ts, node_modules/ethers/node_modules/@types/node/events.d.ts, node_modules/ethers/node_modules/@types/node/buffer.d.ts, node_modules/ethers/node_modules/@types/node/worker_threads.d.ts, node_modules/ethers/node_modules/@types/node/async_hooks.d.ts, node_modules/ethers/node_modules/@types/node/stream/web.d.ts, node_modules/ethers/node_modules/@types/node/dns.d.ts, node_modules/ethers/node_modules/@types/node/vm.d.ts, node_modules/ethers/node_modules/@types/node/test.d.ts, node_modules/ethers/node_modules/@types/node/http.d.ts, node_modules/ethers/node_modules/@types/node/http2.d.ts, node_modules/ethers/node_modules/@types/node/stream.d.ts, node_modules/ethers/node_modules/@types/node/inspector.d.ts, node_modules/ethers/node_modules/@types/node/v8.d.ts, node_modules/ethers/node_modules/@types/node/perf_hooks.d.ts, node_modules/ethers/node_modules/@types/node/url.d.ts, node_modules/ethers/node_modules/@types/node/cluster.d.ts, node_modules/ethers/node_modules/@types/node/https.d.ts, node_modules/ethers/node_modules/@types/node/assert.d.ts, node_modules/ethers/node_modules/@types/node/fs.d.ts, node_modules/ethers/node_modules/@types/node/dgram.d.ts, node_modules/ethers/node_modules/@types/node/child_process.d.ts, node_modules/ethers/node_modules/@types/node/zlib.d.ts, node_modules/ethers/node_modules/@types/node/process.d.ts, node_modules/ethers/node_modules/@types/node/util.d.ts, node_modules/ethers/node_modules/@types/node/fs/promises.d.ts, node_modules/ethers/node_modules/@types/node/net.d.ts, node_modules/ethers/lib.esm/providers/provider.d.ts, node_modules/ethers/lib.esm/utils/errors.d.ts, node_modules/ethers/lib.esm/abi/typed.d.ts, node_modules/type-fest/source/package-json.d.ts, node_modules/type-fest/source/tsconfig-json.d.ts, node_modules/vitest/dist/chunks/reporters.d.BFLkQcL6.d.ts, node_modules/vitest/dist/index.d.ts, node_modules/postcss/lib/node.d.ts, node_modules/@asamuzakjp/css-color/dist/esm/js/color.d.ts, node_modules/@asamuzakjp/css-color/src/js/css-calc.ts, node_modules/@asamuzakjp/css-color/src/js/color.ts, node_modules/@asamuzakjp/css-color/src/js/relative-color.ts, node_modules/@csstools/css-parser-algorithms/dist/index.d.ts, node_modules/@csstools/css-tokenizer/dist/index.d.ts, node_modules/@mswjs/interceptors/src/interceptors/ClientRequest/MockHttpSocket.ts, node_modules/@mswjs/interceptors/src/interceptors/XMLHttpRequest/XMLHttpRequestController.ts, node_modules/saxes/saxes.d.ts, node_modules/vite/dist/node/index.d.ts, node_modules/graphql/language/parser.d.ts, node_modules/graphql/language/ast.d.ts, node_modules/graphql/type/definition.d.ts, node_modules/@babel/types/lib/index-legacy.d.ts, node_modules/@babel/types/lib/index.d.ts, node_modules/msw/src/core/handlers/GraphQLHandler.test.ts, node_modules/rollup/dist/rollup.d.ts, node_modules/@supabase/auth-js/dist/module/GoTrueClient.d.ts, node_modules/@supabase/auth-js/dist/module/lib/types.d.ts, node_modules/@supabase/auth-js/dist/main/GoTrueClient.d.ts, node_modules/@supabase/auth-js/dist/main/lib/types.d.ts, node_modules/@supabase/auth-js/src/lib/types.ts, node_modules/@supabase/auth-js/src/GoTrueClient.ts, node_modules/@supabase/realtime-js/src/RealtimeClient.ts, node_modules/@supabase/realtime-js/src/RealtimeChannel.ts, node_modules/@supabase/storage-js/src/packages/StorageFileApi.ts, node_modules/@supabase/postgrest-js/src/PostgrestFilterBuilder.ts, node_modules/@supabase/postgrest-js/src/select-query-parser/utils.ts, node_modules/@supabase/postgrest-js/src/select-query-parser/result.ts, node_modules/expect-type/dist/index.d.ts, node_modules/ansi-escapes/node_modules/type-fest/source/package-json.d.ts, node_modules/ansi-escapes/node_modules/type-fest/source/tsconfig-json.d.ts, node_modules/@vitest/runner/dist/tasks.d-CkscK4of.d.ts, node_modules/@vitest/mocker/dist/node.d.ts, node_modules/@vitest/expect/dist/index.d.ts, node_modules/esbuild/lib/main.d.ts, node_modules/minipass/dist/esm/index.d.ts, node_modules/minipass/dist/commonjs/index.d.ts, node_modules/@testing-library/jest-dom/types/matchers.d.ts, node_modules/@jridgewell/trace-mapping/src/trace-mapping.ts, node_modules/@jridgewell/gen-mapping/src/gen-mapping.ts, node_modules/tough-cookie/dist/cookie/cookieJar.d.ts, node_modules/entities/src/decode.ts, node_modules/path-scurry/dist/esm/index.d.ts, node_modules/path-scurry/dist/commonjs/index.d.ts, ../total\")\n\n// Refactor with multiple agents\nTask(\"system-architect\", \"Design modular structure\")\nTask(\"coder\", \"Implement refactoring\")\nTask(\"tester\", \"Ensure behavior unchanged\")",
      "timeEstimate": "45 minutes",
      "priority": "medium",
      "benefit": "Improve maintainability"
    },
    {
      "type": "efficiency",
      "title": "Use parallel agent execution",
      "description": "Launch multiple agents for independent tasks",
      "implementation": "\n// Instead of sequential:\nTask(\"coder\", \"Task 1\")\n// wait...\nTask(\"tester\", \"Task 2\")\n\n// Do parallel:\nTask(\"coder\", \"Task 1\")\nTask(\"tester\", \"Task 2\")\nTask(\"reviewer\", \"Task 3\")\n// All in one message!",
      "timeEstimate": "Saves 50-70% time",
      "priority": "medium",
      "benefit": "2.8x faster execution"
    },
    {
      "type": "swarm-coordination",
      "title": "Use swarm coordination for large projects",
      "description": "Coordinate multiple agents for complex tasks",
      "implementation": "\n// Initialize swarm\nTask(\"swarm-init\", \"Initialize adaptive swarm\")\n\n// Deploy specialized agents\nTask(\"hierarchical-coordinator\", \"Coordinate refactoring\")\nTask(\"mesh-coordinator\", \"Distribute testing tasks\")\nTask(\"adaptive-coordinator\", \"Optimize based on complexity\")",
      "timeEstimate": "60% faster than sequential",
      "priority": "medium",
      "benefit": "Handle complexity efficiently"
    },
    {
      "type": "commit",
      "project": "pachacuti",
      "title": "Commit changes in pachacuti",
      "description": "Clean up uncommitted work",
      "implementation": "\nBash(\"git status\")\nBash(\"git diff\")\nBash(\"git add -A\")\nBash(\"git commit -m 'chore: Clean up pending changes'\")",
      "timeEstimate": "2 minutes",
      "priority": "low",
      "benefit": "Clean git status"
    },
    {
      "type": "commit",
      "project": "pachacuti-session-recorder",
      "title": "Commit changes in pachacuti-session-recorder",
      "description": "Clean up uncommitted work",
      "implementation": "\nBash(\"git status\")\nBash(\"git diff\")\nBash(\"git add -A\")\nBash(\"git commit -m 'chore: Clean up pending changes'\")",
      "timeEstimate": "2 minutes",
      "priority": "low",
      "benefit": "Clean git status"
    },
    {
      "type": "commit",
      "project": "pachacuti-shell-viewer-frontend",
      "title": "Commit changes in pachacuti-shell-viewer-frontend",
      "description": "Clean up uncommitted work",
      "implementation": "\nBash(\"git status\")\nBash(\"git diff\")\nBash(\"git add -A\")\nBash(\"git commit -m 'chore: Clean up pending changes'\")",
      "timeEstimate": "2 minutes",
      "priority": "low",
      "benefit": "Clean git status"
    },
    {
      "type": "commit",
      "project": "pachacuti-shell-viewer-backend",
      "title": "Commit changes in pachacuti-shell-viewer-backend",
      "description": "Clean up uncommitted work",
      "implementation": "\nBash(\"git status\")\nBash(\"git diff\")\nBash(\"git add -A\")\nBash(\"git commit -m 'chore: Clean up pending changes'\")",
      "timeEstimate": "2 minutes",
      "priority": "low",
      "benefit": "Clean git status"
    },
    {
      "type": "commit",
      "project": "pend",
      "title": "Commit changes in pend",
      "description": "Clean up uncommitted work",
      "implementation": "\nBash(\"git status\")\nBash(\"git diff\")\nBash(\"git add -A\")\nBash(\"git commit -m 'chore: Clean up pending changes'\")",
      "timeEstimate": "2 minutes",
      "priority": "low",
      "benefit": "Clean git status"
    },
    {
      "type": "commit",
      "project": "fd-slicer",
      "title": "Commit changes in fd-slicer",
      "description": "Clean up uncommitted work",
      "implementation": "\nBash(\"git status\")\nBash(\"git diff\")\nBash(\"git add -A\")\nBash(\"git commit -m 'chore: Clean up pending changes'\")",
      "timeEstimate": "2 minutes",
      "priority": "low",
      "benefit": "Clean git status"
    },
    {
      "type": "commit",
      "project": "callsites",
      "title": "Commit changes in callsites",
      "description": "Clean up uncommitted work",
      "implementation": "\nBash(\"git status\")\nBash(\"git diff\")\nBash(\"git add -A\")\nBash(\"git commit -m 'chore: Clean up pending changes'\")",
      "timeEstimate": "2 minutes",
      "priority": "low",
      "benefit": "Clean git status"
    },
    {
      "type": "commit",
      "project": "zod",
      "title": "Commit changes in zod",
      "description": "Clean up uncommitted work",
      "implementation": "\nBash(\"git status\")\nBash(\"git diff\")\nBash(\"git add -A\")\nBash(\"git commit -m 'chore: Clean up pending changes'\")",
      "timeEstimate": "2 minutes",
      "priority": "low",
      "benefit": "Clean git status"
    },
    {
      "type": "commit",
      "project": "json-parse-even-better-errors",
      "title": "Commit changes in json-parse-even-better-errors",
      "description": "Clean up uncommitted work",
      "implementation": "\nBash(\"git status\")\nBash(\"git diff\")\nBash(\"git add -A\")\nBash(\"git commit -m 'chore: Clean up pending changes'\")",
      "timeEstimate": "2 minutes",
      "priority": "low",
      "benefit": "Clean git status"
    },
    {
      "type": "commit",
      "project": "typed-query-selector",
      "title": "Commit changes in typed-query-selector",
      "description": "Clean up uncommitted work",
      "implementation": "\nBash(\"git status\")\nBash(\"git diff\")\nBash(\"git add -A\")\nBash(\"git commit -m 'chore: Clean up pending changes'\")",
      "timeEstimate": "2 minutes",
      "priority": "low",
      "benefit": "Clean git status"
    },
    {
      "type": "commit",
      "project": "strip-ansi",
      "title": "Commit changes in strip-ansi",
      "description": "Clean up uncommitted work",
      "implementation": "\nBash(\"git status\")\nBash(\"git diff\")\nBash(\"git add -A\")\nBash(\"git commit -m 'chore: Clean up pending changes'\")",
      "timeEstimate": "2 minutes",
      "priority": "low",
      "benefit": "Clean git status"
    },
    {
      "type": "commit",
      "project": "proxy-agent",
      "title": "Commit changes in proxy-agent",
      "description": "Clean up uncommitted work",
      "implementation": "\nBash(\"git status\")\nBash(\"git diff\")\nBash(\"git add -A\")\nBash(\"git commit -m 'chore: Clean up pending changes'\")",
      "timeEstimate": "2 minutes",
      "priority": "low",
      "benefit": "Clean git status"
    },
    {
      "type": "commit",
      "project": "agent-base",
      "title": "Commit changes in agent-base",
      "description": "Clean up uncommitted work",
      "implementation": "\nBash(\"git status\")\nBash(\"git diff\")\nBash(\"git add -A\")\nBash(\"git commit -m 'chore: Clean up pending changes'\")",
      "timeEstimate": "2 minutes",
      "priority": "low",
      "benefit": "Clean git status"
    },
    {
      "type": "commit",
      "project": "text-decoder",
      "title": "Commit changes in text-decoder",
      "description": "Clean up uncommitted work",
      "implementation": "\nBash(\"git status\")\nBash(\"git diff\")\nBash(\"git add -A\")\nBash(\"git commit -m 'chore: Clean up pending changes'\")",
      "timeEstimate": "2 minutes",
      "priority": "low",
      "benefit": "Clean git status"
    },
    {
      "type": "commit",
      "project": "ms",
      "title": "Commit changes in ms",
      "description": "Clean up uncommitted work",
      "implementation": "\nBash(\"git status\")\nBash(\"git diff\")\nBash(\"git add -A\")\nBash(\"git commit -m 'chore: Clean up pending changes'\")",
      "timeEstimate": "2 minutes",
      "priority": "low",
      "benefit": "Clean git status"
    },
    {
      "type": "commit",
      "project": "dotenv",
      "title": "Commit changes in dotenv",
      "description": "Clean up uncommitted work",
      "implementation": "\nBash(\"git status\")\nBash(\"git diff\")\nBash(\"git add -A\")\nBash(\"git commit -m 'chore: Clean up pending changes'\")",
      "timeEstimate": "2 minutes",
      "priority": "low",
      "benefit": "Clean git status"
    },
    {
      "type": "commit",
      "project": "lru-cache",
      "title": "Commit changes in lru-cache",
      "description": "Clean up uncommitted work",
      "implementation": "\nBash(\"git status\")\nBash(\"git diff\")\nBash(\"git add -A\")\nBash(\"git commit -m 'chore: Clean up pending changes'\")",
      "timeEstimate": "2 minutes",
      "priority": "low",
      "benefit": "Clean git status"
    },
    {
      "type": "commit",
      "project": "require-directory",
      "title": "Commit changes in require-directory",
      "description": "Clean up uncommitted work",
      "implementation": "\nBash(\"git status\")\nBash(\"git diff\")\nBash(\"git add -A\")\nBash(\"git commit -m 'chore: Clean up pending changes'\")",
      "timeEstimate": "2 minutes",
      "priority": "low",
      "benefit": "Clean git status"
    },
    {
      "type": "commit",
      "project": "escalade",
      "title": "Commit changes in escalade",
      "description": "Clean up uncommitted work",
      "implementation": "\nBash(\"git status\")\nBash(\"git diff\")\nBash(\"git add -A\")\nBash(\"git commit -m 'chore: Clean up pending changes'\")",
      "timeEstimate": "2 minutes",
      "priority": "low",
      "benefit": "Clean git status"
    },
    {
      "type": "commit",
      "project": "ip-address",
      "title": "Commit changes in ip-address",
      "description": "Clean up uncommitted work",
      "implementation": "\nBash(\"git status\")\nBash(\"git diff\")\nBash(\"git add -A\")\nBash(\"git commit -m 'chore: Clean up pending changes'\")",
      "timeEstimate": "2 minutes",
      "priority": "low",
      "benefit": "Clean git status"
    },
    {
      "type": "commit",
      "project": "error-ex",
      "title": "Commit changes in error-ex",
      "description": "Clean up uncommitted work",
      "implementation": "\nBash(\"git status\")\nBash(\"git diff\")\nBash(\"git add -A\")\nBash(\"git commit -m 'chore: Clean up pending changes'\")",
      "timeEstimate": "2 minutes",
      "priority": "low",
      "benefit": "Clean git status"
    },
    {
      "type": "commit",
      "project": "progress",
      "title": "Commit changes in progress",
      "description": "Clean up uncommitted work",
      "implementation": "\nBash(\"git status\")\nBash(\"git diff\")\nBash(\"git add -A\")\nBash(\"git commit -m 'chore: Clean up pending changes'\")",
      "timeEstimate": "2 minutes",
      "priority": "low",
      "benefit": "Clean git status"
    },
    {
      "type": "commit",
      "project": "puppeteer",
      "title": "Commit changes in puppeteer",
      "description": "Clean up uncommitted work",
      "implementation": "\nBash(\"git status\")\nBash(\"git diff\")\nBash(\"git add -A\")\nBash(\"git commit -m 'chore: Clean up pending changes'\")",
      "timeEstimate": "2 minutes",
      "priority": "low",
      "benefit": "Clean git status"
    },
    {
      "type": "commit",
      "project": "parse-json",
      "title": "Commit changes in parse-json",
      "description": "Clean up uncommitted work",
      "implementation": "\nBash(\"git status\")\nBash(\"git diff\")\nBash(\"git add -A\")\nBash(\"git commit -m 'chore: Clean up pending changes'\")",
      "timeEstimate": "2 minutes",
      "priority": "low",
      "benefit": "Clean git status"
    },
    {
      "type": "commit",
      "project": "buffer-crc32",
      "title": "Commit changes in buffer-crc32",
      "description": "Clean up uncommitted work",
      "implementation": "\nBash(\"git status\")\nBash(\"git diff\")\nBash(\"git add -A\")\nBash(\"git commit -m 'chore: Clean up pending changes'\")",
      "timeEstimate": "2 minutes",
      "priority": "low",
      "benefit": "Clean git status"
    },
    {
      "type": "commit",
      "project": "ast-types",
      "title": "Commit changes in ast-types",
      "description": "Clean up uncommitted work",
      "implementation": "\nBash(\"git status\")\nBash(\"git diff\")\nBash(\"git add -A\")\nBash(\"git commit -m 'chore: Clean up pending changes'\")",
      "timeEstimate": "2 minutes",
      "priority": "low",
      "benefit": "Clean git status"
    },
    {
      "type": "commit",
      "project": "extract-zip",
      "title": "Commit changes in extract-zip",
      "description": "Clean up uncommitted work",
      "implementation": "\nBash(\"git status\")\nBash(\"git diff\")\nBash(\"git add -A\")\nBash(\"git commit -m 'chore: Clean up pending changes'\")",
      "timeEstimate": "2 minutes",
      "priority": "low",
      "benefit": "Clean git status"
    },
    {
      "type": "commit",
      "project": "wrap-ansi",
      "title": "Commit changes in wrap-ansi",
      "description": "Clean up uncommitted work",
      "implementation": "\nBash(\"git status\")\nBash(\"git diff\")\nBash(\"git add -A\")\nBash(\"git commit -m 'chore: Clean up pending changes'\")",
      "timeEstimate": "2 minutes",
      "priority": "low",
      "benefit": "Clean git status"
    },
    {
      "type": "commit",
      "project": "y18n",
      "title": "Commit changes in y18n",
      "description": "Clean up uncommitted work",
      "implementation": "\nBash(\"git status\")\nBash(\"git diff\")\nBash(\"git add -A\")\nBash(\"git commit -m 'chore: Clean up pending changes'\")",
      "timeEstimate": "2 minutes",
      "priority": "low",
      "benefit": "Clean git status"
    },
    {
      "type": "commit",
      "project": "once",
      "title": "Commit changes in once",
      "description": "Clean up uncommitted work",
      "implementation": "\nBash(\"git status\")\nBash(\"git diff\")\nBash(\"git add -A\")\nBash(\"git commit -m 'chore: Clean up pending changes'\")",
      "timeEstimate": "2 minutes",
      "priority": "low",
      "benefit": "Clean git status"
    },
    {
      "type": "commit",
      "project": "bare-path",
      "title": "Commit changes in bare-path",
      "description": "Clean up uncommitted work",
      "implementation": "\nBash(\"git status\")\nBash(\"git diff\")\nBash(\"git add -A\")\nBash(\"git commit -m 'chore: Clean up pending changes'\")",
      "timeEstimate": "2 minutes",
      "priority": "low",
      "benefit": "Clean git status"
    },
    {
      "type": "commit",
      "project": "proxy-from-env",
      "title": "Commit changes in proxy-from-env",
      "description": "Clean up uncommitted work",
      "implementation": "\nBash(\"git status\")\nBash(\"git diff\")\nBash(\"git add -A\")\nBash(\"git commit -m 'chore: Clean up pending changes'\")",
      "timeEstimate": "2 minutes",
      "priority": "low",
      "benefit": "Clean git status"
    },
    {
      "type": "commit",
      "project": "get-uri",
      "title": "Commit changes in get-uri",
      "description": "Clean up uncommitted work",
      "implementation": "\nBash(\"git status\")\nBash(\"git diff\")\nBash(\"git add -A\")\nBash(\"git commit -m 'chore: Clean up pending changes'\")",
      "timeEstimate": "2 minutes",
      "priority": "low",
      "benefit": "Clean git status"
    },
    {
      "type": "commit",
      "project": "tslib",
      "title": "Commit changes in tslib",
      "description": "Clean up uncommitted work",
      "implementation": "\nBash(\"git status\")\nBash(\"git diff\")\nBash(\"git add -A\")\nBash(\"git commit -m 'chore: Clean up pending changes'\")",
      "timeEstimate": "2 minutes",
      "priority": "low",
      "benefit": "Clean git status"
    },
    {
      "type": "commit",
      "project": "argparse",
      "title": "Commit changes in argparse",
      "description": "Clean up uncommitted work",
      "implementation": "\nBash(\"git status\")\nBash(\"git diff\")\nBash(\"git add -A\")\nBash(\"git commit -m 'chore: Clean up pending changes'\")",
      "timeEstimate": "2 minutes",
      "priority": "low",
      "benefit": "Clean git status"
    },
    {
      "type": "commit",
      "project": "socks-proxy-agent",
      "title": "Commit changes in socks-proxy-agent",
      "description": "Clean up uncommitted work",
      "implementation": "\nBash(\"git status\")\nBash(\"git diff\")\nBash(\"git add -A\")\nBash(\"git commit -m 'chore: Clean up pending changes'\")",
      "timeEstimate": "2 minutes",
      "priority": "low",
      "benefit": "Clean git status"
    },
    {
      "type": "commit",
      "project": "is-fullwidth-code-point",
      "title": "Commit changes in is-fullwidth-code-point",
      "description": "Clean up uncommitted work",
      "implementation": "\nBash(\"git status\")\nBash(\"git diff\")\nBash(\"git add -A\")\nBash(\"git commit -m 'chore: Clean up pending changes'\")",
      "timeEstimate": "2 minutes",
      "priority": "low",
      "benefit": "Clean git status"
    },
    {
      "type": "commit",
      "project": "env-paths",
      "title": "Commit changes in env-paths",
      "description": "Clean up uncommitted work",
      "implementation": "\nBash(\"git status\")\nBash(\"git diff\")\nBash(\"git add -A\")\nBash(\"git commit -m 'chore: Clean up pending changes'\")",
      "timeEstimate": "2 minutes",
      "priority": "low",
      "benefit": "Clean git status"
    },
    {
      "type": "commit",
      "project": "yargs-parser",
      "title": "Commit changes in yargs-parser",
      "description": "Clean up uncommitted work",
      "implementation": "\nBash(\"git status\")\nBash(\"git diff\")\nBash(\"git add -A\")\nBash(\"git commit -m 'chore: Clean up pending changes'\")",
      "timeEstimate": "2 minutes",
      "priority": "low",
      "benefit": "Clean git status"
    },
    {
      "type": "commit",
      "project": "color-name",
      "title": "Commit changes in color-name",
      "description": "Clean up uncommitted work",
      "implementation": "\nBash(\"git status\")\nBash(\"git diff\")\nBash(\"git add -A\")\nBash(\"git commit -m 'chore: Clean up pending changes'\")",
      "timeEstimate": "2 minutes",
      "priority": "low",
      "benefit": "Clean git status"
    },
    {
      "type": "commit",
      "project": "js-yaml",
      "title": "Commit changes in js-yaml",
      "description": "Clean up uncommitted work",
      "implementation": "\nBash(\"git status\")\nBash(\"git diff\")\nBash(\"git add -A\")\nBash(\"git commit -m 'chore: Clean up pending changes'\")",
      "timeEstimate": "2 minutes",
      "priority": "low",
      "benefit": "Clean git status"
    },
    {
      "type": "commit",
      "project": "smart-buffer",
      "title": "Commit changes in smart-buffer",
      "description": "Clean up uncommitted work",
      "implementation": "\nBash(\"git status\")\nBash(\"git diff\")\nBash(\"git add -A\")\nBash(\"git commit -m 'chore: Clean up pending changes'\")",
      "timeEstimate": "2 minutes",
      "priority": "low",
      "benefit": "Clean git status"
    },
    {
      "type": "commit",
      "project": "parent-module",
      "title": "Commit changes in parent-module",
      "description": "Clean up uncommitted work",
      "implementation": "\nBash(\"git status\")\nBash(\"git diff\")\nBash(\"git add -A\")\nBash(\"git commit -m 'chore: Clean up pending changes'\")",
      "timeEstimate": "2 minutes",
      "priority": "low",
      "benefit": "Clean git status"
    },
    {
      "type": "commit",
      "project": "devtools-protocol",
      "title": "Commit changes in devtools-protocol",
      "description": "Clean up uncommitted work",
      "implementation": "\nBash(\"git status\")\nBash(\"git diff\")\nBash(\"git add -A\")\nBash(\"git commit -m 'chore: Clean up pending changes'\")",
      "timeEstimate": "2 minutes",
      "priority": "low",
      "benefit": "Clean git status"
    },
    {
      "type": "commit",
      "project": "tar-stream",
      "title": "Commit changes in tar-stream",
      "description": "Clean up uncommitted work",
      "implementation": "\nBash(\"git status\")\nBash(\"git diff\")\nBash(\"git add -A\")\nBash(\"git commit -m 'chore: Clean up pending changes'\")",
      "timeEstimate": "2 minutes",
      "priority": "low",
      "benefit": "Clean git status"
    },
    {
      "type": "commit",
      "project": "bare-fs",
      "title": "Commit changes in bare-fs",
      "description": "Clean up uncommitted work",
      "implementation": "\nBash(\"git status\")\nBash(\"git diff\")\nBash(\"git add -A\")\nBash(\"git commit -m 'chore: Clean up pending changes'\")",
      "timeEstimate": "2 minutes",
      "priority": "low",
      "benefit": "Clean git status"
    },
    {
      "type": "commit",
      "project": "netmask",
      "title": "Commit changes in netmask",
      "description": "Clean up uncommitted work",
      "implementation": "\nBash(\"git status\")\nBash(\"git diff\")\nBash(\"git add -A\")\nBash(\"git commit -m 'chore: Clean up pending changes'\")",
      "timeEstimate": "2 minutes",
      "priority": "low",
      "benefit": "Clean git status"
    },
    {
      "type": "commit",
      "project": "undici-types",
      "title": "Commit changes in undici-types",
      "description": "Clean up uncommitted work",
      "implementation": "\nBash(\"git status\")\nBash(\"git diff\")\nBash(\"git add -A\")\nBash(\"git commit -m 'chore: Clean up pending changes'\")",
      "timeEstimate": "2 minutes",
      "priority": "low",
      "benefit": "Clean git status"
    },
    {
      "type": "commit",
      "project": "end-of-stream",
      "title": "Commit changes in end-of-stream",
      "description": "Clean up uncommitted work",
      "implementation": "\nBash(\"git status\")\nBash(\"git diff\")\nBash(\"git add -A\")\nBash(\"git commit -m 'chore: Clean up pending changes'\")",
      "timeEstimate": "2 minutes",
      "priority": "low",
      "benefit": "Clean git status"
    },
    {
      "type": "commit",
      "project": "bare-os",
      "title": "Commit changes in bare-os",
      "description": "Clean up uncommitted work",
      "implementation": "\nBash(\"git status\")\nBash(\"git diff\")\nBash(\"git add -A\")\nBash(\"git commit -m 'chore: Clean up pending changes'\")",
      "timeEstimate": "2 minutes",
      "priority": "low",
      "benefit": "Clean git status"
    },
    {
      "type": "commit",
      "project": "esutils",
      "title": "Commit changes in esutils",
      "description": "Clean up uncommitted work",
      "implementation": "\nBash(\"git status\")\nBash(\"git diff\")\nBash(\"git add -A\")\nBash(\"git commit -m 'chore: Clean up pending changes'\")",
      "timeEstimate": "2 minutes",
      "priority": "low",
      "benefit": "Clean git status"
    },
    {
      "type": "commit",
      "project": "bare-stream",
      "title": "Commit changes in bare-stream",
      "description": "Clean up uncommitted work",
      "implementation": "\nBash(\"git status\")\nBash(\"git diff\")\nBash(\"git add -A\")\nBash(\"git commit -m 'chore: Clean up pending changes'\")",
      "timeEstimate": "2 minutes",
      "priority": "low",
      "benefit": "Clean git status"
    },
    {
      "type": "commit",
      "project": "ansi-regex",
      "title": "Commit changes in ansi-regex",
      "description": "Clean up uncommitted work",
      "implementation": "\nBash(\"git status\")\nBash(\"git diff\")\nBash(\"git add -A\")\nBash(\"git commit -m 'chore: Clean up pending changes'\")",
      "timeEstimate": "2 minutes",
      "priority": "low",
      "benefit": "Clean git status"
    },
    {
      "type": "commit",
      "project": "esprima",
      "title": "Commit changes in esprima",
      "description": "Clean up uncommitted work",
      "implementation": "\nBash(\"git status\")\nBash(\"git diff\")\nBash(\"git add -A\")\nBash(\"git commit -m 'chore: Clean up pending changes'\")",
      "timeEstimate": "2 minutes",
      "priority": "low",
      "benefit": "Clean git status"
    },
    {
      "type": "commit",
      "project": "basic-ftp",
      "title": "Commit changes in basic-ftp",
      "description": "Clean up uncommitted work",
      "implementation": "\nBash(\"git status\")\nBash(\"git diff\")\nBash(\"git add -A\")\nBash(\"git commit -m 'chore: Clean up pending changes'\")",
      "timeEstimate": "2 minutes",
      "priority": "low",
      "benefit": "Clean git status"
    },
    {
      "type": "commit",
      "project": "color-convert",
      "title": "Commit changes in color-convert",
      "description": "Clean up uncommitted work",
      "implementation": "\nBash(\"git status\")\nBash(\"git diff\")\nBash(\"git add -A\")\nBash(\"git commit -m 'chore: Clean up pending changes'\")",
      "timeEstimate": "2 minutes",
      "priority": "low",
      "benefit": "Clean git status"
    },
    {
      "type": "commit",
      "project": "get-caller-file",
      "title": "Commit changes in get-caller-file",
      "description": "Clean up uncommitted work",
      "implementation": "\nBash(\"git status\")\nBash(\"git diff\")\nBash(\"git add -A\")\nBash(\"git commit -m 'chore: Clean up pending changes'\")",
      "timeEstimate": "2 minutes",
      "priority": "low",
      "benefit": "Clean git status"
    },
    {
      "type": "commit",
      "project": "picocolors",
      "title": "Commit changes in picocolors",
      "description": "Clean up uncommitted work",
      "implementation": "\nBash(\"git status\")\nBash(\"git diff\")\nBash(\"git add -A\")\nBash(\"git commit -m 'chore: Clean up pending changes'\")",
      "timeEstimate": "2 minutes",
      "priority": "low",
      "benefit": "Clean git status"
    },
    {
      "type": "commit",
      "project": "lines-and-columns",
      "title": "Commit changes in lines-and-columns",
      "description": "Clean up uncommitted work",
      "implementation": "\nBash(\"git status\")\nBash(\"git diff\")\nBash(\"git add -A\")\nBash(\"git commit -m 'chore: Clean up pending changes'\")",
      "timeEstimate": "2 minutes",
      "priority": "low",
      "benefit": "Clean git status"
    },
    {
      "type": "commit",
      "project": "semver",
      "title": "Commit changes in semver",
      "description": "Clean up uncommitted work",
      "implementation": "\nBash(\"git status\")\nBash(\"git diff\")\nBash(\"git add -A\")\nBash(\"git commit -m 'chore: Clean up pending changes'\")",
      "timeEstimate": "2 minutes",
      "priority": "low",
      "benefit": "Clean git status"
    },
    {
      "type": "commit",
      "project": "b4a",
      "title": "Commit changes in b4a",
      "description": "Clean up uncommitted work",
      "implementation": "\nBash(\"git status\")\nBash(\"git diff\")\nBash(\"git add -A\")\nBash(\"git commit -m 'chore: Clean up pending changes'\")",
      "timeEstimate": "2 minutes",
      "priority": "low",
      "benefit": "Clean git status"
    },
    {
      "type": "commit",
      "project": "chromium-bidi",
      "title": "Commit changes in chromium-bidi",
      "description": "Clean up uncommitted work",
      "implementation": "\nBash(\"git status\")\nBash(\"git diff\")\nBash(\"git add -A\")\nBash(\"git commit -m 'chore: Clean up pending changes'\")",
      "timeEstimate": "2 minutes",
      "priority": "low",
      "benefit": "Clean git status"
    },
    {
      "type": "commit",
      "project": "estraverse",
      "title": "Commit changes in estraverse",
      "description": "Clean up uncommitted work",
      "implementation": "\nBash(\"git status\")\nBash(\"git diff\")\nBash(\"git add -A\")\nBash(\"git commit -m 'chore: Clean up pending changes'\")",
      "timeEstimate": "2 minutes",
      "priority": "low",
      "benefit": "Clean git status"
    },
    {
      "type": "commit",
      "project": "ansi-styles",
      "title": "Commit changes in ansi-styles",
      "description": "Clean up uncommitted work",
      "implementation": "\nBash(\"git status\")\nBash(\"git diff\")\nBash(\"git add -A\")\nBash(\"git commit -m 'chore: Clean up pending changes'\")",
      "timeEstimate": "2 minutes",
      "priority": "low",
      "benefit": "Clean git status"
    },
    {
      "type": "commit",
      "project": "js-tokens",
      "title": "Commit changes in js-tokens",
      "description": "Clean up uncommitted work",
      "implementation": "\nBash(\"git status\")\nBash(\"git diff\")\nBash(\"git add -A\")\nBash(\"git commit -m 'chore: Clean up pending changes'\")",
      "timeEstimate": "2 minutes",
      "priority": "low",
      "benefit": "Clean git status"
    },
    {
      "type": "commit",
      "project": "fast-fifo",
      "title": "Commit changes in fast-fifo",
      "description": "Clean up uncommitted work",
      "implementation": "\nBash(\"git status\")\nBash(\"git diff\")\nBash(\"git add -A\")\nBash(\"git commit -m 'chore: Clean up pending changes'\")",
      "timeEstimate": "2 minutes",
      "priority": "low",
      "benefit": "Clean git status"
    },
    {
      "type": "commit",
      "project": "pump",
      "title": "Commit changes in pump",
      "description": "Clean up uncommitted work",
      "implementation": "\nBash(\"git status\")\nBash(\"git diff\")\nBash(\"git add -A\")\nBash(\"git commit -m 'chore: Clean up pending changes'\")",
      "timeEstimate": "2 minutes",
      "priority": "low",
      "benefit": "Clean git status"
    },
    {
      "type": "commit",
      "project": "get-stream",
      "title": "Commit changes in get-stream",
      "description": "Clean up uncommitted work",
      "implementation": "\nBash(\"git status\")\nBash(\"git diff\")\nBash(\"git add -A\")\nBash(\"git commit -m 'chore: Clean up pending changes'\")",
      "timeEstimate": "2 minutes",
      "priority": "low",
      "benefit": "Clean git status"
    },
    {
      "type": "commit",
      "project": "is-arrayish",
      "title": "Commit changes in is-arrayish",
      "description": "Clean up uncommitted work",
      "implementation": "\nBash(\"git status\")\nBash(\"git diff\")\nBash(\"git add -A\")\nBash(\"git commit -m 'chore: Clean up pending changes'\")",
      "timeEstimate": "2 minutes",
      "priority": "low",
      "benefit": "Clean git status"
    },
    {
      "type": "commit",
      "project": "cliui",
      "title": "Commit changes in cliui",
      "description": "Clean up uncommitted work",
      "implementation": "\nBash(\"git status\")\nBash(\"git diff\")\nBash(\"git add -A\")\nBash(\"git commit -m 'chore: Clean up pending changes'\")",
      "timeEstimate": "2 minutes",
      "priority": "low",
      "benefit": "Clean git status"
    },
    {
      "type": "commit",
      "project": "yargs",
      "title": "Commit changes in yargs",
      "description": "Clean up uncommitted work",
      "implementation": "\nBash(\"git status\")\nBash(\"git diff\")\nBash(\"git add -A\")\nBash(\"git commit -m 'chore: Clean up pending changes'\")",
      "timeEstimate": "2 minutes",
      "priority": "low",
      "benefit": "Clean git status"
    },
    {
      "type": "commit",
      "project": "pac-proxy-agent",
      "title": "Commit changes in pac-proxy-agent",
      "description": "Clean up uncommitted work",
      "implementation": "\nBash(\"git status\")\nBash(\"git diff\")\nBash(\"git add -A\")\nBash(\"git commit -m 'chore: Clean up pending changes'\")",
      "timeEstimate": "2 minutes",
      "priority": "low",
      "benefit": "Clean git status"
    },
    {
      "type": "commit",
      "project": "tar-fs",
      "title": "Commit changes in tar-fs",
      "description": "Clean up uncommitted work",
      "implementation": "\nBash(\"git status\")\nBash(\"git diff\")\nBash(\"git add -A\")\nBash(\"git commit -m 'chore: Clean up pending changes'\")",
      "timeEstimate": "2 minutes",
      "priority": "low",
      "benefit": "Clean git status"
    },
    {
      "type": "commit",
      "project": "socks",
      "title": "Commit changes in socks",
      "description": "Clean up uncommitted work",
      "implementation": "\nBash(\"git status\")\nBash(\"git diff\")\nBash(\"git add -A\")\nBash(\"git commit -m 'chore: Clean up pending changes'\")",
      "timeEstimate": "2 minutes",
      "priority": "low",
      "benefit": "Clean git status"
    },
    {
      "type": "commit",
      "project": "import-fresh",
      "title": "Commit changes in import-fresh",
      "description": "Clean up uncommitted work",
      "implementation": "\nBash(\"git status\")\nBash(\"git diff\")\nBash(\"git add -A\")\nBash(\"git commit -m 'chore: Clean up pending changes'\")",
      "timeEstimate": "2 minutes",
      "priority": "low",
      "benefit": "Clean git status"
    },
    {
      "type": "commit",
      "project": "source-map",
      "title": "Commit changes in source-map",
      "description": "Clean up uncommitted work",
      "implementation": "\nBash(\"git status\")\nBash(\"git diff\")\nBash(\"git add -A\")\nBash(\"git commit -m 'chore: Clean up pending changes'\")",
      "timeEstimate": "2 minutes",
      "priority": "low",
      "benefit": "Clean git status"
    },
    {
      "type": "commit",
      "project": "degenerator",
      "title": "Commit changes in degenerator",
      "description": "Clean up uncommitted work",
      "implementation": "\nBash(\"git status\")\nBash(\"git diff\")\nBash(\"git add -A\")\nBash(\"git commit -m 'chore: Clean up pending changes'\")",
      "timeEstimate": "2 minutes",
      "priority": "low",
      "benefit": "Clean git status"
    },
    {
      "type": "commit",
      "project": "puppeteer-core",
      "title": "Commit changes in puppeteer-core",
      "description": "Clean up uncommitted work",
      "implementation": "\nBash(\"git status\")\nBash(\"git diff\")\nBash(\"git add -A\")\nBash(\"git commit -m 'chore: Clean up pending changes'\")",
      "timeEstimate": "2 minutes",
      "priority": "low",
      "benefit": "Clean git status"
    },
    {
      "type": "commit",
      "project": "escodegen",
      "title": "Commit changes in escodegen",
      "description": "Clean up uncommitted work",
      "implementation": "\nBash(\"git status\")\nBash(\"git diff\")\nBash(\"git add -A\")\nBash(\"git commit -m 'chore: Clean up pending changes'\")",
      "timeEstimate": "2 minutes",
      "priority": "low",
      "benefit": "Clean git status"
    },
    {
      "type": "commit",
      "project": "cosmiconfig",
      "title": "Commit changes in cosmiconfig",
      "description": "Clean up uncommitted work",
      "implementation": "\nBash(\"git status\")\nBash(\"git diff\")\nBash(\"git add -A\")\nBash(\"git commit -m 'chore: Clean up pending changes'\")",
      "timeEstimate": "2 minutes",
      "priority": "low",
      "benefit": "Clean git status"
    },
    {
      "type": "commit",
      "project": "https-proxy-agent",
      "title": "Commit changes in https-proxy-agent",
      "description": "Clean up uncommitted work",
      "implementation": "\nBash(\"git status\")\nBash(\"git diff\")\nBash(\"git add -A\")\nBash(\"git commit -m 'chore: Clean up pending changes'\")",
      "timeEstimate": "2 minutes",
      "priority": "low",
      "benefit": "Clean git status"
    },
    {
      "type": "commit",
      "project": "string-width",
      "title": "Commit changes in string-width",
      "description": "Clean up uncommitted work",
      "implementation": "\nBash(\"git status\")\nBash(\"git diff\")\nBash(\"git add -A\")\nBash(\"git commit -m 'chore: Clean up pending changes'\")",
      "timeEstimate": "2 minutes",
      "priority": "low",
      "benefit": "Clean git status"
    },
    {
      "type": "commit",
      "project": "streamx",
      "title": "Commit changes in streamx",
      "description": "Clean up uncommitted work",
      "implementation": "\nBash(\"git status\")\nBash(\"git diff\")\nBash(\"git add -A\")\nBash(\"git commit -m 'chore: Clean up pending changes'\")",
      "timeEstimate": "2 minutes",
      "priority": "low",
      "benefit": "Clean git status"
    },
    {
      "type": "commit",
      "project": "yauzl",
      "title": "Commit changes in yauzl",
      "description": "Clean up uncommitted work",
      "implementation": "\nBash(\"git status\")\nBash(\"git diff\")\nBash(\"git add -A\")\nBash(\"git commit -m 'chore: Clean up pending changes'\")",
      "timeEstimate": "2 minutes",
      "priority": "low",
      "benefit": "Clean git status"
    },
    {
      "type": "commit",
      "project": "wrappy",
      "title": "Commit changes in wrappy",
      "description": "Clean up uncommitted work",
      "implementation": "\nBash(\"git status\")\nBash(\"git diff\")\nBash(\"git add -A\")\nBash(\"git commit -m 'chore: Clean up pending changes'\")",
      "timeEstimate": "2 minutes",
      "priority": "low",
      "benefit": "Clean git status"
    },
    {
      "type": "commit",
      "project": "http-proxy-agent",
      "title": "Commit changes in http-proxy-agent",
      "description": "Clean up uncommitted work",
      "implementation": "\nBash(\"git status\")\nBash(\"git diff\")\nBash(\"git add -A\")\nBash(\"git commit -m 'chore: Clean up pending changes'\")",
      "timeEstimate": "2 minutes",
      "priority": "low",
      "benefit": "Clean git status"
    },
    {
      "type": "commit",
      "project": "resolve-from",
      "title": "Commit changes in resolve-from",
      "description": "Clean up uncommitted work",
      "implementation": "\nBash(\"git status\")\nBash(\"git diff\")\nBash(\"git add -A\")\nBash(\"git commit -m 'chore: Clean up pending changes'\")",
      "timeEstimate": "2 minutes",
      "priority": "low",
      "benefit": "Clean git status"
    },
    {
      "type": "commit",
      "project": "data-uri-to-buffer",
      "title": "Commit changes in data-uri-to-buffer",
      "description": "Clean up uncommitted work",
      "implementation": "\nBash(\"git status\")\nBash(\"git diff\")\nBash(\"git add -A\")\nBash(\"git commit -m 'chore: Clean up pending changes'\")",
      "timeEstimate": "2 minutes",
      "priority": "low",
      "benefit": "Clean git status"
    },
    {
      "type": "commit",
      "project": "emoji-regex",
      "title": "Commit changes in emoji-regex",
      "description": "Clean up uncommitted work",
      "implementation": "\nBash(\"git status\")\nBash(\"git diff\")\nBash(\"git add -A\")\nBash(\"git commit -m 'chore: Clean up pending changes'\")",
      "timeEstimate": "2 minutes",
      "priority": "low",
      "benefit": "Clean git status"
    },
    {
      "type": "commit",
      "project": "ws",
      "title": "Commit changes in ws",
      "description": "Clean up uncommitted work",
      "implementation": "\nBash(\"git status\")\nBash(\"git diff\")\nBash(\"git add -A\")\nBash(\"git commit -m 'chore: Clean up pending changes'\")",
      "timeEstimate": "2 minutes",
      "priority": "low",
      "benefit": "Clean git status"
    },
    {
      "type": "commit",
      "project": "pac-resolver",
      "title": "Commit changes in pac-resolver",
      "description": "Clean up uncommitted work",
      "implementation": "\nBash(\"git status\")\nBash(\"git diff\")\nBash(\"git add -A\")\nBash(\"git commit -m 'chore: Clean up pending changes'\")",
      "timeEstimate": "2 minutes",
      "priority": "low",
      "benefit": "Clean git status"
    },
    {
      "type": "commit",
      "project": "bare-events",
      "title": "Commit changes in bare-events",
      "description": "Clean up uncommitted work",
      "implementation": "\nBash(\"git status\")\nBash(\"git diff\")\nBash(\"git add -A\")\nBash(\"git commit -m 'chore: Clean up pending changes'\")",
      "timeEstimate": "2 minutes",
      "priority": "low",
      "benefit": "Clean git status"
    },
    {
      "type": "commit",
      "project": "debug",
      "title": "Commit changes in debug",
      "description": "Clean up uncommitted work",
      "implementation": "\nBash(\"git status\")\nBash(\"git diff\")\nBash(\"git add -A\")\nBash(\"git commit -m 'chore: Clean up pending changes'\")",
      "timeEstimate": "2 minutes",
      "priority": "low",
      "benefit": "Clean git status"
    },
    {
      "type": "commit",
      "project": "mitt",
      "title": "Commit changes in mitt",
      "description": "Clean up uncommitted work",
      "implementation": "\nBash(\"git status\")\nBash(\"git diff\")\nBash(\"git add -A\")\nBash(\"git commit -m 'chore: Clean up pending changes'\")",
      "timeEstimate": "2 minutes",
      "priority": "low",
      "benefit": "Clean git status"
    },
    {
      "type": "commit",
      "project": "tests",
      "title": "Commit changes in tests",
      "description": "Clean up uncommitted work",
      "implementation": "\nBash(\"git status\")\nBash(\"git diff\")\nBash(\"git add -A\")\nBash(\"git commit -m 'chore: Clean up pending changes'\")",
      "timeEstimate": "2 minutes",
      "priority": "low",
      "benefit": "Clean git status"
    },
    {
      "type": "commit",
      "project": "pachacuti-slack-integration",
      "title": "Commit changes in pachacuti-slack-integration",
      "description": "Clean up uncommitted work",
      "implementation": "\nBash(\"git status\")\nBash(\"git diff\")\nBash(\"git add -A\")\nBash(\"git commit -m 'chore: Clean up pending changes'\")",
      "timeEstimate": "2 minutes",
      "priority": "low",
      "benefit": "Clean git status"
    },
    {
      "type": "commit",
      "project": "crypto-campaign-unified",
      "title": "Commit changes in crypto-campaign-unified",
      "description": "Clean up uncommitted work",
      "implementation": "\nBash(\"git status\")\nBash(\"git diff\")\nBash(\"git add -A\")\nBash(\"git commit -m 'chore: Clean up pending changes'\")",
      "timeEstimate": "2 minutes",
      "priority": "low",
      "benefit": "Clean git status"
    }
  ],
  "stats": {
    "totalOptimizations": 262,
    "totalTime": "1540h 4m",
    "efficiencyGain": "70%"
  }
}