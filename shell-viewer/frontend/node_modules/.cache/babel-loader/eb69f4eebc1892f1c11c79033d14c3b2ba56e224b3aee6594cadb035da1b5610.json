{"ast":null,"code":"/**\n * Search Service\n * Handles AI-powered search API calls\n */\n\nconst API_BASE = process.env.REACT_APP_API_URL || 'http://localhost:3001';\nclass SearchService {\n  async search({\n    query,\n    sessionIds,\n    filters = {}\n  }) {\n    try {\n      const response = await fetch(`${API_BASE}/api/search`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          query,\n          sessionIds,\n          filters\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`Search failed: ${response.statusText}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Search error:', error);\n      throw error;\n    }\n  }\n  async askQuestion({\n    question,\n    context\n  }) {\n    try {\n      const response = await fetch(`${API_BASE}/api/ask`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          question,\n          context\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`Question failed: ${response.statusText}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Question error:', error);\n      throw error;\n    }\n  }\n  async analyzeCommand({\n    command,\n    output,\n    context\n  }) {\n    try {\n      const response = await fetch(`${API_BASE}/api/analyze-command`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          command,\n          output,\n          context\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`Analysis failed: ${response.statusText}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Analysis error:', error);\n      throw error;\n    }\n  }\n}\nexport const searchService = new SearchService();","map":{"version":3,"names":["API_BASE","process","env","REACT_APP_API_URL","SearchService","search","query","sessionIds","filters","response","fetch","method","headers","body","JSON","stringify","ok","Error","statusText","json","error","console","askQuestion","question","context","analyzeCommand","command","output","searchService"],"sources":["/Users/Danallovertheplace/pachacuti/shell-viewer/frontend/src/services/searchService.js"],"sourcesContent":["/**\n * Search Service\n * Handles AI-powered search API calls\n */\n\nconst API_BASE = process.env.REACT_APP_API_URL || 'http://localhost:3001';\n\nclass SearchService {\n  async search({ query, sessionIds, filters = {} }) {\n    try {\n      const response = await fetch(`${API_BASE}/api/search`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          query,\n          sessionIds,\n          filters\n        })\n      });\n\n      if (!response.ok) {\n        throw new Error(`Search failed: ${response.statusText}`);\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Search error:', error);\n      throw error;\n    }\n  }\n\n  async askQuestion({ question, context }) {\n    try {\n      const response = await fetch(`${API_BASE}/api/ask`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          question,\n          context\n        })\n      });\n\n      if (!response.ok) {\n        throw new Error(`Question failed: ${response.statusText}`);\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Question error:', error);\n      throw error;\n    }\n  }\n\n  async analyzeCommand({ command, output, context }) {\n    try {\n      const response = await fetch(`${API_BASE}/api/analyze-command`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          command,\n          output,\n          context\n        })\n      });\n\n      if (!response.ok) {\n        throw new Error(`Analysis failed: ${response.statusText}`);\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Analysis error:', error);\n      throw error;\n    }\n  }\n}\n\nexport const searchService = new SearchService();"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,uBAAuB;AAEzE,MAAMC,aAAa,CAAC;EAClB,MAAMC,MAAMA,CAAC;IAAEC,KAAK;IAAEC,UAAU;IAAEC,OAAO,GAAG,CAAC;EAAE,CAAC,EAAE;IAChD,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGV,QAAQ,aAAa,EAAE;QACrDW,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnBT,KAAK;UACLC,UAAU;UACVC;QACF,CAAC;MACH,CAAC,CAAC;MAEF,IAAI,CAACC,QAAQ,CAACO,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,kBAAkBR,QAAQ,CAACS,UAAU,EAAE,CAAC;MAC1D;MAEA,OAAO,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;IAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,eAAe,EAAEA,KAAK,CAAC;MACrC,MAAMA,KAAK;IACb;EACF;EAEA,MAAME,WAAWA,CAAC;IAAEC,QAAQ;IAAEC;EAAQ,CAAC,EAAE;IACvC,IAAI;MACF,MAAMf,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGV,QAAQ,UAAU,EAAE;QAClDW,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnBQ,QAAQ;UACRC;QACF,CAAC;MACH,CAAC,CAAC;MAEF,IAAI,CAACf,QAAQ,CAACO,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,oBAAoBR,QAAQ,CAACS,UAAU,EAAE,CAAC;MAC5D;MAEA,OAAO,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;IAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,iBAAiB,EAAEA,KAAK,CAAC;MACvC,MAAMA,KAAK;IACb;EACF;EAEA,MAAMK,cAAcA,CAAC;IAAEC,OAAO;IAAEC,MAAM;IAAEH;EAAQ,CAAC,EAAE;IACjD,IAAI;MACF,MAAMf,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGV,QAAQ,sBAAsB,EAAE;QAC9DW,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnBW,OAAO;UACPC,MAAM;UACNH;QACF,CAAC;MACH,CAAC,CAAC;MAEF,IAAI,CAACf,QAAQ,CAACO,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,oBAAoBR,QAAQ,CAACS,UAAU,EAAE,CAAC;MAC5D;MAEA,OAAO,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;IAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,iBAAiB,EAAEA,KAAK,CAAC;MACvC,MAAMA,KAAK;IACb;EACF;AACF;AAEA,OAAO,MAAMQ,aAAa,GAAG,IAAIxB,aAAa,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}